{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar CompositeXform = require('../../composite-xform');\n\nvar CfRuleExtXform = require('./cf-rule-ext-xform');\n\nvar ConditionalFormattingExtXform = require('./conditional-formatting-ext-xform');\n\nvar ConditionalFormattingsExtXform = /*#__PURE__*/function (_CompositeXform) {\n  _inherits(ConditionalFormattingsExtXform, _CompositeXform);\n\n  var _super = _createSuper(ConditionalFormattingsExtXform);\n\n  function ConditionalFormattingsExtXform() {\n    var _this;\n\n    _classCallCheck(this, ConditionalFormattingsExtXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'x14:conditionalFormatting': _this.cfXform = new ConditionalFormattingExtXform()\n    };\n    return _this;\n  }\n\n  _createClass(ConditionalFormattingsExtXform, [{\n    key: \"hasContent\",\n    value: function hasContent(model) {\n      if (model.hasExtContent === undefined) {\n        model.hasExtContent = model.some(function (cf) {\n          return cf.rules.some(CfRuleExtXform.isExt);\n        });\n      }\n\n      return model.hasExtContent;\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      var _this2 = this;\n\n      model.forEach(function (cf) {\n        _this2.cfXform.prepare(cf, options);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this3 = this;\n\n      if (this.hasContent(model)) {\n        xmlStream.openNode(this.tag);\n        model.forEach(function (cf) {\n          return _this3.cfXform.render(xmlStream, cf);\n        });\n        xmlStream.closeNode();\n      }\n    }\n  }, {\n    key: \"createNewModel\",\n    value: function createNewModel() {\n      return [];\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      // model is array of conditional formatting objects\n      this.model.push(parser.model);\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'x14:conditionalFormattings';\n    }\n  }]);\n\n  return ConditionalFormattingsExtXform;\n}(CompositeXform);\n\nmodule.exports = ConditionalFormattingsExtXform;","map":{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/conditional-formattings-ext-xform.js"],"names":["CompositeXform","require","CfRuleExtXform","ConditionalFormattingExtXform","ConditionalFormattingsExtXform","model","cf","options","xmlStream","name","parser","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,cAAc,GAAGC,OAAO,CAA9B,uBAA8B,CAA9B;;AAEA,IAAMC,cAAc,GAAGD,OAAO,CAA9B,qBAA8B,CAA9B;;AACA,IAAME,6BAA6B,GAAGF,OAAO,CAA7C,oCAA6C,CAA7C;;IAEMG,8B;;;;;AACJ,WAAA,8BAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,8BAAA,CAAA;;AACZ,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,GAAA,GAAW;AACT,mCAA8B,KAAA,CAAA,OAAA,GAAe,IAAA,6BAAA;AADpC,KAAX;AAHY,WAAA,KAAA;AAMb;;;;+BAMUC,K,EAAO;AAChB,UAAIA,KAAK,CAALA,aAAAA,KAAJ,SAAA,EAAuC;AACrCA,QAAAA,KAAK,CAALA,aAAAA,GAAsB,KAAK,CAAL,IAAA,CAAW,UAAA,EAAA,EAAE;AAAA,iBAAIC,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,CAAcJ,cAAc,CAAhC,KAAII,CAAJ;AAAnCD,SAAsB,CAAtBA;AACD;;AACD,aAAOA,KAAK,CAAZ,aAAA;AACD;;;4BAEOA,K,EAAOE,O,EAAS;AAAA,UAAA,MAAA,GAAA,IAAA;;AACtBF,MAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,EAAA,EAAM;AAClB,QAAA,MAAI,CAAJ,OAAA,CAAA,OAAA,CAAA,EAAA,EAAA,OAAA;AADFA,OAAAA;AAGD;;;2BAEMG,S,EAAWH,K,EAAO;AAAA,UAAA,MAAA,GAAA,IAAA;;AACvB,UAAI,KAAA,UAAA,CAAJ,KAAI,CAAJ,EAA4B;AAC1BG,QAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA;AACAH,QAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,EAAA,EAAE;AAAA,iBAAI,MAAI,CAAJ,OAAA,CAAA,MAAA,CAAA,SAAA,EAAJ,EAAI,CAAJ;AAAhBA,SAAAA;AACAG,QAAAA,SAAS,CAATA,SAAAA;AACD;AACF;;;qCAEgB;AACf,aAAA,EAAA;AACD;;;kCAEaC,I,EAAMC,M,EAAQ;AAC1B;AACA,WAAA,KAAA,CAAA,IAAA,CAAgBA,MAAM,CAAtB,KAAA;AACD;;;wBAhCS;AACR,aAAA,4BAAA;AACD;;;;EAX0CV,c;;AA4C7CW,MAAM,CAANA,OAAAA,GAAAA,8BAAAA","sourcesContent":["const CompositeXform = require('../../composite-xform');\r\n\r\nconst CfRuleExtXform = require('./cf-rule-ext-xform');\r\nconst ConditionalFormattingExtXform = require('./conditional-formatting-ext-xform');\r\n\r\nclass ConditionalFormattingsExtXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'x14:conditionalFormatting': (this.cfXform = new ConditionalFormattingExtXform()),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'x14:conditionalFormattings';\r\n  }\r\n\r\n  hasContent(model) {\r\n    if (model.hasExtContent === undefined) {\r\n      model.hasExtContent = model.some(cf => cf.rules.some(CfRuleExtXform.isExt));\r\n    }\r\n    return model.hasExtContent;\r\n  }\r\n\r\n  prepare(model, options) {\r\n    model.forEach(cf => {\r\n      this.cfXform.prepare(cf, options);\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (this.hasContent(model)) {\r\n      xmlStream.openNode(this.tag);\r\n      model.forEach(cf => this.cfXform.render(xmlStream, cf));\r\n      xmlStream.closeNode();\r\n    }\r\n  }\r\n\r\n  createNewModel() {\r\n    return [];\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    // model is array of conditional formatting objects\r\n    this.model.push(parser.model);\r\n  }\r\n}\r\n\r\nmodule.exports = ConditionalFormattingsExtXform;\r\n"]},"metadata":{},"sourceType":"script"}