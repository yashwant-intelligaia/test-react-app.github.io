{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../../base-xform');\n\nvar CompositeXform = require('../../composite-xform');\n\nvar CfvoExtXform = require('./cfvo-ext-xform');\n\nvar CfIconExtXform = require('./cf-icon-ext-xform');\n\nvar IconSetExtXform = /*#__PURE__*/function (_CompositeXform) {\n  _inherits(IconSetExtXform, _CompositeXform);\n\n  var _super = _createSuper(IconSetExtXform);\n\n  function IconSetExtXform() {\n    var _this;\n\n    _classCallCheck(this, IconSetExtXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'x14:cfvo': _this.cfvoXform = new CfvoExtXform(),\n      'x14:cfIcon': _this.cfIconXform = new CfIconExtXform()\n    };\n    return _this;\n  }\n\n  _createClass(IconSetExtXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this2 = this;\n\n      xmlStream.openNode(this.tag, {\n        iconSet: BaseXform.toStringAttribute(model.iconSet),\n        reverse: BaseXform.toBoolAttribute(model.reverse, false),\n        showValue: BaseXform.toBoolAttribute(model.showValue, true),\n        custom: BaseXform.toBoolAttribute(model.icons, false)\n      });\n      model.cfvo.forEach(function (cfvo) {\n        _this2.cfvoXform.render(xmlStream, cfvo);\n      });\n\n      if (model.icons) {\n        model.icons.forEach(function (icon, i) {\n          icon.iconId = i;\n\n          _this2.cfIconXform.render(xmlStream, icon);\n        });\n      }\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"createNewModel\",\n    value: function createNewModel(_ref) {\n      var attributes = _ref.attributes;\n      return {\n        cfvo: [],\n        iconSet: BaseXform.toStringValue(attributes.iconSet, '3TrafficLights'),\n        reverse: BaseXform.toBoolValue(attributes.reverse, false),\n        showValue: BaseXform.toBoolValue(attributes.showValue, true)\n      };\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      var _name$split = name.split(':'),\n          _name$split2 = _slicedToArray(_name$split, 2),\n          prop = _name$split2[1];\n\n      switch (prop) {\n        case 'cfvo':\n          this.model.cfvo.push(parser.model);\n          break;\n\n        case 'cfIcon':\n          if (!this.model.icons) {\n            this.model.icons = [];\n          }\n\n          this.model.icons.push(parser.model);\n          break;\n\n        default:\n          this.model[prop] = parser.model;\n          break;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'x14:iconSet';\n    }\n  }]);\n\n  return IconSetExtXform;\n}(CompositeXform);\n\nmodule.exports = IconSetExtXform;","map":{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/icon-set-ext-xform.js"],"names":["BaseXform","require","CompositeXform","CfvoExtXform","CfIconExtXform","IconSetExtXform","xmlStream","model","iconSet","reverse","showValue","custom","icon","attributes","cfvo","name","parser","prop","module"],"mappings":"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","sourcesContent":["const BaseXform = require('../../base-xform');\r\nconst CompositeXform = require('../../composite-xform');\r\n\r\nconst CfvoExtXform = require('./cfvo-ext-xform');\r\nconst CfIconExtXform = require('./cf-icon-ext-xform');\r\n\r\nclass IconSetExtXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'x14:cfvo': (this.cfvoXform = new CfvoExtXform()),\r\n      'x14:cfIcon': (this.cfIconXform = new CfIconExtXform()),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'x14:iconSet';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      iconSet: BaseXform.toStringAttribute(model.iconSet),\r\n      reverse: BaseXform.toBoolAttribute(model.reverse, false),\r\n      showValue: BaseXform.toBoolAttribute(model.showValue, true),\r\n      custom: BaseXform.toBoolAttribute(model.icons, false),\r\n    });\r\n\r\n    model.cfvo.forEach(cfvo => {\r\n      this.cfvoXform.render(xmlStream, cfvo);\r\n    });\r\n\r\n    if (model.icons) {\r\n      model.icons.forEach((icon, i) => {\r\n        icon.iconId = i;\r\n        this.cfIconXform.render(xmlStream, icon);\r\n      });\r\n    }\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel({attributes}) {\r\n    return {\r\n      cfvo: [],\r\n      iconSet: BaseXform.toStringValue(attributes.iconSet, '3TrafficLights'),\r\n      reverse: BaseXform.toBoolValue(attributes.reverse, false),\r\n      showValue: BaseXform.toBoolValue(attributes.showValue, true),\r\n    };\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    const [, prop] = name.split(':');\r\n    switch (prop) {\r\n      case 'cfvo':\r\n        this.model.cfvo.push(parser.model);\r\n        break;\r\n\r\n      case 'cfIcon':\r\n        if (!this.model.icons) {\r\n          this.model.icons = [];\r\n        }\r\n        this.model.icons.push(parser.model);\r\n        break;\r\n\r\n      default:\r\n        this.model[prop] = parser.model;\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = IconSetExtXform;\r\n"]},"metadata":{},"sourceType":"script"}