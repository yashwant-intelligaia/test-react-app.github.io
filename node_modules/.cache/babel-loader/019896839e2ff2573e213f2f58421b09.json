{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar ColXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(ColXform, _BaseXform);\n\n  var _super = _createSuper(ColXform);\n\n  function ColXform() {\n    _classCallCheck(this, ColXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ColXform, [{\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      var styleId = options.styles.addStyleModel(model.style || {});\n\n      if (styleId) {\n        model.styleId = styleId;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode('col');\n      xmlStream.addAttribute('min', model.min);\n      xmlStream.addAttribute('max', model.max);\n\n      if (model.width) {\n        xmlStream.addAttribute('width', model.width);\n      }\n\n      if (model.styleId) {\n        xmlStream.addAttribute('style', model.styleId);\n      }\n\n      if (model.hidden) {\n        xmlStream.addAttribute('hidden', '1');\n      }\n\n      if (model.bestFit) {\n        xmlStream.addAttribute('bestFit', '1');\n      }\n\n      if (model.outlineLevel) {\n        xmlStream.addAttribute('outlineLevel', model.outlineLevel);\n      }\n\n      if (model.collapsed) {\n        xmlStream.addAttribute('collapsed', '1');\n      }\n\n      xmlStream.addAttribute('customWidth', '1');\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (node.name === 'col') {\n        var model = this.model = {\n          min: parseInt(node.attributes.min || '0', 10),\n          max: parseInt(node.attributes.max || '0', 10),\n          width: node.attributes.width === undefined ? undefined : parseFloat(node.attributes.width || '0')\n        };\n\n        if (node.attributes.style) {\n          model.styleId = parseInt(node.attributes.style, 10);\n        }\n\n        if (node.attributes.hidden === true || node.attributes.hidden === 'true' || node.attributes.hidden === 1 || node.attributes.hidden === '1') {\n          model.hidden = true;\n        }\n\n        if (node.attributes.bestFit) {\n          model.bestFit = true;\n        }\n\n        if (node.attributes.outlineLevel) {\n          model.outlineLevel = parseInt(node.attributes.outlineLevel, 10);\n        }\n\n        if (node.attributes.collapsed) {\n          model.collapsed = true;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model, options) {\n      // reconcile column styles\n      if (model.styleId) {\n        model.style = options.styles.getStyleModel(model.styleId);\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'col';\n    }\n  }]);\n\n  return ColXform;\n}(BaseXform);\n\nmodule.exports = ColXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/col-xform.js"],"names":["BaseXform","require","ColXform","model","options","styleId","xmlStream","node","min","parseInt","max","width","parseFloat","module"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nclass ColXform extends BaseXform {\r\n  get tag() {\r\n    return 'col';\r\n  }\r\n\r\n  prepare(model, options) {\r\n    const styleId = options.styles.addStyleModel(model.style || {});\r\n    if (styleId) {\r\n      model.styleId = styleId;\r\n    }\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('col');\r\n    xmlStream.addAttribute('min', model.min);\r\n    xmlStream.addAttribute('max', model.max);\r\n    if (model.width) {\r\n      xmlStream.addAttribute('width', model.width);\r\n    }\r\n    if (model.styleId) {\r\n      xmlStream.addAttribute('style', model.styleId);\r\n    }\r\n    if (model.hidden) {\r\n      xmlStream.addAttribute('hidden', '1');\r\n    }\r\n    if (model.bestFit) {\r\n      xmlStream.addAttribute('bestFit', '1');\r\n    }\r\n    if (model.outlineLevel) {\r\n      xmlStream.addAttribute('outlineLevel', model.outlineLevel);\r\n    }\r\n    if (model.collapsed) {\r\n      xmlStream.addAttribute('collapsed', '1');\r\n    }\r\n    xmlStream.addAttribute('customWidth', '1');\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (node.name === 'col') {\r\n      const model = (this.model = {\r\n        min: parseInt(node.attributes.min || '0', 10),\r\n        max: parseInt(node.attributes.max || '0', 10),\r\n        width:\r\n          node.attributes.width === undefined\r\n            ? undefined\r\n            : parseFloat(node.attributes.width || '0'),\r\n      });\r\n      if (node.attributes.style) {\r\n        model.styleId = parseInt(node.attributes.style, 10);\r\n      }\r\n      if (\r\n        node.attributes.hidden === true ||\r\n        node.attributes.hidden === 'true' ||\r\n        node.attributes.hidden === 1 ||\r\n        node.attributes.hidden === '1'\r\n      ) {\r\n        model.hidden = true;\r\n      }\r\n      if (node.attributes.bestFit) {\r\n        model.bestFit = true;\r\n      }\r\n      if (node.attributes.outlineLevel) {\r\n        model.outlineLevel = parseInt(node.attributes.outlineLevel, 10);\r\n      }\r\n      if (node.attributes.collapsed) {\r\n        model.collapsed = true;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    // reconcile column styles\r\n    if (model.styleId) {\r\n      model.style = options.styles.getStyleModel(model.styleId);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = ColXform;\r\n"]},"metadata":{},"sourceType":"script"}