{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar CompositeXform = require('../../composite-xform');\n\nvar FExtXform = require('./f-ext-xform');\n\nvar CfvoExtXform = /*#__PURE__*/function (_CompositeXform) {\n  _inherits(CfvoExtXform, _CompositeXform);\n\n  var _super = _createSuper(CfvoExtXform);\n\n  function CfvoExtXform() {\n    var _this;\n\n    _classCallCheck(this, CfvoExtXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'xm:f': _this.fExtXform = new FExtXform()\n    };\n    return _this;\n  }\n\n  _createClass(CfvoExtXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode(this.tag, {\n        type: model.type\n      });\n\n      if (model.value !== undefined) {\n        this.fExtXform.render(xmlStream, model.value);\n      }\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"createNewModel\",\n    value: function createNewModel(node) {\n      return {\n        type: node.attributes.type\n      };\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      switch (name) {\n        case 'xm:f':\n          this.model.value = parser.model ? parseFloat(parser.model) : 0;\n          break;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'x14:cfvo';\n    }\n  }]);\n\n  return CfvoExtXform;\n}(CompositeXform);\n\nmodule.exports = CfvoExtXform;","map":{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/cfvo-ext-xform.js"],"names":["CompositeXform","require","FExtXform","CfvoExtXform","xmlStream","model","type","node","name","parser","parseFloat","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,cAAc,GAAGC,OAAO,CAA9B,uBAA8B,CAA9B;;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAAzB,eAAyB,CAAzB;;IAEME,Y;;;;;AACJ,WAAA,YAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AACZ,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,GAAA,GAAW;AACT,cAAS,KAAA,CAAA,SAAA,GAAiB,IAAA,SAAA;AADjB,KAAX;AAHY,WAAA,KAAA;AAMb;;;;2BAMMC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA,EAA6B;AAC3BE,QAAAA,IAAI,EAAED,KAAK,CAACC;AADe,OAA7BF;;AAGA,UAAIC,KAAK,CAALA,KAAAA,KAAJ,SAAA,EAA+B;AAC7B,aAAA,SAAA,CAAA,MAAA,CAAA,SAAA,EAAiCA,KAAK,CAAtC,KAAA;AACD;;AACDD,MAAAA,SAAS,CAATA,SAAAA;AACD;;;mCAEcG,I,EAAM;AACnB,aAAO;AACLD,QAAAA,IAAI,EAAEC,IAAI,CAAJA,UAAAA,CAAgBD;AADjB,OAAP;AAGD;;;kCAEaE,I,EAAMC,M,EAAQ;AAC1B,cAAA,IAAA;AACE,aAAA,MAAA;AACE,eAAA,KAAA,CAAA,KAAA,GAAmBA,MAAM,CAANA,KAAAA,GAAeC,UAAU,CAACD,MAAM,CAAhCA,KAAyB,CAAzBA,GAAnB,CAAA;AACA;AAHJ;AAKD;;;wBA1BS;AACR,aAAA,UAAA;AACD;;;;EAXwBT,c;;AAsC3BW,MAAM,CAANA,OAAAA,GAAAA,YAAAA","sourcesContent":["const CompositeXform = require('../../composite-xform');\r\n\r\nconst FExtXform = require('./f-ext-xform');\r\n\r\nclass CfvoExtXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'xm:f': (this.fExtXform = new FExtXform()),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'x14:cfvo';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      type: model.type,\r\n    });\r\n    if (model.value !== undefined) {\r\n      this.fExtXform.render(xmlStream, model.value);\r\n    }\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel(node) {\r\n    return {\r\n      type: node.attributes.type,\r\n    };\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    switch (name) {\r\n      case 'xm:f':\r\n        this.model.value = parser.model ? parseFloat(parser.model) : 0;\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = CfvoExtXform;\r\n"]},"metadata":{},"sourceType":"script"}