{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform'); // used for rendering the [Content_Types].xml file\n// not used for parsing\n\n\nvar ContentTypesXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(ContentTypesXform, _BaseXform);\n\n  var _super = _createSuper(ContentTypesXform);\n\n  function ContentTypesXform() {\n    _classCallCheck(this, ContentTypesXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ContentTypesXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n      xmlStream.openNode('Types', ContentTypesXform.PROPERTY_ATTRIBUTES);\n      var mediaHash = {};\n      (model.media || []).forEach(function (medium) {\n        if (medium.type === 'image') {\n          var imageType = medium.extension;\n\n          if (!mediaHash[imageType]) {\n            mediaHash[imageType] = true;\n            xmlStream.leafNode('Default', {\n              Extension: imageType,\n              ContentType: \"image/\".concat(imageType)\n            });\n          }\n        }\n      });\n      xmlStream.leafNode('Default', {\n        Extension: 'rels',\n        ContentType: 'application/vnd.openxmlformats-package.relationships+xml'\n      });\n      xmlStream.leafNode('Default', {\n        Extension: 'xml',\n        ContentType: 'application/xml'\n      });\n      xmlStream.leafNode('Override', {\n        PartName: '/xl/workbook.xml',\n        ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\n      });\n      model.worksheets.forEach(function (worksheet) {\n        var name = \"/xl/worksheets/sheet\".concat(worksheet.id, \".xml\");\n        xmlStream.leafNode('Override', {\n          PartName: name,\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\n        });\n      });\n      xmlStream.leafNode('Override', {\n        PartName: '/xl/theme/theme1.xml',\n        ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml'\n      });\n      xmlStream.leafNode('Override', {\n        PartName: '/xl/styles.xml',\n        ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\n      });\n      var hasSharedStrings = model.sharedStrings && model.sharedStrings.count;\n\n      if (hasSharedStrings) {\n        xmlStream.leafNode('Override', {\n          PartName: '/xl/sharedStrings.xml',\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\n        });\n      }\n\n      if (model.tables) {\n        model.tables.forEach(function (table) {\n          xmlStream.leafNode('Override', {\n            PartName: \"/xl/tables/\".concat(table.target),\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml'\n          });\n        });\n      }\n\n      if (model.drawings) {\n        model.drawings.forEach(function (drawing) {\n          xmlStream.leafNode('Override', {\n            PartName: \"/xl/drawings/\".concat(drawing.name, \".xml\"),\n            ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml'\n          });\n        });\n      }\n\n      if (model.commentRefs) {\n        xmlStream.leafNode('Default', {\n          Extension: 'vml',\n          ContentType: 'application/vnd.openxmlformats-officedocument.vmlDrawing'\n        });\n        model.commentRefs.forEach(function (_ref) {\n          var commentName = _ref.commentName;\n          xmlStream.leafNode('Override', {\n            PartName: \"/xl/\".concat(commentName, \".xml\"),\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml'\n          });\n        });\n      }\n\n      xmlStream.leafNode('Override', {\n        PartName: '/docProps/core.xml',\n        ContentType: 'application/vnd.openxmlformats-package.core-properties+xml'\n      });\n      xmlStream.leafNode('Override', {\n        PartName: '/docProps/app.xml',\n        ContentType: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\n      });\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen() {\n      return false;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }]);\n\n  return ContentTypesXform;\n}(BaseXform);\n\nContentTypesXform.PROPERTY_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types'\n};\nmodule.exports = ContentTypesXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/core/content-types-xform.js"],"names":["XmlStream","require","BaseXform","ContentTypesXform","xmlStream","model","mediaHash","medium","imageType","Extension","ContentType","PartName","name","worksheet","hasSharedStrings","table","drawing","commentName","xmlns","module"],"mappings":"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","sourcesContent":["const XmlStream = require('../../../utils/xml-stream');\r\n\r\nconst BaseXform = require('../base-xform');\r\n\r\n// used for rendering the [Content_Types].xml file\r\n// not used for parsing\r\nclass ContentTypesXform extends BaseXform {\r\n  render(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('Types', ContentTypesXform.PROPERTY_ATTRIBUTES);\r\n\r\n    const mediaHash = {};\r\n    (model.media || []).forEach(medium => {\r\n      if (medium.type === 'image') {\r\n        const imageType = medium.extension;\r\n        if (!mediaHash[imageType]) {\r\n          mediaHash[imageType] = true;\r\n          xmlStream.leafNode('Default', {Extension: imageType, ContentType: `image/${imageType}`});\r\n        }\r\n      }\r\n    });\r\n\r\n    xmlStream.leafNode('Default', {\r\n      Extension: 'rels',\r\n      ContentType: 'application/vnd.openxmlformats-package.relationships+xml',\r\n    });\r\n    xmlStream.leafNode('Default', {Extension: 'xml', ContentType: 'application/xml'});\r\n\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/xl/workbook.xml',\r\n      ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\r\n    });\r\n\r\n    model.worksheets.forEach(worksheet => {\r\n      const name = `/xl/worksheets/sheet${worksheet.id}.xml`;\r\n      xmlStream.leafNode('Override', {\r\n        PartName: name,\r\n        ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\r\n      });\r\n    });\r\n\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/xl/theme/theme1.xml',\r\n      ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml',\r\n    });\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/xl/styles.xml',\r\n      ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\r\n    });\r\n\r\n    const hasSharedStrings = model.sharedStrings && model.sharedStrings.count;\r\n    if (hasSharedStrings) {\r\n      xmlStream.leafNode('Override', {\r\n        PartName: '/xl/sharedStrings.xml',\r\n        ContentType:\r\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\r\n      });\r\n    }\r\n\r\n    if (model.tables) {\r\n      model.tables.forEach(table => {\r\n        xmlStream.leafNode('Override', {\r\n          PartName: `/xl/tables/${table.target}`,\r\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml',\r\n        });\r\n      });\r\n    }\r\n\r\n    if (model.drawings) {\r\n      model.drawings.forEach(drawing => {\r\n        xmlStream.leafNode('Override', {\r\n          PartName: `/xl/drawings/${drawing.name}.xml`,\r\n          ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',\r\n        });\r\n      });\r\n    }\r\n\r\n    if (model.commentRefs) {\r\n      xmlStream.leafNode('Default', {\r\n        Extension: 'vml',\r\n        ContentType: 'application/vnd.openxmlformats-officedocument.vmlDrawing',\r\n      });\r\n\r\n      model.commentRefs.forEach(({commentName}) => {\r\n        xmlStream.leafNode('Override', {\r\n          PartName: `/xl/${commentName}.xml`,\r\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml',\r\n        });\r\n      });\r\n    }\r\n\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/docProps/core.xml',\r\n      ContentType: 'application/vnd.openxmlformats-package.core-properties+xml',\r\n    });\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/docProps/app.xml',\r\n      ContentType: 'application/vnd.openxmlformats-officedocument.extended-properties+xml',\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen() {\r\n    return false;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nContentTypesXform.PROPERTY_ATTRIBUTES = {\r\n  xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types',\r\n};\r\n\r\nmodule.exports = ContentTypesXform;\r\n"]},"metadata":{},"sourceType":"script"}