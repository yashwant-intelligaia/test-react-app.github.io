{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar colCache = require('../../../utils/col-cache');\n\nvar BaseXform = require('../base-xform');\n\nvar AutoFilterXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(AutoFilterXform, _BaseXform);\n\n  var _super = _createSuper(AutoFilterXform);\n\n  function AutoFilterXform() {\n    _classCallCheck(this, AutoFilterXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AutoFilterXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      if (model) {\n        if (typeof model === 'string') {\n          // assume range\n          xmlStream.leafNode('autoFilter', {\n            ref: model\n          });\n        } else {\n          var getAddress = function getAddress(addr) {\n            if (typeof addr === 'string') {\n              return addr;\n            }\n\n            return colCache.getAddress(addr.row, addr.column).address;\n          };\n\n          var firstAddress = getAddress(model.from);\n          var secondAddress = getAddress(model.to);\n\n          if (firstAddress && secondAddress) {\n            xmlStream.leafNode('autoFilter', {\n              ref: \"\".concat(firstAddress, \":\").concat(secondAddress)\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (node.name === 'autoFilter') {\n        this.model = node.attributes.ref;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'autoFilter';\n    }\n  }]);\n\n  return AutoFilterXform;\n}(BaseXform);\n\nmodule.exports = AutoFilterXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/auto-filter-xform.js"],"names":["colCache","require","BaseXform","AutoFilterXform","xmlStream","model","ref","getAddress","addr","firstAddress","secondAddress","node","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAxB,0BAAwB,CAAxB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAzB,eAAyB,CAAzB;;IAEME,e;;;;;;;;;;;;;2BAKGC,S,EAAWC,K,EAAO;AACvB,UAAA,KAAA,EAAW;AACT,YAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B;AACAD,UAAAA,SAAS,CAATA,QAAAA,CAAAA,YAAAA,EAAiC;AAACE,YAAAA,GAAG,EAAED;AAAN,WAAjCD;AAFF,SAAA,MAGO;AACL,cAAMG,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAAe;AAChC,gBAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5B,qBAAA,IAAA;AACD;;AACD,mBAAOP,QAAQ,CAARA,UAAAA,CAAoBQ,IAAI,CAAxBR,GAAAA,EAA8BQ,IAAI,CAAlCR,MAAAA,EAAP,OAAA;AAJF,WAAA;;AAOA,cAAMS,YAAY,GAAGF,UAAU,CAACF,KAAK,CAArC,IAA+B,CAA/B;AACA,cAAMK,aAAa,GAAGH,UAAU,CAACF,KAAK,CAAtC,EAAgC,CAAhC;;AACA,cAAII,YAAY,IAAhB,aAAA,EAAmC;AACjCL,YAAAA,SAAS,CAATA,QAAAA,CAAAA,YAAAA,EAAiC;AAACE,cAAAA,GAAG,EAAA,GAAA,MAAA,CAAA,YAAA,EAAA,GAAA,EAAA,MAAA,CAAA,aAAA;AAAJ,aAAjCF;AACD;AACF;AACF;AACF;;;8BAESO,I,EAAM;AACd,UAAIA,IAAI,CAAJA,IAAAA,KAAJ,YAAA,EAAgC;AAC9B,aAAA,KAAA,GAAaA,IAAI,CAAJA,UAAAA,CAAb,GAAA;AACD;AACF;;;wBA9BS;AACR,aAAA,YAAA;AACD;;;;EAH2BT,S;;AAkC9BU,MAAM,CAANA,OAAAA,GAAAA,eAAAA","sourcesContent":["const colCache = require('../../../utils/col-cache');\r\nconst BaseXform = require('../base-xform');\r\n\r\nclass AutoFilterXform extends BaseXform {\r\n  get tag() {\r\n    return 'autoFilter';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (model) {\r\n      if (typeof model === 'string') {\r\n        // assume range\r\n        xmlStream.leafNode('autoFilter', {ref: model});\r\n      } else {\r\n        const getAddress = function(addr) {\r\n          if (typeof addr === 'string') {\r\n            return addr;\r\n          }\r\n          return colCache.getAddress(addr.row, addr.column).address;\r\n        };\r\n\r\n        const firstAddress = getAddress(model.from);\r\n        const secondAddress = getAddress(model.to);\r\n        if (firstAddress && secondAddress) {\r\n          xmlStream.leafNode('autoFilter', {ref: `${firstAddress}:${secondAddress}`});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (node.name === 'autoFilter') {\r\n      this.model = node.attributes.ref;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = AutoFilterXform;\r\n"]},"metadata":{},"sourceType":"script"}