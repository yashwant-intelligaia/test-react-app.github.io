{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* eslint-disable max-classes-per-file */\n\n\nvar Enums = require('../../../doc/enums');\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform');\n\nvar StaticXform = require('../static-xform');\n\nvar ListXform = require('../list-xform');\n\nvar FontXform = require('./font-xform');\n\nvar FillXform = require('./fill-xform');\n\nvar BorderXform = require('./border-xform');\n\nvar NumFmtXform = require('./numfmt-xform');\n\nvar StyleXform = require('./style-xform');\n\nvar DxfXform = require('./dxf-xform'); // custom numfmt ids start here\n\n\nvar NUMFMT_BASE = 164; // =============================================================================\n// StylesXform is used to generate and parse the styles.xml file\n// it manages the collections of fonts, number formats, alignments, etc\n\nvar StylesXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(StylesXform, _BaseXform);\n\n  var _super = _createSuper(StylesXform);\n\n  function StylesXform(initialise) {\n    var _this;\n\n    _classCallCheck(this, StylesXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      numFmts: new ListXform({\n        tag: 'numFmts',\n        count: true,\n        childXform: new NumFmtXform()\n      }),\n      fonts: new ListXform({\n        tag: 'fonts',\n        count: true,\n        childXform: new FontXform(),\n        $: {\n          'x14ac:knownFonts': 1\n        }\n      }),\n      fills: new ListXform({\n        tag: 'fills',\n        count: true,\n        childXform: new FillXform()\n      }),\n      borders: new ListXform({\n        tag: 'borders',\n        count: true,\n        childXform: new BorderXform()\n      }),\n      cellStyleXfs: new ListXform({\n        tag: 'cellStyleXfs',\n        count: true,\n        childXform: new StyleXform()\n      }),\n      cellXfs: new ListXform({\n        tag: 'cellXfs',\n        count: true,\n        childXform: new StyleXform({\n          xfId: true\n        })\n      }),\n      dxfs: new ListXform({\n        tag: 'dxfs',\n        always: true,\n        count: true,\n        childXform: new DxfXform()\n      }),\n      // for style manager\n      numFmt: new NumFmtXform(),\n      font: new FontXform(),\n      fill: new FillXform(),\n      border: new BorderXform(),\n      style: new StyleXform({\n        xfId: true\n      }),\n      cellStyles: StylesXform.STATIC_XFORMS.cellStyles,\n      tableStyles: StylesXform.STATIC_XFORMS.tableStyles,\n      extLst: StylesXform.STATIC_XFORMS.extLst\n    };\n\n    if (initialise) {\n      // StylesXform also acts as style manager and is used to build up styles-model during worksheet processing\n      _this.init();\n    }\n\n    return _this;\n  }\n\n  _createClass(StylesXform, [{\n    key: \"initIndex\",\n    value: function initIndex() {\n      this.index = {\n        style: {},\n        numFmt: {},\n        numFmtNextId: 164,\n        // start custom format ids here\n        font: {},\n        border: {},\n        fill: {}\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      // Prepare for Style Manager role\n      this.model = {\n        styles: [],\n        numFmts: [],\n        fonts: [],\n        borders: [],\n        fills: [],\n        dxfs: []\n      };\n      this.initIndex(); // default (zero) border\n\n      this._addBorder({}); // add default (all zero) style\n\n\n      this._addStyle({\n        numFmtId: 0,\n        fontId: 0,\n        fillId: 0,\n        borderId: 0,\n        xfId: 0\n      }); // add default fills\n\n\n      this._addFill({\n        type: 'pattern',\n        pattern: 'none'\n      });\n\n      this._addFill({\n        type: 'pattern',\n        pattern: 'gray125'\n      });\n\n      this.weakMap = new WeakMap();\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      model = model || this.model; //\n      //   <fonts count=\"2\" x14ac:knownFonts=\"1\">\n\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n      xmlStream.openNode('styleSheet', StylesXform.STYLESHEET_ATTRIBUTES);\n\n      if (this.index) {\n        // model has been built by style manager role (contains xml)\n        if (model.numFmts && model.numFmts.length) {\n          xmlStream.openNode('numFmts', {\n            count: model.numFmts.length\n          });\n          model.numFmts.forEach(function (numFmtXml) {\n            xmlStream.writeXml(numFmtXml);\n          });\n          xmlStream.closeNode();\n        }\n\n        if (!model.fonts.length) {\n          // default (zero) font\n          this._addFont({\n            size: 11,\n            color: {\n              theme: 1\n            },\n            name: 'Calibri',\n            family: 2,\n            scheme: 'minor'\n          });\n        }\n\n        xmlStream.openNode('fonts', {\n          count: model.fonts.length,\n          'x14ac:knownFonts': 1\n        });\n        model.fonts.forEach(function (fontXml) {\n          xmlStream.writeXml(fontXml);\n        });\n        xmlStream.closeNode();\n        xmlStream.openNode('fills', {\n          count: model.fills.length\n        });\n        model.fills.forEach(function (fillXml) {\n          xmlStream.writeXml(fillXml);\n        });\n        xmlStream.closeNode();\n        xmlStream.openNode('borders', {\n          count: model.borders.length\n        });\n        model.borders.forEach(function (borderXml) {\n          xmlStream.writeXml(borderXml);\n        });\n        xmlStream.closeNode();\n        this.map.cellStyleXfs.render(xmlStream, [{\n          numFmtId: 0,\n          fontId: 0,\n          fillId: 0,\n          borderId: 0,\n          xfId: 0\n        }]);\n        xmlStream.openNode('cellXfs', {\n          count: model.styles.length\n        });\n        model.styles.forEach(function (styleXml) {\n          xmlStream.writeXml(styleXml);\n        });\n        xmlStream.closeNode();\n      } else {\n        // model is plain JSON and needs to be xformed\n        this.map.numFmts.render(xmlStream, model.numFmts);\n        this.map.fonts.render(xmlStream, model.fonts);\n        this.map.fills.render(xmlStream, model.fills);\n        this.map.borders.render(xmlStream, model.borders);\n        this.map.cellStyleXfs.render(xmlStream, [{\n          numFmtId: 0,\n          fontId: 0,\n          fillId: 0,\n          borderId: 0,\n          xfId: 0\n        }]);\n        this.map.cellXfs.render(xmlStream, model.styles);\n      }\n\n      StylesXform.STATIC_XFORMS.cellStyles.render(xmlStream);\n      this.map.dxfs.render(xmlStream, model.dxfs);\n      StylesXform.STATIC_XFORMS.tableStyles.render(xmlStream);\n      StylesXform.STATIC_XFORMS.extLst.render(xmlStream);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case 'styleSheet':\n          this.initIndex();\n          return true;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n          }\n\n          return true;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      var _this2 = this;\n\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case 'styleSheet':\n          {\n            this.model = {};\n\n            var add = function add(propName, xform) {\n              if (xform.model && xform.model.length) {\n                _this2.model[propName] = xform.model;\n              }\n            };\n\n            add('numFmts', this.map.numFmts);\n            add('fonts', this.map.fonts);\n            add('fills', this.map.fills);\n            add('borders', this.map.borders);\n            add('styles', this.map.cellXfs);\n            add('dxfs', this.map.dxfs); // index numFmts\n\n            this.index = {\n              model: [],\n              numFmt: []\n            };\n\n            if (this.model.numFmts) {\n              var numFmtIndex = this.index.numFmt;\n              this.model.numFmts.forEach(function (numFmt) {\n                numFmtIndex[numFmt.id] = numFmt.formatCode;\n              });\n            }\n\n            return false;\n          }\n\n        default:\n          // not quite sure how we get here!\n          return true;\n      }\n    } // add a cell's style model to the collection\n    // each style property is processed and cross-referenced, etc.\n    // the styleId is returned. Note: cellType is used when numFmt not defined\n\n  }, {\n    key: \"addStyleModel\",\n    value: function addStyleModel(model, cellType) {\n      if (!model) {\n        return 0;\n      } // if we have no default font, add it here now\n\n\n      if (!this.model.fonts.length) {\n        // default (zero) font\n        this._addFont({\n          size: 11,\n          color: {\n            theme: 1\n          },\n          name: 'Calibri',\n          family: 2,\n          scheme: 'minor'\n        });\n      } // if we have seen this style object before, assume it has the same styleId\n\n\n      if (this.weakMap && this.weakMap.has(model)) {\n        return this.weakMap.get(model);\n      }\n\n      var style = {};\n      cellType = cellType || Enums.ValueType.Number;\n\n      if (model.numFmt) {\n        style.numFmtId = this._addNumFmtStr(model.numFmt);\n      } else {\n        switch (cellType) {\n          case Enums.ValueType.Number:\n            style.numFmtId = this._addNumFmtStr('General');\n            break;\n\n          case Enums.ValueType.Date:\n            style.numFmtId = this._addNumFmtStr('mm-dd-yy');\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (model.font) {\n        style.fontId = this._addFont(model.font);\n      }\n\n      if (model.border) {\n        style.borderId = this._addBorder(model.border);\n      }\n\n      if (model.fill) {\n        style.fillId = this._addFill(model.fill);\n      }\n\n      if (model.alignment) {\n        style.alignment = model.alignment;\n      }\n\n      if (model.protection) {\n        style.protection = model.protection;\n      }\n\n      var styleId = this._addStyle(style);\n\n      if (this.weakMap) {\n        this.weakMap.set(model, styleId);\n      }\n\n      return styleId;\n    } // given a styleId (i.e. s=\"n\"), get the cell's style model\n    // objects are shared where possible.\n\n  }, {\n    key: \"getStyleModel\",\n    value: function getStyleModel(id) {\n      // if the style doesn't exist return null\n      var style = this.model.styles[id];\n      if (!style) return null; // have we built this model before?\n\n      var model = this.index.model[id];\n      if (model) return model; // build a new model\n\n      model = this.index.model[id] = {}; // -------------------------------------------------------\n      // number format\n\n      if (style.numFmtId) {\n        var numFmt = this.index.numFmt[style.numFmtId] || NumFmtXform.getDefaultFmtCode(style.numFmtId);\n\n        if (numFmt) {\n          model.numFmt = numFmt;\n        }\n      }\n\n      function addStyle(name, group, styleId) {\n        if (styleId || styleId === 0) {\n          var part = group[styleId];\n\n          if (part) {\n            model[name] = part;\n          }\n        }\n      }\n\n      addStyle('font', this.model.fonts, style.fontId);\n      addStyle('border', this.model.borders, style.borderId);\n      addStyle('fill', this.model.fills, style.fillId); // -------------------------------------------------------\n      // alignment\n\n      if (style.alignment) {\n        model.alignment = style.alignment;\n      } // -------------------------------------------------------\n      // protection\n\n\n      if (style.protection) {\n        model.protection = style.protection;\n      }\n\n      return model;\n    }\n  }, {\n    key: \"addDxfStyle\",\n    value: function addDxfStyle(style) {\n      this.model.dxfs.push(style);\n      return this.model.dxfs.length - 1;\n    }\n  }, {\n    key: \"getDxfStyle\",\n    value: function getDxfStyle(id) {\n      return this.model.dxfs[id];\n    } // =========================================================================\n    // Private Interface\n\n  }, {\n    key: \"_addStyle\",\n    value: function _addStyle(style) {\n      var xml = this.map.style.toXml(style);\n      var index = this.index.style[xml];\n\n      if (index === undefined) {\n        index = this.index.style[xml] = this.model.styles.length;\n        this.model.styles.push(xml);\n      }\n\n      return index;\n    } // =========================================================================\n    // Number Formats\n\n  }, {\n    key: \"_addNumFmtStr\",\n    value: function _addNumFmtStr(formatCode) {\n      // check if default format\n      var index = NumFmtXform.getDefaultFmtId(formatCode);\n      if (index !== undefined) return index; // check if already in\n\n      index = this.index.numFmt[formatCode];\n      if (index !== undefined) return index;\n      index = this.index.numFmt[formatCode] = NUMFMT_BASE + this.model.numFmts.length;\n      var xml = this.map.numFmt.toXml({\n        id: index,\n        formatCode: formatCode\n      });\n      this.model.numFmts.push(xml);\n      return index;\n    } // =========================================================================\n    // Fonts\n\n  }, {\n    key: \"_addFont\",\n    value: function _addFont(font) {\n      var xml = this.map.font.toXml(font);\n      var index = this.index.font[xml];\n\n      if (index === undefined) {\n        index = this.index.font[xml] = this.model.fonts.length;\n        this.model.fonts.push(xml);\n      }\n\n      return index;\n    } // =========================================================================\n    // Borders\n\n  }, {\n    key: \"_addBorder\",\n    value: function _addBorder(border) {\n      var xml = this.map.border.toXml(border);\n      var index = this.index.border[xml];\n\n      if (index === undefined) {\n        index = this.index.border[xml] = this.model.borders.length;\n        this.model.borders.push(xml);\n      }\n\n      return index;\n    } // =========================================================================\n    // Fills\n\n  }, {\n    key: \"_addFill\",\n    value: function _addFill(fill) {\n      var xml = this.map.fill.toXml(fill);\n      var index = this.index.fill[xml];\n\n      if (index === undefined) {\n        index = this.index.fill[xml] = this.model.fills.length;\n        this.model.fills.push(xml);\n      }\n\n      return index;\n    } // =========================================================================\n\n  }]);\n\n  return StylesXform;\n}(BaseXform);\n\nStylesXform.STYLESHEET_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n  'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n  'mc:Ignorable': 'x14ac x16r2',\n  'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\n  'xmlns:x16r2': 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main'\n};\nStylesXform.STATIC_XFORMS = {\n  cellStyles: new StaticXform({\n    tag: 'cellStyles',\n    $: {\n      count: 1\n    },\n    c: [{\n      tag: 'cellStyle',\n      $: {\n        name: 'Normal',\n        xfId: 0,\n        builtinId: 0\n      }\n    }]\n  }),\n  dxfs: new StaticXform({\n    tag: 'dxfs',\n    $: {\n      count: 0\n    }\n  }),\n  tableStyles: new StaticXform({\n    tag: 'tableStyles',\n    $: {\n      count: 0,\n      defaultTableStyle: 'TableStyleMedium2',\n      defaultPivotStyle: 'PivotStyleLight16'\n    }\n  }),\n  extLst: new StaticXform({\n    tag: 'extLst',\n    c: [{\n      tag: 'ext',\n      $: {\n        uri: '{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}',\n        'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main'\n      },\n      c: [{\n        tag: 'x14:slicerStyles',\n        $: {\n          defaultSlicerStyle: 'SlicerStyleLight1'\n        }\n      }]\n    }, {\n      tag: 'ext',\n      $: {\n        uri: '{9260A510-F301-46a8-8635-F512D64BE5F5}',\n        'xmlns:x15': 'http://schemas.microsoft.com/office/spreadsheetml/2010/11/main'\n      },\n      c: [{\n        tag: 'x15:timelineStyles',\n        $: {\n          defaultTimelineStyle: 'TimeSlicerStyleLight1'\n        }\n      }]\n    }]\n  })\n}; // the stylemanager mock acts like StyleManager except that it always returns 0 or {}\n\nvar StylesXformMock = /*#__PURE__*/function (_StylesXform) {\n  _inherits(StylesXformMock, _StylesXform);\n\n  var _super2 = _createSuper(StylesXformMock);\n\n  function StylesXformMock() {\n    var _this3;\n\n    _classCallCheck(this, StylesXformMock);\n\n    _this3 = _super2.call(this);\n    _this3.model = {\n      styles: [{\n        numFmtId: 0,\n        fontId: 0,\n        fillId: 0,\n        borderId: 0,\n        xfId: 0\n      }],\n      numFmts: [],\n      fonts: [{\n        size: 11,\n        color: {\n          theme: 1\n        },\n        name: 'Calibri',\n        family: 2,\n        scheme: 'minor'\n      }],\n      borders: [{}],\n      fills: [{\n        type: 'pattern',\n        pattern: 'none'\n      }, {\n        type: 'pattern',\n        pattern: 'gray125'\n      }]\n    };\n    return _this3;\n  } // =========================================================================\n  // Style Manager Interface\n  // override normal behaviour - consume and dispose\n\n\n  _createClass(StylesXformMock, [{\n    key: \"parseStream\",\n    value: function parseStream(stream) {\n      stream.autodrain();\n      return Promise.resolve();\n    } // add a cell's style model to the collection\n    // each style property is processed and cross-referenced, etc.\n    // the styleId is returned. Note: cellType is used when numFmt not defined\n\n  }, {\n    key: \"addStyleModel\",\n    value: function addStyleModel(model, cellType) {\n      switch (cellType) {\n        case Enums.ValueType.Date:\n          return this.dateStyleId;\n\n        default:\n          return 0;\n      }\n    }\n  }, {\n    key: \"getStyleModel\",\n    // given a styleId (i.e. s=\"n\"), get the cell's style model\n    // objects are shared where possible.\n    value: function getStyleModel()\n    /* id */\n    {\n      return {};\n    }\n  }, {\n    key: \"dateStyleId\",\n    get: function get() {\n      if (!this._dateStyleId) {\n        var dateStyle = {\n          numFmtId: NumFmtXform.getDefaultFmtId('mm-dd-yy')\n        };\n        this._dateStyleId = this.model.styles.length;\n        this.model.styles.push(dateStyle);\n      }\n\n      return this._dateStyleId;\n    }\n  }]);\n\n  return StylesXformMock;\n}(StylesXform);\n\nStylesXform.Mock = StylesXformMock;\nmodule.exports = StylesXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/styles-xform.js"],"names":["Enums","require","XmlStream","BaseXform","StaticXform","ListXform","FontXform","FillXform","BorderXform","NumFmtXform","StyleXform","DxfXform","NUMFMT_BASE","StylesXform","numFmts","tag","count","childXform","fonts","$","fills","borders","cellStyleXfs","cellXfs","xfId","dxfs","always","numFmt","font","fill","border","style","cellStyles","tableStyles","extLst","numFmtNextId","styles","numFmtId","fontId","fillId","borderId","type","pattern","xmlStream","model","length","size","color","theme","name","family","scheme","node","text","add","xform","numFmtIndex","cellType","styleId","id","part","group","addStyle","xml","index","formatCode","xmlns","c","builtinId","defaultTableStyle","defaultPivotStyle","uri","defaultSlicerStyle","defaultTimelineStyle","StylesXformMock","stream","Promise","dateStyle","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,IAAMA,KAAK,GAAGC,OAAO,CAArB,oBAAqB,CAArB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAzB,2BAAyB,CAAzB;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAzB,eAAyB,CAAzB;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAA3B,iBAA2B,CAA3B;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAzB,eAAyB,CAAzB;;AACA,IAAMK,SAAS,GAAGL,OAAO,CAAzB,cAAyB,CAAzB;;AACA,IAAMM,SAAS,GAAGN,OAAO,CAAzB,cAAyB,CAAzB;;AACA,IAAMO,WAAW,GAAGP,OAAO,CAA3B,gBAA2B,CAA3B;;AACA,IAAMQ,WAAW,GAAGR,OAAO,CAA3B,gBAA2B,CAA3B;;AACA,IAAMS,UAAU,GAAGT,OAAO,CAA1B,eAA0B,CAA1B;;AACA,IAAMU,QAAQ,GAAGV,OAAO,CAAxB,aAAwB,CAAxB,C,CAEA;;;AACA,IAAMW,WAAW,GAAjB,GAAA,C,CAEA;AACA;AACA;;IACMC,W;;;;;AACJ,WAAA,WAAA,CAAA,UAAA,EAAwB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;AACtB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,GAAA,GAAW;AACTC,MAAAA,OAAO,EAAE,IAAA,SAAA,CAAc;AAACC,QAAAA,GAAG,EAAJ,SAAA;AAAiBC,QAAAA,KAAK,EAAtB,IAAA;AAA8BC,QAAAA,UAAU,EAAE,IAAA,WAAA;AAA1C,OAAd,CADA;AAETC,MAAAA,KAAK,EAAE,IAAA,SAAA,CAAc;AACnBH,QAAAA,GAAG,EADgB,OAAA;AAEnBC,QAAAA,KAAK,EAFc,IAAA;AAGnBC,QAAAA,UAAU,EAAE,IAHO,SAGP,EAHO;AAInBE,QAAAA,CAAC,EAAE;AAAC,8BAAoB;AAArB;AAJgB,OAAd,CAFE;AAQTC,MAAAA,KAAK,EAAE,IAAA,SAAA,CAAc;AAACL,QAAAA,GAAG,EAAJ,OAAA;AAAeC,QAAAA,KAAK,EAApB,IAAA;AAA4BC,QAAAA,UAAU,EAAE,IAAA,SAAA;AAAxC,OAAd,CARE;AASTI,MAAAA,OAAO,EAAE,IAAA,SAAA,CAAc;AAACN,QAAAA,GAAG,EAAJ,SAAA;AAAiBC,QAAAA,KAAK,EAAtB,IAAA;AAA8BC,QAAAA,UAAU,EAAE,IAAA,WAAA;AAA1C,OAAd,CATA;AAUTK,MAAAA,YAAY,EAAE,IAAA,SAAA,CAAc;AAACP,QAAAA,GAAG,EAAJ,cAAA;AAAsBC,QAAAA,KAAK,EAA3B,IAAA;AAAmCC,QAAAA,UAAU,EAAE,IAAA,UAAA;AAA/C,OAAd,CAVL;AAWTM,MAAAA,OAAO,EAAE,IAAA,SAAA,CAAc;AACrBR,QAAAA,GAAG,EADkB,SAAA;AAErBC,QAAAA,KAAK,EAFgB,IAAA;AAGrBC,QAAAA,UAAU,EAAE,IAAA,UAAA,CAAe;AAACO,UAAAA,IAAI,EAAE;AAAP,SAAf;AAHS,OAAd,CAXA;AAgBTC,MAAAA,IAAI,EAAE,IAAA,SAAA,CAAc;AAACV,QAAAA,GAAG,EAAJ,MAAA;AAAcW,QAAAA,MAAM,EAApB,IAAA;AAA4BV,QAAAA,KAAK,EAAjC,IAAA;AAAyCC,QAAAA,UAAU,EAAE,IAAA,QAAA;AAArD,OAAd,CAhBG;AAkBT;AACAU,MAAAA,MAAM,EAAE,IAnBC,WAmBD,EAnBC;AAoBTC,MAAAA,IAAI,EAAE,IApBG,SAoBH,EApBG;AAqBTC,MAAAA,IAAI,EAAE,IArBG,SAqBH,EArBG;AAsBTC,MAAAA,MAAM,EAAE,IAtBC,WAsBD,EAtBC;AAuBTC,MAAAA,KAAK,EAAE,IAAA,UAAA,CAAe;AAACP,QAAAA,IAAI,EAAE;AAAP,OAAf,CAvBE;AAyBTQ,MAAAA,UAAU,EAAEnB,WAAW,CAAXA,aAAAA,CAzBH,UAAA;AA0BToB,MAAAA,WAAW,EAAEpB,WAAW,CAAXA,aAAAA,CA1BJ,WAAA;AA2BTqB,MAAAA,MAAM,EAAErB,WAAW,CAAXA,aAAAA,CAA0BqB;AA3BzB,KAAX;;AA8BA,QAAA,UAAA,EAAgB;AACd;AACA,MAAA,KAAA,CAAA,IAAA;AACD;;AApCqB,WAAA,KAAA;AAqCvB;;;;gCAEW;AACV,WAAA,KAAA,GAAa;AACXH,QAAAA,KAAK,EADM,EAAA;AAEXJ,QAAAA,MAAM,EAFK,EAAA;AAGXQ,QAAAA,YAAY,EAHD,GAAA;AAGQ;AACnBP,QAAAA,IAAI,EAJO,EAAA;AAKXE,QAAAA,MAAM,EALK,EAAA;AAMXD,QAAAA,IAAI,EAAE;AANK,OAAb;AAQD;;;2BAEM;AACL;AACA,WAAA,KAAA,GAAa;AACXO,QAAAA,MAAM,EADK,EAAA;AAEXtB,QAAAA,OAAO,EAFI,EAAA;AAGXI,QAAAA,KAAK,EAHM,EAAA;AAIXG,QAAAA,OAAO,EAJI,EAAA;AAKXD,QAAAA,KAAK,EALM,EAAA;AAMXK,QAAAA,IAAI,EAAE;AANK,OAAb;AASA,WAXK,SAWL,GAXK,CAaL;;AACA,WAAA,UAAA,CAdK,EAcL,EAdK,CAgBL;;;AACA,WAAA,SAAA,CAAe;AAACY,QAAAA,QAAQ,EAAT,CAAA;AAAcC,QAAAA,MAAM,EAApB,CAAA;AAAyBC,QAAAA,MAAM,EAA/B,CAAA;AAAoCC,QAAAA,QAAQ,EAA5C,CAAA;AAAiDhB,QAAAA,IAAI,EAAE;AAAvD,OAAf,EAjBK,CAmBL;;;AACA,WAAA,QAAA,CAAc;AAACiB,QAAAA,IAAI,EAAL,SAAA;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAAd;;AACA,WAAA,QAAA,CAAc;AAACD,QAAAA,IAAI,EAAL,SAAA;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAAd;;AAEA,WAAA,OAAA,GAAe,IAAf,OAAe,EAAf;AACD;;;2BAEMC,S,EAAWC,K,EAAO;AACvBA,MAAAA,KAAK,GAAGA,KAAK,IAAI,KADM,KACvBA,CADuB,CAEvB;AACA;;AACAD,MAAAA,SAAS,CAATA,OAAAA,CAAkBzC,SAAS,CAA3ByC,gBAAAA;AAEAA,MAAAA,SAAS,CAATA,QAAAA,CAAAA,YAAAA,EAAiC9B,WAAW,CAA5C8B,qBAAAA;;AAEA,UAAI,KAAJ,KAAA,EAAgB;AACd;AACA,YAAIC,KAAK,CAALA,OAAAA,IAAiBA,KAAK,CAALA,OAAAA,CAArB,MAAA,EAA2C;AACzCD,UAAAA,SAAS,CAATA,QAAAA,CAAAA,SAAAA,EAA8B;AAAC3B,YAAAA,KAAK,EAAE4B,KAAK,CAALA,OAAAA,CAAcC;AAAtB,WAA9BF;AACAC,UAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAsB,UAAA,SAAA,EAAa;AACjCD,YAAAA,SAAS,CAATA,QAAAA,CAAAA,SAAAA;AADFC,WAAAA;AAGAD,UAAAA,SAAS,CAATA,SAAAA;AACD;;AAED,YAAI,CAACC,KAAK,CAALA,KAAAA,CAAL,MAAA,EAAyB;AACvB;AACA,eAAA,QAAA,CAAc;AAACE,YAAAA,IAAI,EAAL,EAAA;AAAWC,YAAAA,KAAK,EAAE;AAACC,cAAAA,KAAK,EAAE;AAAR,aAAlB;AAA8BC,YAAAA,IAAI,EAAlC,SAAA;AAA+CC,YAAAA,MAAM,EAArD,CAAA;AAA0DC,YAAAA,MAAM,EAAE;AAAlE,WAAd;AACD;;AACDR,QAAAA,SAAS,CAATA,QAAAA,CAAAA,OAAAA,EAA4B;AAAC3B,UAAAA,KAAK,EAAE4B,KAAK,CAALA,KAAAA,CAAR,MAAA;AAA4B,8BAAoB;AAAhD,SAA5BD;AACAC,QAAAA,KAAK,CAALA,KAAAA,CAAAA,OAAAA,CAAoB,UAAA,OAAA,EAAW;AAC7BD,UAAAA,SAAS,CAATA,QAAAA,CAAAA,OAAAA;AADFC,SAAAA;AAGAD,QAAAA,SAAS,CAATA,SAAAA;AAEAA,QAAAA,SAAS,CAATA,QAAAA,CAAAA,OAAAA,EAA4B;AAAC3B,UAAAA,KAAK,EAAE4B,KAAK,CAALA,KAAAA,CAAYC;AAApB,SAA5BF;AACAC,QAAAA,KAAK,CAALA,KAAAA,CAAAA,OAAAA,CAAoB,UAAA,OAAA,EAAW;AAC7BD,UAAAA,SAAS,CAATA,QAAAA,CAAAA,OAAAA;AADFC,SAAAA;AAGAD,QAAAA,SAAS,CAATA,SAAAA;AAEAA,QAAAA,SAAS,CAATA,QAAAA,CAAAA,SAAAA,EAA8B;AAAC3B,UAAAA,KAAK,EAAE4B,KAAK,CAALA,OAAAA,CAAcC;AAAtB,SAA9BF;AACAC,QAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAsB,UAAA,SAAA,EAAa;AACjCD,UAAAA,SAAS,CAATA,QAAAA,CAAAA,SAAAA;AADFC,SAAAA;AAGAD,QAAAA,SAAS,CAATA,SAAAA;AAEA,aAAA,GAAA,CAAA,YAAA,CAAA,MAAA,CAAA,SAAA,EAAwC,CACtC;AAACN,UAAAA,QAAQ,EAAT,CAAA;AAAcC,UAAAA,MAAM,EAApB,CAAA;AAAyBC,UAAAA,MAAM,EAA/B,CAAA;AAAoCC,UAAAA,QAAQ,EAA5C,CAAA;AAAiDhB,UAAAA,IAAI,EAAE;AAAvD,SADsC,CAAxC;AAIAmB,QAAAA,SAAS,CAATA,QAAAA,CAAAA,SAAAA,EAA8B;AAAC3B,UAAAA,KAAK,EAAE4B,KAAK,CAALA,MAAAA,CAAaC;AAArB,SAA9BF;AACAC,QAAAA,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAqB,UAAA,QAAA,EAAY;AAC/BD,UAAAA,SAAS,CAATA,QAAAA,CAAAA,QAAAA;AADFC,SAAAA;AAGAD,QAAAA,SAAS,CAATA,SAAAA;AAxCF,OAAA,MAyCO;AACL;AACA,aAAA,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,EAAmCC,KAAK,CAAxC,OAAA;AACA,aAAA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,SAAA,EAAiCA,KAAK,CAAtC,KAAA;AACA,aAAA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,SAAA,EAAiCA,KAAK,CAAtC,KAAA;AACA,aAAA,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,EAAmCA,KAAK,CAAxC,OAAA;AACA,aAAA,GAAA,CAAA,YAAA,CAAA,MAAA,CAAA,SAAA,EAAwC,CACtC;AAACP,UAAAA,QAAQ,EAAT,CAAA;AAAcC,UAAAA,MAAM,EAApB,CAAA;AAAyBC,UAAAA,MAAM,EAA/B,CAAA;AAAoCC,UAAAA,QAAQ,EAA5C,CAAA;AAAiDhB,UAAAA,IAAI,EAAE;AAAvD,SADsC,CAAxC;AAGA,aAAA,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,EAAmCoB,KAAK,CAAxC,MAAA;AACD;;AAED/B,MAAAA,WAAW,CAAXA,aAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAAA,SAAAA;AAEA,WAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAgC+B,KAAK,CAArC,IAAA;AAEA/B,MAAAA,WAAW,CAAXA,aAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CAAAA,SAAAA;AACAA,MAAAA,WAAW,CAAXA,aAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAAAA,SAAAA;AAEA8B,MAAAA,SAAS,CAATA,SAAAA;AACD;;;8BAESS,I,EAAM;AACd,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACA,eAAA,IAAA;AACD;;AACD,cAAQA,IAAI,CAAZ,IAAA;AACE,aAAA,YAAA;AACE,eAAA,SAAA;AACA,iBAAA,IAAA;;AACF;AACE,eAAA,MAAA,GAAc,KAAA,GAAA,CAASA,IAAI,CAA3B,IAAc,CAAd;;AACA,cAAI,KAAJ,MAAA,EAAiB;AACf,iBAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACD;;AACD,iBAAA,IAAA;AATJ;AAWD;;;8BAESC,I,EAAM;AACd,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACD;AACF;;;+BAEUJ,I,EAAM;AAAA,UAAA,MAAA,GAAA,IAAA;;AACf,UAAI,KAAJ,MAAA,EAAiB;AACf,YAAI,CAAC,KAAA,MAAA,CAAA,UAAA,CAAL,IAAK,CAAL,EAAmC;AACjC,eAAA,MAAA,GAAA,SAAA;AACD;;AACD,eAAA,IAAA;AACD;;AACD,cAAA,IAAA;AACE,aAAA,YAAA;AAAmB;AACjB,iBAAA,KAAA,GAAA,EAAA;;AACA,gBAAMK,GAAG,GAAG,SAANA,GAAM,CAAA,QAAA,EAAA,KAAA,EAAqB;AAC/B,kBAAIC,KAAK,CAALA,KAAAA,IAAeA,KAAK,CAALA,KAAAA,CAAnB,MAAA,EAAuC;AACrC,gBAAA,MAAI,CAAJ,KAAA,CAAA,QAAA,IAAuBA,KAAK,CAA5B,KAAA;AACD;AAHH,aAAA;;AAKAD,YAAAA,GAAG,CAAA,SAAA,EAAY,KAAA,GAAA,CAAfA,OAAG,CAAHA;AACAA,YAAAA,GAAG,CAAA,OAAA,EAAU,KAAA,GAAA,CAAbA,KAAG,CAAHA;AACAA,YAAAA,GAAG,CAAA,OAAA,EAAU,KAAA,GAAA,CAAbA,KAAG,CAAHA;AACAA,YAAAA,GAAG,CAAA,SAAA,EAAY,KAAA,GAAA,CAAfA,OAAG,CAAHA;AACAA,YAAAA,GAAG,CAAA,QAAA,EAAW,KAAA,GAAA,CAAdA,OAAG,CAAHA;AACAA,YAAAA,GAAG,CAAA,MAAA,EAAS,KAAA,GAAA,CAZK,IAYd,CAAHA,CAZiB,CAcjB;;AACA,iBAAA,KAAA,GAAa;AACXV,cAAAA,KAAK,EADM,EAAA;AAEXjB,cAAAA,MAAM,EAAE;AAFG,aAAb;;AAIA,gBAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;AACtB,kBAAM6B,WAAW,GAAG,KAAA,KAAA,CAApB,MAAA;AACA,mBAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAA2B,UAAA,MAAA,EAAU;AACnCA,gBAAAA,WAAW,CAAC7B,MAAM,CAAlB6B,EAAW,CAAXA,GAAyB7B,MAAM,CAA/B6B,UAAAA;AADF,eAAA;AAGD;;AAED,mBAAA,KAAA;AACD;;AACD;AACE;AACA,iBAAA,IAAA;AA/BJ;MAmCF;AACA;AACA;;;;kCACcZ,K,EAAOa,Q,EAAU;AAC7B,UAAI,CAAJ,KAAA,EAAY;AACV,eAAA,CAAA;AAF2B,OAAA,CAK7B;;;AACA,UAAI,CAAC,KAAA,KAAA,CAAA,KAAA,CAAL,MAAA,EAA8B;AAC5B;AACA,aAAA,QAAA,CAAc;AAACX,UAAAA,IAAI,EAAL,EAAA;AAAWC,UAAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAlB;AAA8BC,UAAAA,IAAI,EAAlC,SAAA;AAA+CC,UAAAA,MAAM,EAArD,CAAA;AAA0DC,UAAAA,MAAM,EAAE;AAAlE,SAAd;AAR2B,OAAA,CAW7B;;;AACA,UAAI,KAAA,OAAA,IAAgB,KAAA,OAAA,CAAA,GAAA,CAApB,KAAoB,CAApB,EAA6C;AAC3C,eAAO,KAAA,OAAA,CAAA,GAAA,CAAP,KAAO,CAAP;AACD;;AAED,UAAMpB,KAAK,GAAX,EAAA;AACA0B,MAAAA,QAAQ,GAAGA,QAAQ,IAAIzD,KAAK,CAALA,SAAAA,CAAvByD,MAAAA;;AAEA,UAAIb,KAAK,CAAT,MAAA,EAAkB;AAChBb,QAAAA,KAAK,CAALA,QAAAA,GAAiB,KAAA,aAAA,CAAmBa,KAAK,CAAzCb,MAAiB,CAAjBA;AADF,OAAA,MAEO;AACL,gBAAA,QAAA;AACE,eAAK/B,KAAK,CAALA,SAAAA,CAAL,MAAA;AACE+B,YAAAA,KAAK,CAALA,QAAAA,GAAiB,KAAA,aAAA,CAAjBA,SAAiB,CAAjBA;AACA;;AACF,eAAK/B,KAAK,CAALA,SAAAA,CAAL,IAAA;AACE+B,YAAAA,KAAK,CAALA,QAAAA,GAAiB,KAAA,aAAA,CAAjBA,UAAiB,CAAjBA;AACA;;AACF;AACE;AARJ;AAUD;;AAED,UAAIa,KAAK,CAAT,IAAA,EAAgB;AACdb,QAAAA,KAAK,CAALA,MAAAA,GAAe,KAAA,QAAA,CAAca,KAAK,CAAlCb,IAAe,CAAfA;AACD;;AAED,UAAIa,KAAK,CAAT,MAAA,EAAkB;AAChBb,QAAAA,KAAK,CAALA,QAAAA,GAAiB,KAAA,UAAA,CAAgBa,KAAK,CAAtCb,MAAiB,CAAjBA;AACD;;AAED,UAAIa,KAAK,CAAT,IAAA,EAAgB;AACdb,QAAAA,KAAK,CAALA,MAAAA,GAAe,KAAA,QAAA,CAAca,KAAK,CAAlCb,IAAe,CAAfA;AACD;;AAED,UAAIa,KAAK,CAAT,SAAA,EAAqB;AACnBb,QAAAA,KAAK,CAALA,SAAAA,GAAkBa,KAAK,CAAvBb,SAAAA;AACD;;AAED,UAAIa,KAAK,CAAT,UAAA,EAAsB;AACpBb,QAAAA,KAAK,CAALA,UAAAA,GAAmBa,KAAK,CAAxBb,UAAAA;AACD;;AAED,UAAM2B,OAAO,GAAG,KAAA,SAAA,CAAhB,KAAgB,CAAhB;;AACA,UAAI,KAAJ,OAAA,EAAkB;AAChB,aAAA,OAAA,CAAA,GAAA,CAAA,KAAA,EAAA,OAAA;AACD;;AACD,aAAA,OAAA;MAGF;AACA;;;;kCACcC,E,EAAI;AAChB;AACA,UAAM5B,KAAK,GAAG,KAAA,KAAA,CAAA,MAAA,CAAd,EAAc,CAAd;AACA,UAAI,CAAJ,KAAA,EAAY,OAHI,IAGJ,CAHI,CAKhB;;AACA,UAAIa,KAAK,GAAG,KAAA,KAAA,CAAA,KAAA,CAAZ,EAAY,CAAZ;AACA,UAAA,KAAA,EAAW,OAPK,KAOL,CAPK,CAShB;;AACAA,MAAAA,KAAK,GAAG,KAAA,KAAA,CAAA,KAAA,CAAA,EAAA,IAVQ,EAUhBA,CAVgB,CAYhB;AACA;;AACA,UAAIb,KAAK,CAAT,QAAA,EAAoB;AAClB,YAAMJ,MAAM,GACV,KAAA,KAAA,CAAA,MAAA,CAAkBI,KAAK,CAAvB,QAAA,KAAqCtB,WAAW,CAAXA,iBAAAA,CAA8BsB,KAAK,CAD1E,QACuCtB,CADvC;;AAEA,YAAA,MAAA,EAAY;AACVmC,UAAAA,KAAK,CAALA,MAAAA,GAAAA,MAAAA;AACD;AACF;;AAED,eAAA,QAAA,CAAA,IAAA,EAAA,KAAA,EAAA,OAAA,EAAwC;AACtC,YAAIc,OAAO,IAAIA,OAAO,KAAtB,CAAA,EAA8B;AAC5B,cAAME,IAAI,GAAGC,KAAK,CAAlB,OAAkB,CAAlB;;AACA,cAAA,IAAA,EAAU;AACRjB,YAAAA,KAAK,CAALA,IAAK,CAALA,GAAAA,IAAAA;AACD;AACF;AACF;;AAEDkB,MAAAA,QAAQ,CAAA,MAAA,EAAS,KAAA,KAAA,CAAT,KAAA,EAA2B/B,KAAK,CAAxC+B,MAAQ,CAARA;AACAA,MAAAA,QAAQ,CAAA,QAAA,EAAW,KAAA,KAAA,CAAX,OAAA,EAA+B/B,KAAK,CAA5C+B,QAAQ,CAARA;AACAA,MAAAA,QAAQ,CAAA,MAAA,EAAS,KAAA,KAAA,CAAT,KAAA,EAA2B/B,KAAK,CAjCxB,MAiCR,CAAR+B,CAjCgB,CAmChB;AACA;;AACA,UAAI/B,KAAK,CAAT,SAAA,EAAqB;AACnBa,QAAAA,KAAK,CAALA,SAAAA,GAAkBb,KAAK,CAAvBa,SAAAA;AAtCc,OAAA,CAyChB;AACA;;;AACA,UAAIb,KAAK,CAAT,UAAA,EAAsB;AACpBa,QAAAA,KAAK,CAALA,UAAAA,GAAmBb,KAAK,CAAxBa,UAAAA;AACD;;AAED,aAAA,KAAA;AACD;;;gCAEWb,K,EAAO;AACjB,WAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA;AACA,aAAO,KAAA,KAAA,CAAA,IAAA,CAAA,MAAA,GAAP,CAAA;AACD;;;gCAEW4B,E,EAAI;AACd,aAAO,KAAA,KAAA,CAAA,IAAA,CAAP,EAAO,CAAP;MAGF;AACA;;;;8BACU5B,K,EAAO;AACf,UAAMgC,GAAG,GAAG,KAAA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAZ,KAAY,CAAZ;AACA,UAAIC,KAAK,GAAG,KAAA,KAAA,CAAA,KAAA,CAAZ,GAAY,CAAZ;;AACA,UAAIA,KAAK,KAAT,SAAA,EAAyB;AACvBA,QAAAA,KAAK,GAAG,KAAA,KAAA,CAAA,KAAA,CAAA,GAAA,IAAwB,KAAA,KAAA,CAAA,MAAA,CAAhCA,MAAAA;AACA,aAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GAAA;AACD;;AACD,aAAA,KAAA;MAGF;AACA;;;;kCACcC,U,EAAY;AACxB;AACA,UAAID,KAAK,GAAGvD,WAAW,CAAXA,eAAAA,CAAZ,UAAYA,CAAZ;AACA,UAAIuD,KAAK,KAAT,SAAA,EAAyB,OAHD,KAGC,CAHD,CAKxB;;AACAA,MAAAA,KAAK,GAAG,KAAA,KAAA,CAAA,MAAA,CAARA,UAAQ,CAARA;AACA,UAAIA,KAAK,KAAT,SAAA,EAAyB,OAAA,KAAA;AAEzBA,MAAAA,KAAK,GAAG,KAAA,KAAA,CAAA,MAAA,CAAA,UAAA,IAAgCpD,WAAW,GAAG,KAAA,KAAA,CAAA,OAAA,CAAtDoD,MAAAA;AACA,UAAMD,GAAG,GAAG,KAAA,GAAA,CAAA,MAAA,CAAA,KAAA,CAAsB;AAACJ,QAAAA,EAAE,EAAH,KAAA;AAAYM,QAAAA,UAAU,EAAVA;AAAZ,OAAtB,CAAZ;AACA,WAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA;AACA,aAAA,KAAA;MAGF;AACA;;;;6BACSrC,I,EAAM;AACb,UAAMmC,GAAG,GAAG,KAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAZ,IAAY,CAAZ;AACA,UAAIC,KAAK,GAAG,KAAA,KAAA,CAAA,IAAA,CAAZ,GAAY,CAAZ;;AACA,UAAIA,KAAK,KAAT,SAAA,EAAyB;AACvBA,QAAAA,KAAK,GAAG,KAAA,KAAA,CAAA,IAAA,CAAA,GAAA,IAAuB,KAAA,KAAA,CAAA,KAAA,CAA/BA,MAAAA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA;AACD;;AACD,aAAA,KAAA;MAGF;AACA;;;;+BACWlC,M,EAAQ;AACjB,UAAMiC,GAAG,GAAG,KAAA,GAAA,CAAA,MAAA,CAAA,KAAA,CAAZ,MAAY,CAAZ;AACA,UAAIC,KAAK,GAAG,KAAA,KAAA,CAAA,MAAA,CAAZ,GAAY,CAAZ;;AACA,UAAIA,KAAK,KAAT,SAAA,EAAyB;AACvBA,QAAAA,KAAK,GAAG,KAAA,KAAA,CAAA,MAAA,CAAA,GAAA,IAAyB,KAAA,KAAA,CAAA,OAAA,CAAjCA,MAAAA;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA;AACD;;AACD,aAAA,KAAA;MAGF;AACA;;;;6BACSnC,I,EAAM;AACb,UAAMkC,GAAG,GAAG,KAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAZ,IAAY,CAAZ;AACA,UAAIC,KAAK,GAAG,KAAA,KAAA,CAAA,IAAA,CAAZ,GAAY,CAAZ;;AACA,UAAIA,KAAK,KAAT,SAAA,EAAyB;AACvBA,QAAAA,KAAK,GAAG,KAAA,KAAA,CAAA,IAAA,CAAA,GAAA,IAAuB,KAAA,KAAA,CAAA,KAAA,CAA/BA,MAAAA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA;AACD;;AACD,aAAA,KAAA;MAGF;;;;;EApZwB7D,S;;AAuZ1BU,WAAW,CAAXA,qBAAAA,GAAoC;AAClCqD,EAAAA,KAAK,EAD6B,2DAAA;AAElC,cAFkC,6DAAA;AAGlC,kBAHkC,aAAA;AAIlC,iBAJkC,6DAAA;AAKlC,iBAAe;AALmB,CAApCrD;AAOAA,WAAW,CAAXA,aAAAA,GAA4B;AAC1BmB,EAAAA,UAAU,EAAE,IAAA,WAAA,CAAgB;AAC1BjB,IAAAA,GAAG,EADuB,YAAA;AAE1BI,IAAAA,CAAC,EAAE;AAACH,MAAAA,KAAK,EAAE;AAAR,KAFuB;AAG1BmD,IAAAA,CAAC,EAAE,CAAC;AAACpD,MAAAA,GAAG,EAAJ,WAAA;AAAmBI,MAAAA,CAAC,EAAE;AAAC8B,QAAAA,IAAI,EAAL,QAAA;AAAiBzB,QAAAA,IAAI,EAArB,CAAA;AAA0B4C,QAAAA,SAAS,EAAE;AAArC;AAAtB,KAAD;AAHuB,GAAhB,CADc;AAM1B3C,EAAAA,IAAI,EAAE,IAAA,WAAA,CAAgB;AAACV,IAAAA,GAAG,EAAJ,MAAA;AAAcI,IAAAA,CAAC,EAAE;AAACH,MAAAA,KAAK,EAAE;AAAR;AAAjB,GAAhB,CANoB;AAO1BiB,EAAAA,WAAW,EAAE,IAAA,WAAA,CAAgB;AAC3BlB,IAAAA,GAAG,EADwB,aAAA;AAE3BI,IAAAA,CAAC,EAAE;AAACH,MAAAA,KAAK,EAAN,CAAA;AAAWqD,MAAAA,iBAAiB,EAA5B,mBAAA;AAAmDC,MAAAA,iBAAiB,EAAE;AAAtE;AAFwB,GAAhB,CAPa;AAW1BpC,EAAAA,MAAM,EAAE,IAAA,WAAA,CAAgB;AACtBnB,IAAAA,GAAG,EADmB,QAAA;AAEtBoD,IAAAA,CAAC,EAAE,CACD;AACEpD,MAAAA,GAAG,EADL,KAAA;AAEEI,MAAAA,CAAC,EAAE;AACDoD,QAAAA,GAAG,EADF,wCAAA;AAED,qBAAa;AAFZ,OAFL;AAMEJ,MAAAA,CAAC,EAAE,CAAC;AAACpD,QAAAA,GAAG,EAAJ,kBAAA;AAA0BI,QAAAA,CAAC,EAAE;AAACqD,UAAAA,kBAAkB,EAAE;AAArB;AAA7B,OAAD;AANL,KADC,EASD;AACEzD,MAAAA,GAAG,EADL,KAAA;AAEEI,MAAAA,CAAC,EAAE;AACDoD,QAAAA,GAAG,EADF,wCAAA;AAED,qBAAa;AAFZ,OAFL;AAMEJ,MAAAA,CAAC,EAAE,CAAC;AAACpD,QAAAA,GAAG,EAAJ,oBAAA;AAA4BI,QAAAA,CAAC,EAAE;AAACsD,UAAAA,oBAAoB,EAAE;AAAvB;AAA/B,OAAD;AANL,KATC;AAFmB,GAAhB;AAXkB,CAA5B5D,C,CAkCA;;IACM6D,e;;;;;AACJ,WAAA,eAAA,GAAc;AAAA,QAAA,MAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,CAAA;;AACZ,IAAA,MAAA,GAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,MAAA,CAAA,KAAA,GAAa;AACXtC,MAAAA,MAAM,EAAE,CAAC;AAACC,QAAAA,QAAQ,EAAT,CAAA;AAAcC,QAAAA,MAAM,EAApB,CAAA;AAAyBC,QAAAA,MAAM,EAA/B,CAAA;AAAoCC,QAAAA,QAAQ,EAA5C,CAAA;AAAiDhB,QAAAA,IAAI,EAAE;AAAvD,OAAD,CADG;AAEXV,MAAAA,OAAO,EAFI,EAAA;AAGXI,MAAAA,KAAK,EAAE,CAAC;AAAC4B,QAAAA,IAAI,EAAL,EAAA;AAAWC,QAAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAlB;AAA8BC,QAAAA,IAAI,EAAlC,SAAA;AAA+CC,QAAAA,MAAM,EAArD,CAAA;AAA0DC,QAAAA,MAAM,EAAE;AAAlE,OAAD,CAHI;AAIX9B,MAAAA,OAAO,EAAE,CAJE,EAIF,CAJE;AAKXD,MAAAA,KAAK,EAAE,CACL;AAACqB,QAAAA,IAAI,EAAL,SAAA;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OADK,EAEL;AAACD,QAAAA,IAAI,EAAL,SAAA;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAFK;AALI,KAAb;AAHY,WAAA,MAAA;IAed;AACA;AAEA;;;;;gCACYiC,M,EAAQ;AAClBA,MAAAA,MAAM,CAANA,SAAAA;AACA,aAAOC,OAAO,CAAd,OAAOA,EAAP;MAGF;AACA;AACA;;;;kCACchC,K,EAAOa,Q,EAAU;AAC7B,cAAA,QAAA;AACE,aAAKzD,KAAK,CAALA,SAAAA,CAAL,IAAA;AACE,iBAAO,KAAP,WAAA;;AACF;AACE,iBAAA,CAAA;AAJJ;AAMD;;;AAaD;AACA;;AACc;AAAU;AACtB,aAAA,EAAA;AACD;;;wBAfiB;AAChB,UAAI,CAAC,KAAL,YAAA,EAAwB;AACtB,YAAM6E,SAAS,GAAG;AAChBxC,UAAAA,QAAQ,EAAE5B,WAAW,CAAXA,eAAAA,CAAAA,UAAAA;AADM,SAAlB;AAGA,aAAA,YAAA,GAAoB,KAAA,KAAA,CAAA,MAAA,CAApB,MAAA;AACA,aAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA;AACD;;AACD,aAAO,KAAP,YAAA;AACD;;;;EA9C2BI,W;;AAuD9BA,WAAW,CAAXA,IAAAA,GAAAA,eAAAA;AAEAiE,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["/* eslint-disable max-classes-per-file */\r\nconst Enums = require('../../../doc/enums');\r\nconst XmlStream = require('../../../utils/xml-stream');\r\n\r\nconst BaseXform = require('../base-xform');\r\nconst StaticXform = require('../static-xform');\r\nconst ListXform = require('../list-xform');\r\nconst FontXform = require('./font-xform');\r\nconst FillXform = require('./fill-xform');\r\nconst BorderXform = require('./border-xform');\r\nconst NumFmtXform = require('./numfmt-xform');\r\nconst StyleXform = require('./style-xform');\r\nconst DxfXform = require('./dxf-xform');\r\n\r\n// custom numfmt ids start here\r\nconst NUMFMT_BASE = 164;\r\n\r\n// =============================================================================\r\n// StylesXform is used to generate and parse the styles.xml file\r\n// it manages the collections of fonts, number formats, alignments, etc\r\nclass StylesXform extends BaseXform {\r\n  constructor(initialise) {\r\n    super();\r\n\r\n    this.map = {\r\n      numFmts: new ListXform({tag: 'numFmts', count: true, childXform: new NumFmtXform()}),\r\n      fonts: new ListXform({\r\n        tag: 'fonts',\r\n        count: true,\r\n        childXform: new FontXform(),\r\n        $: {'x14ac:knownFonts': 1},\r\n      }),\r\n      fills: new ListXform({tag: 'fills', count: true, childXform: new FillXform()}),\r\n      borders: new ListXform({tag: 'borders', count: true, childXform: new BorderXform()}),\r\n      cellStyleXfs: new ListXform({tag: 'cellStyleXfs', count: true, childXform: new StyleXform()}),\r\n      cellXfs: new ListXform({\r\n        tag: 'cellXfs',\r\n        count: true,\r\n        childXform: new StyleXform({xfId: true}),\r\n      }),\r\n      dxfs: new ListXform({tag: 'dxfs', always: true, count: true, childXform: new DxfXform()}),\r\n\r\n      // for style manager\r\n      numFmt: new NumFmtXform(),\r\n      font: new FontXform(),\r\n      fill: new FillXform(),\r\n      border: new BorderXform(),\r\n      style: new StyleXform({xfId: true}),\r\n\r\n      cellStyles: StylesXform.STATIC_XFORMS.cellStyles,\r\n      tableStyles: StylesXform.STATIC_XFORMS.tableStyles,\r\n      extLst: StylesXform.STATIC_XFORMS.extLst,\r\n    };\r\n\r\n    if (initialise) {\r\n      // StylesXform also acts as style manager and is used to build up styles-model during worksheet processing\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  initIndex() {\r\n    this.index = {\r\n      style: {},\r\n      numFmt: {},\r\n      numFmtNextId: 164, // start custom format ids here\r\n      font: {},\r\n      border: {},\r\n      fill: {},\r\n    };\r\n  }\r\n\r\n  init() {\r\n    // Prepare for Style Manager role\r\n    this.model = {\r\n      styles: [],\r\n      numFmts: [],\r\n      fonts: [],\r\n      borders: [],\r\n      fills: [],\r\n      dxfs: [],\r\n    };\r\n\r\n    this.initIndex();\r\n\r\n    // default (zero) border\r\n    this._addBorder({});\r\n\r\n    // add default (all zero) style\r\n    this._addStyle({numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0});\r\n\r\n    // add default fills\r\n    this._addFill({type: 'pattern', pattern: 'none'});\r\n    this._addFill({type: 'pattern', pattern: 'gray125'});\r\n\r\n    this.weakMap = new WeakMap();\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    model = model || this.model;\r\n    //\r\n    //   <fonts count=\"2\" x14ac:knownFonts=\"1\">\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('styleSheet', StylesXform.STYLESHEET_ATTRIBUTES);\r\n\r\n    if (this.index) {\r\n      // model has been built by style manager role (contains xml)\r\n      if (model.numFmts && model.numFmts.length) {\r\n        xmlStream.openNode('numFmts', {count: model.numFmts.length});\r\n        model.numFmts.forEach(numFmtXml => {\r\n          xmlStream.writeXml(numFmtXml);\r\n        });\r\n        xmlStream.closeNode();\r\n      }\r\n\r\n      if (!model.fonts.length) {\r\n        // default (zero) font\r\n        this._addFont({size: 11, color: {theme: 1}, name: 'Calibri', family: 2, scheme: 'minor'});\r\n      }\r\n      xmlStream.openNode('fonts', {count: model.fonts.length, 'x14ac:knownFonts': 1});\r\n      model.fonts.forEach(fontXml => {\r\n        xmlStream.writeXml(fontXml);\r\n      });\r\n      xmlStream.closeNode();\r\n\r\n      xmlStream.openNode('fills', {count: model.fills.length});\r\n      model.fills.forEach(fillXml => {\r\n        xmlStream.writeXml(fillXml);\r\n      });\r\n      xmlStream.closeNode();\r\n\r\n      xmlStream.openNode('borders', {count: model.borders.length});\r\n      model.borders.forEach(borderXml => {\r\n        xmlStream.writeXml(borderXml);\r\n      });\r\n      xmlStream.closeNode();\r\n\r\n      this.map.cellStyleXfs.render(xmlStream, [\r\n        {numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0},\r\n      ]);\r\n\r\n      xmlStream.openNode('cellXfs', {count: model.styles.length});\r\n      model.styles.forEach(styleXml => {\r\n        xmlStream.writeXml(styleXml);\r\n      });\r\n      xmlStream.closeNode();\r\n    } else {\r\n      // model is plain JSON and needs to be xformed\r\n      this.map.numFmts.render(xmlStream, model.numFmts);\r\n      this.map.fonts.render(xmlStream, model.fonts);\r\n      this.map.fills.render(xmlStream, model.fills);\r\n      this.map.borders.render(xmlStream, model.borders);\r\n      this.map.cellStyleXfs.render(xmlStream, [\r\n        {numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0},\r\n      ]);\r\n      this.map.cellXfs.render(xmlStream, model.styles);\r\n    }\r\n\r\n    StylesXform.STATIC_XFORMS.cellStyles.render(xmlStream);\r\n\r\n    this.map.dxfs.render(xmlStream, model.dxfs);\r\n\r\n    StylesXform.STATIC_XFORMS.tableStyles.render(xmlStream);\r\n    StylesXform.STATIC_XFORMS.extLst.render(xmlStream);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'styleSheet':\r\n        this.initIndex();\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n        }\r\n        return true;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case 'styleSheet': {\r\n        this.model = {};\r\n        const add = (propName, xform) => {\r\n          if (xform.model && xform.model.length) {\r\n            this.model[propName] = xform.model;\r\n          }\r\n        };\r\n        add('numFmts', this.map.numFmts);\r\n        add('fonts', this.map.fonts);\r\n        add('fills', this.map.fills);\r\n        add('borders', this.map.borders);\r\n        add('styles', this.map.cellXfs);\r\n        add('dxfs', this.map.dxfs);\r\n\r\n        // index numFmts\r\n        this.index = {\r\n          model: [],\r\n          numFmt: [],\r\n        };\r\n        if (this.model.numFmts) {\r\n          const numFmtIndex = this.index.numFmt;\r\n          this.model.numFmts.forEach(numFmt => {\r\n            numFmtIndex[numFmt.id] = numFmt.formatCode;\r\n          });\r\n        }\r\n\r\n        return false;\r\n      }\r\n      default:\r\n        // not quite sure how we get here!\r\n        return true;\r\n    }\r\n  }\r\n\r\n  // add a cell's style model to the collection\r\n  // each style property is processed and cross-referenced, etc.\r\n  // the styleId is returned. Note: cellType is used when numFmt not defined\r\n  addStyleModel(model, cellType) {\r\n    if (!model) {\r\n      return 0;\r\n    }\r\n\r\n    // if we have no default font, add it here now\r\n    if (!this.model.fonts.length) {\r\n      // default (zero) font\r\n      this._addFont({size: 11, color: {theme: 1}, name: 'Calibri', family: 2, scheme: 'minor'});\r\n    }\r\n\r\n    // if we have seen this style object before, assume it has the same styleId\r\n    if (this.weakMap && this.weakMap.has(model)) {\r\n      return this.weakMap.get(model);\r\n    }\r\n\r\n    const style = {};\r\n    cellType = cellType || Enums.ValueType.Number;\r\n\r\n    if (model.numFmt) {\r\n      style.numFmtId = this._addNumFmtStr(model.numFmt);\r\n    } else {\r\n      switch (cellType) {\r\n        case Enums.ValueType.Number:\r\n          style.numFmtId = this._addNumFmtStr('General');\r\n          break;\r\n        case Enums.ValueType.Date:\r\n          style.numFmtId = this._addNumFmtStr('mm-dd-yy');\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (model.font) {\r\n      style.fontId = this._addFont(model.font);\r\n    }\r\n\r\n    if (model.border) {\r\n      style.borderId = this._addBorder(model.border);\r\n    }\r\n\r\n    if (model.fill) {\r\n      style.fillId = this._addFill(model.fill);\r\n    }\r\n\r\n    if (model.alignment) {\r\n      style.alignment = model.alignment;\r\n    }\r\n\r\n    if (model.protection) {\r\n      style.protection = model.protection;\r\n    }\r\n\r\n    const styleId = this._addStyle(style);\r\n    if (this.weakMap) {\r\n      this.weakMap.set(model, styleId);\r\n    }\r\n    return styleId;\r\n  }\r\n\r\n  // given a styleId (i.e. s=\"n\"), get the cell's style model\r\n  // objects are shared where possible.\r\n  getStyleModel(id) {\r\n    // if the style doesn't exist return null\r\n    const style = this.model.styles[id];\r\n    if (!style) return null;\r\n\r\n    // have we built this model before?\r\n    let model = this.index.model[id];\r\n    if (model) return model;\r\n\r\n    // build a new model\r\n    model = this.index.model[id] = {};\r\n\r\n    // -------------------------------------------------------\r\n    // number format\r\n    if (style.numFmtId) {\r\n      const numFmt =\r\n        this.index.numFmt[style.numFmtId] || NumFmtXform.getDefaultFmtCode(style.numFmtId);\r\n      if (numFmt) {\r\n        model.numFmt = numFmt;\r\n      }\r\n    }\r\n\r\n    function addStyle(name, group, styleId) {\r\n      if (styleId || styleId === 0) {\r\n        const part = group[styleId];\r\n        if (part) {\r\n          model[name] = part;\r\n        }\r\n      }\r\n    }\r\n\r\n    addStyle('font', this.model.fonts, style.fontId);\r\n    addStyle('border', this.model.borders, style.borderId);\r\n    addStyle('fill', this.model.fills, style.fillId);\r\n\r\n    // -------------------------------------------------------\r\n    // alignment\r\n    if (style.alignment) {\r\n      model.alignment = style.alignment;\r\n    }\r\n\r\n    // -------------------------------------------------------\r\n    // protection\r\n    if (style.protection) {\r\n      model.protection = style.protection;\r\n    }\r\n\r\n    return model;\r\n  }\r\n\r\n  addDxfStyle(style) {\r\n    this.model.dxfs.push(style);\r\n    return this.model.dxfs.length - 1;\r\n  }\r\n\r\n  getDxfStyle(id) {\r\n    return this.model.dxfs[id];\r\n  }\r\n\r\n  // =========================================================================\r\n  // Private Interface\r\n  _addStyle(style) {\r\n    const xml = this.map.style.toXml(style);\r\n    let index = this.index.style[xml];\r\n    if (index === undefined) {\r\n      index = this.index.style[xml] = this.model.styles.length;\r\n      this.model.styles.push(xml);\r\n    }\r\n    return index;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Number Formats\r\n  _addNumFmtStr(formatCode) {\r\n    // check if default format\r\n    let index = NumFmtXform.getDefaultFmtId(formatCode);\r\n    if (index !== undefined) return index;\r\n\r\n    // check if already in\r\n    index = this.index.numFmt[formatCode];\r\n    if (index !== undefined) return index;\r\n\r\n    index = this.index.numFmt[formatCode] = NUMFMT_BASE + this.model.numFmts.length;\r\n    const xml = this.map.numFmt.toXml({id: index, formatCode});\r\n    this.model.numFmts.push(xml);\r\n    return index;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Fonts\r\n  _addFont(font) {\r\n    const xml = this.map.font.toXml(font);\r\n    let index = this.index.font[xml];\r\n    if (index === undefined) {\r\n      index = this.index.font[xml] = this.model.fonts.length;\r\n      this.model.fonts.push(xml);\r\n    }\r\n    return index;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Borders\r\n  _addBorder(border) {\r\n    const xml = this.map.border.toXml(border);\r\n    let index = this.index.border[xml];\r\n    if (index === undefined) {\r\n      index = this.index.border[xml] = this.model.borders.length;\r\n      this.model.borders.push(xml);\r\n    }\r\n    return index;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Fills\r\n  _addFill(fill) {\r\n    const xml = this.map.fill.toXml(fill);\r\n    let index = this.index.fill[xml];\r\n    if (index === undefined) {\r\n      index = this.index.fill[xml] = this.model.fills.length;\r\n      this.model.fills.push(xml);\r\n    }\r\n    return index;\r\n  }\r\n\r\n  // =========================================================================\r\n}\r\n\r\nStylesXform.STYLESHEET_ATTRIBUTES = {\r\n  xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n  'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\r\n  'mc:Ignorable': 'x14ac x16r2',\r\n  'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\r\n  'xmlns:x16r2': 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main',\r\n};\r\nStylesXform.STATIC_XFORMS = {\r\n  cellStyles: new StaticXform({\r\n    tag: 'cellStyles',\r\n    $: {count: 1},\r\n    c: [{tag: 'cellStyle', $: {name: 'Normal', xfId: 0, builtinId: 0}}],\r\n  }),\r\n  dxfs: new StaticXform({tag: 'dxfs', $: {count: 0}}),\r\n  tableStyles: new StaticXform({\r\n    tag: 'tableStyles',\r\n    $: {count: 0, defaultTableStyle: 'TableStyleMedium2', defaultPivotStyle: 'PivotStyleLight16'},\r\n  }),\r\n  extLst: new StaticXform({\r\n    tag: 'extLst',\r\n    c: [\r\n      {\r\n        tag: 'ext',\r\n        $: {\r\n          uri: '{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}',\r\n          'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main',\r\n        },\r\n        c: [{tag: 'x14:slicerStyles', $: {defaultSlicerStyle: 'SlicerStyleLight1'}}],\r\n      },\r\n      {\r\n        tag: 'ext',\r\n        $: {\r\n          uri: '{9260A510-F301-46a8-8635-F512D64BE5F5}',\r\n          'xmlns:x15': 'http://schemas.microsoft.com/office/spreadsheetml/2010/11/main',\r\n        },\r\n        c: [{tag: 'x15:timelineStyles', $: {defaultTimelineStyle: 'TimeSlicerStyleLight1'}}],\r\n      },\r\n    ],\r\n  }),\r\n};\r\n\r\n// the stylemanager mock acts like StyleManager except that it always returns 0 or {}\r\nclass StylesXformMock extends StylesXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.model = {\r\n      styles: [{numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0}],\r\n      numFmts: [],\r\n      fonts: [{size: 11, color: {theme: 1}, name: 'Calibri', family: 2, scheme: 'minor'}],\r\n      borders: [{}],\r\n      fills: [\r\n        {type: 'pattern', pattern: 'none'},\r\n        {type: 'pattern', pattern: 'gray125'},\r\n      ],\r\n    };\r\n  }\r\n\r\n  // =========================================================================\r\n  // Style Manager Interface\r\n\r\n  // override normal behaviour - consume and dispose\r\n  parseStream(stream) {\r\n    stream.autodrain();\r\n    return Promise.resolve();\r\n  }\r\n\r\n  // add a cell's style model to the collection\r\n  // each style property is processed and cross-referenced, etc.\r\n  // the styleId is returned. Note: cellType is used when numFmt not defined\r\n  addStyleModel(model, cellType) {\r\n    switch (cellType) {\r\n      case Enums.ValueType.Date:\r\n        return this.dateStyleId;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  get dateStyleId() {\r\n    if (!this._dateStyleId) {\r\n      const dateStyle = {\r\n        numFmtId: NumFmtXform.getDefaultFmtId('mm-dd-yy'),\r\n      };\r\n      this._dateStyleId = this.model.styles.length;\r\n      this.model.styles.push(dateStyle);\r\n    }\r\n    return this._dateStyleId;\r\n  }\r\n\r\n  // given a styleId (i.e. s=\"n\"), get the cell's style model\r\n  // objects are shared where possible.\r\n  getStyleModel(/* id */) {\r\n    return {};\r\n  }\r\n}\r\n\r\nStylesXform.Mock = StylesXformMock;\r\n\r\nmodule.exports = StylesXform;\r\n"]},"metadata":{},"sourceType":"script"}