{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform');\n\nvar DateXform = require('../simple/date-xform');\n\nvar StringXform = require('../simple/string-xform');\n\nvar IntegerXform = require('../simple/integer-xform');\n\nvar CoreXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(CoreXform, _BaseXform);\n\n  var _super = _createSuper(CoreXform);\n\n  function CoreXform() {\n    var _this;\n\n    _classCallCheck(this, CoreXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'dc:creator': new StringXform({\n        tag: 'dc:creator'\n      }),\n      'dc:title': new StringXform({\n        tag: 'dc:title'\n      }),\n      'dc:subject': new StringXform({\n        tag: 'dc:subject'\n      }),\n      'dc:description': new StringXform({\n        tag: 'dc:description'\n      }),\n      'dc:identifier': new StringXform({\n        tag: 'dc:identifier'\n      }),\n      'dc:language': new StringXform({\n        tag: 'dc:language'\n      }),\n      'cp:keywords': new StringXform({\n        tag: 'cp:keywords'\n      }),\n      'cp:category': new StringXform({\n        tag: 'cp:category'\n      }),\n      'cp:lastModifiedBy': new StringXform({\n        tag: 'cp:lastModifiedBy'\n      }),\n      'cp:lastPrinted': new DateXform({\n        tag: 'cp:lastPrinted',\n        format: CoreXform.DateFormat\n      }),\n      'cp:revision': new IntegerXform({\n        tag: 'cp:revision'\n      }),\n      'cp:version': new StringXform({\n        tag: 'cp:version'\n      }),\n      'cp:contentStatus': new StringXform({\n        tag: 'cp:contentStatus'\n      }),\n      'cp:contentType': new StringXform({\n        tag: 'cp:contentType'\n      }),\n      'dcterms:created': new DateXform({\n        tag: 'dcterms:created',\n        attrs: CoreXform.DateAttrs,\n        format: CoreXform.DateFormat\n      }),\n      'dcterms:modified': new DateXform({\n        tag: 'dcterms:modified',\n        attrs: CoreXform.DateAttrs,\n        format: CoreXform.DateFormat\n      })\n    };\n    return _this;\n  }\n\n  _createClass(CoreXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n      xmlStream.openNode('cp:coreProperties', CoreXform.CORE_PROPERTY_ATTRIBUTES);\n      this.map['dc:creator'].render(xmlStream, model.creator);\n      this.map['dc:title'].render(xmlStream, model.title);\n      this.map['dc:subject'].render(xmlStream, model.subject);\n      this.map['dc:description'].render(xmlStream, model.description);\n      this.map['dc:identifier'].render(xmlStream, model.identifier);\n      this.map['dc:language'].render(xmlStream, model.language);\n      this.map['cp:keywords'].render(xmlStream, model.keywords);\n      this.map['cp:category'].render(xmlStream, model.category);\n      this.map['cp:lastModifiedBy'].render(xmlStream, model.lastModifiedBy);\n      this.map['cp:lastPrinted'].render(xmlStream, model.lastPrinted);\n      this.map['cp:revision'].render(xmlStream, model.revision);\n      this.map['cp:version'].render(xmlStream, model.version);\n      this.map['cp:contentStatus'].render(xmlStream, model.contentStatus);\n      this.map['cp:contentType'].render(xmlStream, model.contentType);\n      this.map['dcterms:created'].render(xmlStream, model.created);\n      this.map['dcterms:modified'].render(xmlStream, model.modified);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case 'cp:coreProperties':\n        case 'coreProperties':\n          return true;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n            return true;\n          }\n\n          throw new Error(\"Unexpected xml node in parseOpen: \".concat(JSON.stringify(node)));\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case 'cp:coreProperties':\n        case 'coreProperties':\n          this.model = {\n            creator: this.map['dc:creator'].model,\n            title: this.map['dc:title'].model,\n            subject: this.map['dc:subject'].model,\n            description: this.map['dc:description'].model,\n            identifier: this.map['dc:identifier'].model,\n            language: this.map['dc:language'].model,\n            keywords: this.map['cp:keywords'].model,\n            category: this.map['cp:category'].model,\n            lastModifiedBy: this.map['cp:lastModifiedBy'].model,\n            lastPrinted: this.map['cp:lastPrinted'].model,\n            revision: this.map['cp:revision'].model,\n            contentStatus: this.map['cp:contentStatus'].model,\n            contentType: this.map['cp:contentType'].model,\n            created: this.map['dcterms:created'].model,\n            modified: this.map['dcterms:modified'].model\n          };\n          return false;\n\n        default:\n          throw new Error(\"Unexpected xml node in parseClose: \".concat(name));\n      }\n    }\n  }]);\n\n  return CoreXform;\n}(BaseXform);\n\nCoreXform.DateFormat = function (dt) {\n  return dt.toISOString().replace(/[.]\\d{3}/, '');\n};\n\nCoreXform.DateAttrs = {\n  'xsi:type': 'dcterms:W3CDTF'\n};\nCoreXform.CORE_PROPERTY_ATTRIBUTES = {\n  'xmlns:cp': 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n  'xmlns:dc': 'http://purl.org/dc/elements/1.1/',\n  'xmlns:dcterms': 'http://purl.org/dc/terms/',\n  'xmlns:dcmitype': 'http://purl.org/dc/dcmitype/',\n  'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'\n};\nmodule.exports = CoreXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/core/core-xform.js"],"names":["XmlStream","require","BaseXform","DateXform","StringXform","IntegerXform","CoreXform","tag","format","DateFormat","attrs","xmlStream","model","node","JSON","text","name","creator","title","subject","description","identifier","language","keywords","category","lastModifiedBy","lastPrinted","revision","contentStatus","contentType","created","modified","dt","module"],"mappings":"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","sourcesContent":["const XmlStream = require('../../../utils/xml-stream');\r\nconst BaseXform = require('../base-xform');\r\nconst DateXform = require('../simple/date-xform');\r\nconst StringXform = require('../simple/string-xform');\r\nconst IntegerXform = require('../simple/integer-xform');\r\n\r\nclass CoreXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'dc:creator': new StringXform({tag: 'dc:creator'}),\r\n      'dc:title': new StringXform({tag: 'dc:title'}),\r\n      'dc:subject': new StringXform({tag: 'dc:subject'}),\r\n      'dc:description': new StringXform({tag: 'dc:description'}),\r\n      'dc:identifier': new StringXform({tag: 'dc:identifier'}),\r\n      'dc:language': new StringXform({tag: 'dc:language'}),\r\n      'cp:keywords': new StringXform({tag: 'cp:keywords'}),\r\n      'cp:category': new StringXform({tag: 'cp:category'}),\r\n      'cp:lastModifiedBy': new StringXform({tag: 'cp:lastModifiedBy'}),\r\n      'cp:lastPrinted': new DateXform({tag: 'cp:lastPrinted', format: CoreXform.DateFormat}),\r\n      'cp:revision': new IntegerXform({tag: 'cp:revision'}),\r\n      'cp:version': new StringXform({tag: 'cp:version'}),\r\n      'cp:contentStatus': new StringXform({tag: 'cp:contentStatus'}),\r\n      'cp:contentType': new StringXform({tag: 'cp:contentType'}),\r\n      'dcterms:created': new DateXform({\r\n        tag: 'dcterms:created',\r\n        attrs: CoreXform.DateAttrs,\r\n        format: CoreXform.DateFormat,\r\n      }),\r\n      'dcterms:modified': new DateXform({\r\n        tag: 'dcterms:modified',\r\n        attrs: CoreXform.DateAttrs,\r\n        format: CoreXform.DateFormat,\r\n      }),\r\n    };\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('cp:coreProperties', CoreXform.CORE_PROPERTY_ATTRIBUTES);\r\n\r\n    this.map['dc:creator'].render(xmlStream, model.creator);\r\n    this.map['dc:title'].render(xmlStream, model.title);\r\n    this.map['dc:subject'].render(xmlStream, model.subject);\r\n    this.map['dc:description'].render(xmlStream, model.description);\r\n    this.map['dc:identifier'].render(xmlStream, model.identifier);\r\n    this.map['dc:language'].render(xmlStream, model.language);\r\n    this.map['cp:keywords'].render(xmlStream, model.keywords);\r\n    this.map['cp:category'].render(xmlStream, model.category);\r\n    this.map['cp:lastModifiedBy'].render(xmlStream, model.lastModifiedBy);\r\n    this.map['cp:lastPrinted'].render(xmlStream, model.lastPrinted);\r\n    this.map['cp:revision'].render(xmlStream, model.revision);\r\n    this.map['cp:version'].render(xmlStream, model.version);\r\n    this.map['cp:contentStatus'].render(xmlStream, model.contentStatus);\r\n    this.map['cp:contentType'].render(xmlStream, model.contentType);\r\n    this.map['dcterms:created'].render(xmlStream, model.created);\r\n    this.map['dcterms:modified'].render(xmlStream, model.modified);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'cp:coreProperties':\r\n      case 'coreProperties':\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        }\r\n        throw new Error(`Unexpected xml node in parseOpen: ${JSON.stringify(node)}`);\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case 'cp:coreProperties':\r\n      case 'coreProperties':\r\n        this.model = {\r\n          creator: this.map['dc:creator'].model,\r\n          title: this.map['dc:title'].model,\r\n          subject: this.map['dc:subject'].model,\r\n          description: this.map['dc:description'].model,\r\n          identifier: this.map['dc:identifier'].model,\r\n          language: this.map['dc:language'].model,\r\n          keywords: this.map['cp:keywords'].model,\r\n          category: this.map['cp:category'].model,\r\n          lastModifiedBy: this.map['cp:lastModifiedBy'].model,\r\n          lastPrinted: this.map['cp:lastPrinted'].model,\r\n          revision: this.map['cp:revision'].model,\r\n          contentStatus: this.map['cp:contentStatus'].model,\r\n          contentType: this.map['cp:contentType'].model,\r\n          created: this.map['dcterms:created'].model,\r\n          modified: this.map['dcterms:modified'].model,\r\n        };\r\n        return false;\r\n      default:\r\n        throw new Error(`Unexpected xml node in parseClose: ${name}`);\r\n    }\r\n  }\r\n}\r\n\r\nCoreXform.DateFormat = function(dt) {\r\n  return dt.toISOString().replace(/[.]\\d{3}/, '');\r\n};\r\nCoreXform.DateAttrs = {'xsi:type': 'dcterms:W3CDTF'};\r\n\r\nCoreXform.CORE_PROPERTY_ATTRIBUTES = {\r\n  'xmlns:cp': 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\r\n  'xmlns:dc': 'http://purl.org/dc/elements/1.1/',\r\n  'xmlns:dcterms': 'http://purl.org/dc/terms/',\r\n  'xmlns:dcmitype': 'http://purl.org/dc/dcmitype/',\r\n  'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',\r\n};\r\n\r\nmodule.exports = CoreXform;\r\n"]},"metadata":{},"sourceType":"script"}