{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../../base-xform');\n\nvar CfIconExtXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(CfIconExtXform, _BaseXform);\n\n  var _super = _createSuper(CfIconExtXform);\n\n  function CfIconExtXform() {\n    _classCallCheck(this, CfIconExtXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CfIconExtXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.leafNode(this.tag, {\n        iconSet: model.iconSet,\n        iconId: model.iconId\n      });\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(_ref) {\n      var attributes = _ref.attributes;\n      this.model = {\n        iconSet: attributes.iconSet,\n        iconId: BaseXform.toIntValue(attributes.iconId)\n      };\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      return name !== this.tag;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'x14:cfIcon';\n    }\n  }]);\n\n  return CfIconExtXform;\n}(BaseXform);\n\nmodule.exports = CfIconExtXform;","map":{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/cf-icon-ext-xform.js"],"names":["BaseXform","require","CfIconExtXform","xmlStream","model","iconSet","iconId","attributes","name","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,kBAAyB,CAAzB;;IAEMC,c;;;;;;;;;;;;;2BAKGC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA,EAA6B;AAC3BE,QAAAA,OAAO,EAAED,KAAK,CADa,OAAA;AAE3BE,QAAAA,MAAM,EAAEF,KAAK,CAACE;AAFa,OAA7BH;AAID;;;oCAEuB;AAAA,UAAbI,UAAa,GAAA,IAAA,CAAbA,UAAa;AACtB,WAAA,KAAA,GAAa;AACXF,QAAAA,OAAO,EAAEE,UAAU,CADR,OAAA;AAEXD,QAAAA,MAAM,EAAEN,SAAS,CAATA,UAAAA,CAAqBO,UAAU,CAA/BP,MAAAA;AAFG,OAAb;AAID;;;+BAEUQ,I,EAAM;AACf,aAAOA,IAAI,KAAK,KAAhB,GAAA;AACD;;;wBApBS;AACR,aAAA,YAAA;AACD;;;;EAH0BR,S;;AAwB7BS,MAAM,CAANA,OAAAA,GAAAA,cAAAA","sourcesContent":["const BaseXform = require('../../base-xform');\r\n\r\nclass CfIconExtXform extends BaseXform {\r\n  get tag() {\r\n    return 'x14:cfIcon';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.leafNode(this.tag, {\r\n      iconSet: model.iconSet,\r\n      iconId: model.iconId,\r\n    });\r\n  }\r\n\r\n  parseOpen({attributes}) {\r\n    this.model = {\r\n      iconSet: attributes.iconSet,\r\n      iconId: BaseXform.toIntValue(attributes.iconId),\r\n    };\r\n  }\r\n\r\n  parseClose(name) {\r\n    return name !== this.tag;\r\n  }\r\n}\r\n\r\nmodule.exports = CfIconExtXform;\r\n"]},"metadata":{},"sourceType":"script"}