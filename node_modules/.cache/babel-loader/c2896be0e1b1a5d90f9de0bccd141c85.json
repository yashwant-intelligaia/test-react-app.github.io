{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('./base-xform');\n/* 'virtual' methods used as a form of documentation */\n\n/* eslint-disable class-methods-use-this */\n// base class for xforms that are composed of other xforms\n// offers some default implementations\n\n\nvar CompositeXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(CompositeXform, _BaseXform);\n\n  var _super = _createSuper(CompositeXform);\n\n  function CompositeXform() {\n    _classCallCheck(this, CompositeXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CompositeXform, [{\n    key: \"createNewModel\",\n    value: function createNewModel(node) {\n      return {};\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      // Typical pattern for composite xform\n      this.parser = this.parser || this.map[node.name];\n\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      if (node.name === this.tag) {\n        this.model = this.createNewModel(node);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      // Default implementation. Send text to child parser\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      // parseClose has seen a child parser close\n      // now need to incorporate into this.model somehow\n      this.model[name] = parser.model;\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      // Default implementation\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.onParserClose(name, this.parser);\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      return name !== this.tag;\n    }\n  }]);\n\n  return CompositeXform;\n}(BaseXform);\n\nmodule.exports = CompositeXform;","map":{"version":3,"sources":["../../../../lib/xlsx/xform/composite-xform.js"],"names":["BaseXform","require","CompositeXform","node","text","name","parser","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,cAAyB,CAAzB;AAEA;;AACA;AAEA;AACA;;;IACMC,c;;;;;;;;;;;;;mCACWC,I,EAAM;AACnB,aAAA,EAAA;AACD;;;8BAESA,I,EAAM;AACd;AACA,WAAA,MAAA,GAAc,KAAA,MAAA,IAAe,KAAA,GAAA,CAASA,IAAI,CAA1C,IAA6B,CAA7B;;AACA,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACA,eAAA,IAAA;AACD;;AAED,UAAIA,IAAI,CAAJA,IAAAA,KAAc,KAAlB,GAAA,EAA4B;AAC1B,aAAA,KAAA,GAAa,KAAA,cAAA,CAAb,IAAa,CAAb;AACA,eAAA,IAAA;AACD;;AAED,aAAA,KAAA;AACD;;;8BAESC,I,EAAM;AACd;AACA,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACD;AACF;;;kCAEaC,I,EAAMC,M,EAAQ;AAC1B;AACA;AACA,WAAA,KAAA,CAAA,IAAA,IAAmBA,MAAM,CAAzB,KAAA;AACD;;;+BAEUD,I,EAAM;AACf;AACA,UAAI,KAAJ,MAAA,EAAiB;AACf,YAAI,CAAC,KAAA,MAAA,CAAA,UAAA,CAAL,IAAK,CAAL,EAAmC;AACjC,eAAA,aAAA,CAAA,IAAA,EAAyB,KAAzB,MAAA;AACA,eAAA,MAAA,GAAA,SAAA;AACD;;AACD,eAAA,IAAA;AACD;;AAED,aAAOA,IAAI,KAAK,KAAhB,GAAA;AACD;;;;EA7C0BL,S;;AAgD7BO,MAAM,CAANA,OAAAA,GAAAA,cAAAA","sourcesContent":["const BaseXform = require('./base-xform');\r\n\r\n/* 'virtual' methods used as a form of documentation */\r\n/* eslint-disable class-methods-use-this */\r\n\r\n// base class for xforms that are composed of other xforms\r\n// offers some default implementations\r\nclass CompositeXform extends BaseXform {\r\n  createNewModel(node) {\r\n    return {};\r\n  }\r\n\r\n  parseOpen(node) {\r\n    // Typical pattern for composite xform\r\n    this.parser = this.parser || this.map[node.name];\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n\r\n    if (node.name === this.tag) {\r\n      this.model = this.createNewModel(node);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  parseText(text) {\r\n    // Default implementation. Send text to child parser\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    // parseClose has seen a child parser close\r\n    // now need to incorporate into this.model somehow\r\n    this.model[name] = parser.model;\r\n  }\r\n\r\n  parseClose(name) {\r\n    // Default implementation\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.onParserClose(name, this.parser);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    return name !== this.tag;\r\n  }\r\n}\r\n\r\nmodule.exports = CompositeXform;\r\n"]},"metadata":{},"sourceType":"script"}