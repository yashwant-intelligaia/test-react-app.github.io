{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar UnderlineXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(UnderlineXform, _BaseXform);\n\n  var _super = _createSuper(UnderlineXform);\n\n  function UnderlineXform(model) {\n    var _this;\n\n    _classCallCheck(this, UnderlineXform);\n\n    _this = _super.call(this);\n    _this.model = model;\n    return _this;\n  }\n\n  _createClass(UnderlineXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      model = model || this.model;\n\n      if (model === true) {\n        xmlStream.leafNode('u');\n      } else {\n        var attr = UnderlineXform.Attributes[model];\n\n        if (attr) {\n          xmlStream.leafNode('u', attr);\n        }\n      }\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (node.name === 'u') {\n        this.model = node.attributes.val || true;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'u';\n    }\n  }]);\n\n  return UnderlineXform;\n}(BaseXform);\n\nUnderlineXform.Attributes = {\n  single: {},\n  double: {\n    val: 'double'\n  },\n  singleAccounting: {\n    val: 'singleAccounting'\n  },\n  doubleAccounting: {\n    val: 'doubleAccounting'\n  }\n};\nmodule.exports = UnderlineXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/underline-xform.js"],"names":["BaseXform","require","UnderlineXform","xmlStream","model","attr","node","single","double","val","singleAccounting","doubleAccounting","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;IAEMC,c;;;;;AACJ,WAAA,cAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AACjB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;AAHiB,WAAA,KAAA;AAIlB;;;;2BAMMC,S,EAAWC,K,EAAO;AACvBA,MAAAA,KAAK,GAAGA,KAAK,IAAI,KAAjBA,KAAAA;;AAEA,UAAIA,KAAK,KAAT,IAAA,EAAoB;AAClBD,QAAAA,SAAS,CAATA,QAAAA,CAAAA,GAAAA;AADF,OAAA,MAEO;AACL,YAAME,IAAI,GAAGH,cAAc,CAAdA,UAAAA,CAAb,KAAaA,CAAb;;AACA,YAAA,IAAA,EAAU;AACRC,UAAAA,SAAS,CAATA,QAAAA,CAAAA,GAAAA,EAAAA,IAAAA;AACD;AACF;AACF;;;8BAESG,I,EAAM;AACd,UAAIA,IAAI,CAAJA,IAAAA,KAAJ,GAAA,EAAuB;AACrB,aAAA,KAAA,GAAaA,IAAI,CAAJA,UAAAA,CAAAA,GAAAA,IAAb,IAAA;AACD;AACF;;;gCAEW,CAAE;;;iCAED;AACX,aAAA,KAAA;AACD;;;wBA3BS;AACR,aAAA,GAAA;AACD;;;;EAT0BN,S;;AAqC7BE,cAAc,CAAdA,UAAAA,GAA4B;AAC1BK,EAAAA,MAAM,EADoB,EAAA;AAE1BC,EAAAA,MAAM,EAAE;AAACC,IAAAA,GAAG,EAAE;AAAN,GAFkB;AAG1BC,EAAAA,gBAAgB,EAAE;AAACD,IAAAA,GAAG,EAAE;AAAN,GAHQ;AAI1BE,EAAAA,gBAAgB,EAAE;AAACF,IAAAA,GAAG,EAAE;AAAN;AAJQ,CAA5BP;AAOAU,MAAM,CAANA,OAAAA,GAAAA,cAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nclass UnderlineXform extends BaseXform {\r\n  constructor(model) {\r\n    super();\r\n\r\n    this.model = model;\r\n  }\r\n\r\n  get tag() {\r\n    return 'u';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    model = model || this.model;\r\n\r\n    if (model === true) {\r\n      xmlStream.leafNode('u');\r\n    } else {\r\n      const attr = UnderlineXform.Attributes[model];\r\n      if (attr) {\r\n        xmlStream.leafNode('u', attr);\r\n      }\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (node.name === 'u') {\r\n      this.model = node.attributes.val || true;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nUnderlineXform.Attributes = {\r\n  single: {},\r\n  double: {val: 'double'},\r\n  singleAccounting: {val: 'singleAccounting'},\r\n  doubleAccounting: {val: 'doubleAccounting'},\r\n};\r\n\r\nmodule.exports = UnderlineXform;\r\n"]},"metadata":{},"sourceType":"script"}