{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar CompositeXform = require('../../composite-xform');\n\nvar CfRuleXform = require('./cf-rule-xform');\n\nvar ConditionalFormattingXform = /*#__PURE__*/function (_CompositeXform) {\n  _inherits(ConditionalFormattingXform, _CompositeXform);\n\n  var _super = _createSuper(ConditionalFormattingXform);\n\n  function ConditionalFormattingXform() {\n    var _this;\n\n    _classCallCheck(this, ConditionalFormattingXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      cfRule: new CfRuleXform()\n    };\n    return _this;\n  }\n\n  _createClass(ConditionalFormattingXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this2 = this; // if there are no primitive rules, exit now\n\n\n      if (!model.rules.some(CfRuleXform.isPrimitive)) {\n        return;\n      }\n\n      xmlStream.openNode(this.tag, {\n        sqref: model.ref\n      });\n      model.rules.forEach(function (rule) {\n        if (CfRuleXform.isPrimitive(rule)) {\n          rule.ref = model.ref;\n\n          _this2.map.cfRule.render(xmlStream, rule);\n        }\n      });\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"createNewModel\",\n    value: function createNewModel(_ref) {\n      var attributes = _ref.attributes;\n      return {\n        ref: attributes.sqref,\n        rules: []\n      };\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      this.model.rules.push(parser.model);\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'conditionalFormatting';\n    }\n  }]);\n\n  return ConditionalFormattingXform;\n}(CompositeXform);\n\nmodule.exports = ConditionalFormattingXform;","map":{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf/conditional-formatting-xform.js"],"names":["CompositeXform","require","CfRuleXform","ConditionalFormattingXform","cfRule","xmlStream","model","sqref","ref","rule","attributes","rules","name","parser","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,cAAc,GAAGC,OAAO,CAA9B,uBAA8B,CAA9B;;AAEA,IAAMC,WAAW,GAAGD,OAAO,CAA3B,iBAA2B,CAA3B;;IAEME,0B;;;;;AACJ,WAAA,0BAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,0BAAA,CAAA;;AACZ,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,GAAA,GAAW;AACTC,MAAAA,MAAM,EAAE,IAAA,WAAA;AADC,KAAX;AAHY,WAAA,KAAA;AAMb;;;;2BAMMC,S,EAAWC,K,EAAO;AAAA,UAAA,MAAA,GAAA,IAAA,CAAA,CACvB;;;AACA,UAAI,CAACA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAiBJ,WAAW,CAAjC,WAAKI,CAAL,EAAgD;AAC9C;AACD;;AAEDD,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA,EAA6B;AAACE,QAAAA,KAAK,EAAED,KAAK,CAACE;AAAd,OAA7BH;AAEAC,MAAAA,KAAK,CAALA,KAAAA,CAAAA,OAAAA,CAAoB,UAAA,IAAA,EAAQ;AAC1B,YAAIJ,WAAW,CAAXA,WAAAA,CAAJ,IAAIA,CAAJ,EAAmC;AACjCO,UAAAA,IAAI,CAAJA,GAAAA,GAAWH,KAAK,CAAhBG,GAAAA;;AACA,UAAA,MAAI,CAAJ,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,EAAA,IAAA;AACD;AAJHH,OAAAA;AAOAD,MAAAA,SAAS,CAATA,SAAAA;AACD;;;yCAE4B;AAAA,UAAbK,UAAa,GAAA,IAAA,CAAbA,UAAa;AAC3B,aAAO;AACLF,QAAAA,GAAG,EAAEE,UAAU,CADV,KAAA;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;;kCAEaC,I,EAAMC,M,EAAQ;AAC1B,WAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAsBA,MAAM,CAA5B,KAAA;AACD;;;wBA/BS;AACR,aAAA,uBAAA;AACD;;;;EAXsCb,c;;AA2CzCc,MAAM,CAANA,OAAAA,GAAAA,0BAAAA","sourcesContent":["const CompositeXform = require('../../composite-xform');\r\n\r\nconst CfRuleXform = require('./cf-rule-xform');\r\n\r\nclass ConditionalFormattingXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      cfRule: new CfRuleXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'conditionalFormatting';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    // if there are no primitive rules, exit now\r\n    if (!model.rules.some(CfRuleXform.isPrimitive)) {\r\n      return;\r\n    }\r\n\r\n    xmlStream.openNode(this.tag, {sqref: model.ref});\r\n\r\n    model.rules.forEach(rule => {\r\n      if (CfRuleXform.isPrimitive(rule)) {\r\n        rule.ref = model.ref;\r\n        this.map.cfRule.render(xmlStream, rule);\r\n      }\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel({attributes}) {\r\n    return {\r\n      ref: attributes.sqref,\r\n      rules: [],\r\n    };\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    this.model.rules.push(parser.model);\r\n  }\r\n}\r\n\r\nmodule.exports = ConditionalFormattingXform;\r\n"]},"metadata":{},"sourceType":"script"}