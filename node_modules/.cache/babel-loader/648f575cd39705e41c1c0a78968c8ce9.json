{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('./base-xform');\n\nvar ListXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(ListXform, _BaseXform);\n\n  var _super = _createSuper(ListXform);\n\n  function ListXform(options) {\n    var _this;\n\n    _classCallCheck(this, ListXform);\n\n    _this = _super.call(this);\n    _this.tag = options.tag;\n    _this.always = !!options.always;\n    _this.count = options.count;\n    _this.empty = options.empty;\n    _this.$count = options.$count || 'count';\n    _this.$ = options.$;\n    _this.childXform = options.childXform;\n    _this.maxItems = options.maxItems;\n    return _this;\n  }\n\n  _createClass(ListXform, [{\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      var childXform = this.childXform;\n\n      if (model) {\n        model.forEach(function (childModel, index) {\n          options.index = index;\n          childXform.prepare(childModel, options);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      if (this.always || model && model.length) {\n        xmlStream.openNode(this.tag, this.$);\n\n        if (this.count) {\n          xmlStream.addAttribute(this.$count, model && model.length || 0);\n        }\n\n        var childXform = this.childXform;\n        (model || []).forEach(function (childModel, index) {\n          childXform.render(xmlStream, childModel, index);\n        });\n        xmlStream.closeNode();\n      } else if (this.empty) {\n        xmlStream.leafNode(this.tag);\n      }\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case this.tag:\n          this.model = [];\n          return true;\n\n        default:\n          if (this.childXform.parseOpen(node)) {\n            this.parser = this.childXform;\n            return true;\n          }\n\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.model.push(this.parser.model);\n          this.parser = undefined;\n\n          if (this.maxItems && this.model.length > this.maxItems) {\n            throw new Error(\"Max \".concat(this.childXform.tag, \" count (\").concat(this.maxItems, \") exceeded\"));\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model, options) {\n      if (model) {\n        var childXform = this.childXform;\n        model.forEach(function (childModel) {\n          childXform.reconcile(childModel, options);\n        });\n      }\n    }\n  }]);\n\n  return ListXform;\n}(BaseXform);\n\nmodule.exports = ListXform;","map":{"version":3,"sources":["../../../../lib/xlsx/xform/list-xform.js"],"names":["BaseXform","require","ListXform","options","model","childXform","xmlStream","node","text","name","module"],"mappings":"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","sourcesContent":["const BaseXform = require('./base-xform');\r\n\r\nclass ListXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.tag = options.tag;\r\n    this.always = !!options.always;\r\n    this.count = options.count;\r\n    this.empty = options.empty;\r\n    this.$count = options.$count || 'count';\r\n    this.$ = options.$;\r\n    this.childXform = options.childXform;\r\n    this.maxItems = options.maxItems;\r\n  }\r\n\r\n  prepare(model, options) {\r\n    const {childXform} = this;\r\n    if (model) {\r\n      model.forEach((childModel, index) => {\r\n        options.index = index;\r\n        childXform.prepare(childModel, options);\r\n      });\r\n    }\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (this.always || (model && model.length)) {\r\n      xmlStream.openNode(this.tag, this.$);\r\n      if (this.count) {\r\n        xmlStream.addAttribute(this.$count, (model && model.length) || 0);\r\n      }\r\n\r\n      const {childXform} = this;\r\n      (model || []).forEach((childModel, index) => {\r\n        childXform.render(xmlStream, childModel, index);\r\n      });\r\n\r\n      xmlStream.closeNode();\r\n    } else if (this.empty) {\r\n      xmlStream.leafNode(this.tag);\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = [];\r\n        return true;\r\n      default:\r\n        if (this.childXform.parseOpen(node)) {\r\n          this.parser = this.childXform;\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.push(this.parser.model);\r\n        this.parser = undefined;\r\n\r\n        if (this.maxItems && this.model.length > this.maxItems) {\r\n          throw new Error(`Max ${this.childXform.tag} count (${this.maxItems}) exceeded`);\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    if (model) {\r\n      const {childXform} = this;\r\n      model.forEach(childModel => {\r\n        childXform.reconcile(childModel, options);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = ListXform;\r\n"]},"metadata":{},"sourceType":"script"}