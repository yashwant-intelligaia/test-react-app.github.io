{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar _ = require('../../../utils/under-dash');\n\nvar colCache = require('../../../utils/col-cache');\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform');\n\nvar StaticXform = require('../static-xform');\n\nvar ListXform = require('../list-xform');\n\nvar DefinedNameXform = require('./defined-name-xform');\n\nvar SheetXform = require('./sheet-xform');\n\nvar WorkbookViewXform = require('./workbook-view-xform');\n\nvar WorkbookPropertiesXform = require('./workbook-properties-xform');\n\nvar WorkbookCalcPropertiesXform = require('./workbook-calc-properties-xform');\n\nvar WorkbookXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(WorkbookXform, _BaseXform);\n\n  var _super = _createSuper(WorkbookXform);\n\n  function WorkbookXform() {\n    var _this;\n\n    _classCallCheck(this, WorkbookXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      fileVersion: WorkbookXform.STATIC_XFORMS.fileVersion,\n      workbookPr: new WorkbookPropertiesXform(),\n      bookViews: new ListXform({\n        tag: 'bookViews',\n        count: false,\n        childXform: new WorkbookViewXform()\n      }),\n      sheets: new ListXform({\n        tag: 'sheets',\n        count: false,\n        childXform: new SheetXform()\n      }),\n      definedNames: new ListXform({\n        tag: 'definedNames',\n        count: false,\n        childXform: new DefinedNameXform()\n      }),\n      calcPr: new WorkbookCalcPropertiesXform()\n    };\n    return _this;\n  }\n\n  _createClass(WorkbookXform, [{\n    key: \"prepare\",\n    value: function prepare(model) {\n      model.sheets = model.worksheets; // collate all the print areas from all of the sheets and add them to the defined names\n\n      var printAreas = [];\n      var index = 0; // sheets is sparse array - calc index manually\n\n      model.sheets.forEach(function (sheet) {\n        if (sheet.pageSetup && sheet.pageSetup.printArea) {\n          sheet.pageSetup.printArea.split('&&').forEach(function (printArea) {\n            var printAreaComponents = printArea.split(':');\n            var definedName = {\n              name: '_xlnm.Print_Area',\n              ranges: [\"'\".concat(sheet.name, \"'!$\").concat(printAreaComponents[0], \":$\").concat(printAreaComponents[1])],\n              localSheetId: index\n            };\n            printAreas.push(definedName);\n          });\n        }\n\n        if (sheet.pageSetup && (sheet.pageSetup.printTitlesRow || sheet.pageSetup.printTitlesColumn)) {\n          var ranges = [];\n\n          if (sheet.pageSetup.printTitlesColumn) {\n            var titlesColumns = sheet.pageSetup.printTitlesColumn.split(':');\n            ranges.push(\"'\".concat(sheet.name, \"'!$\").concat(titlesColumns[0], \":$\").concat(titlesColumns[1]));\n          }\n\n          if (sheet.pageSetup.printTitlesRow) {\n            var titlesRows = sheet.pageSetup.printTitlesRow.split(':');\n            ranges.push(\"'\".concat(sheet.name, \"'!$\").concat(titlesRows[0], \":$\").concat(titlesRows[1]));\n          }\n\n          var definedName = {\n            name: '_xlnm.Print_Titles',\n            ranges: ranges,\n            localSheetId: index\n          };\n          printAreas.push(definedName);\n        }\n\n        index++;\n      });\n\n      if (printAreas.length) {\n        model.definedNames = model.definedNames.concat(printAreas);\n      }\n\n      (model.media || []).forEach(function (medium, i) {\n        // assign name\n        medium.name = medium.type + (i + 1);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n      xmlStream.openNode('workbook', WorkbookXform.WORKBOOK_ATTRIBUTES);\n      this.map.fileVersion.render(xmlStream);\n      this.map.workbookPr.render(xmlStream, model.properties);\n      this.map.bookViews.render(xmlStream, model.views);\n      this.map.sheets.render(xmlStream, model.sheets);\n      this.map.definedNames.render(xmlStream, model.definedNames);\n      this.map.calcPr.render(xmlStream, model.calcProperties);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case 'workbook':\n          return true;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n          }\n\n          return true;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case 'workbook':\n          this.model = {\n            sheets: this.map.sheets.model,\n            properties: this.map.workbookPr.model || {},\n            views: this.map.bookViews.model,\n            calcProperties: {}\n          };\n\n          if (this.map.definedNames.model) {\n            this.model.definedNames = this.map.definedNames.model;\n          }\n\n          return false;\n\n        default:\n          // not quite sure how we get here!\n          return true;\n      }\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model) {\n      var rels = (model.workbookRels || []).reduce(function (map, rel) {\n        map[rel.Id] = rel;\n        return map;\n      }, {}); // reconcile sheet ids, rIds and names\n\n      var worksheets = [];\n      var worksheet;\n      var index = 0;\n      (model.sheets || []).forEach(function (sheet) {\n        var rel = rels[sheet.rId];\n\n        if (!rel) {\n          return;\n        } // if rel.Target start with `[space]/xl/` or `/xl/` , then it will be replaced with `''` and spliced behind `xl/`,\n        // otherwise it will be spliced directly behind `xl/`. i.g.\n\n\n        worksheet = model.worksheetHash[\"xl/\".concat(rel.Target.replace(/^(\\s|\\/xl\\/)+/, ''))]; // If there are \"chartsheets\" in the file, rel.Target will\n        // come out as chartsheets/sheet1.xml or similar here, and\n        // that won't be in model.worksheetHash.\n        // As we don't have the infrastructure to support chartsheets,\n        // we will ignore them for now:\n\n        if (worksheet) {\n          worksheet.name = sheet.name;\n          worksheet.id = sheet.id;\n          worksheet.state = sheet.state;\n          worksheets[index++] = worksheet;\n        }\n      }); // reconcile print areas\n\n      var definedNames = [];\n\n      _.each(model.definedNames, function (definedName) {\n        if (definedName.name === '_xlnm.Print_Area') {\n          worksheet = worksheets[definedName.localSheetId];\n\n          if (worksheet) {\n            if (!worksheet.pageSetup) {\n              worksheet.pageSetup = {};\n            }\n\n            var range = colCache.decodeEx(definedName.ranges[0]);\n            worksheet.pageSetup.printArea = worksheet.pageSetup.printArea ? \"\".concat(worksheet.pageSetup.printArea, \"&&\").concat(range.dimensions) : range.dimensions;\n          }\n        } else if (definedName.name === '_xlnm.Print_Titles') {\n          worksheet = worksheets[definedName.localSheetId];\n\n          if (worksheet) {\n            if (!worksheet.pageSetup) {\n              worksheet.pageSetup = {};\n            }\n\n            var rangeString = definedName.ranges.join(',');\n            var dollarRegex = /\\$/g;\n            var rowRangeRegex = /\\$\\d+:\\$\\d+/;\n            var rowRangeMatches = rangeString.match(rowRangeRegex);\n\n            if (rowRangeMatches && rowRangeMatches.length) {\n              var _range = rowRangeMatches[0];\n              worksheet.pageSetup.printTitlesRow = _range.replace(dollarRegex, '');\n            }\n\n            var columnRangeRegex = /\\$[A-Z]+:\\$[A-Z]+/;\n            var columnRangeMatches = rangeString.match(columnRangeRegex);\n\n            if (columnRangeMatches && columnRangeMatches.length) {\n              var _range2 = columnRangeMatches[0];\n              worksheet.pageSetup.printTitlesColumn = _range2.replace(dollarRegex, '');\n            }\n          }\n        } else {\n          definedNames.push(definedName);\n        }\n      });\n\n      model.definedNames = definedNames; // used by sheets to build their image models\n\n      model.media.forEach(function (media, i) {\n        media.index = i;\n      });\n    }\n  }]);\n\n  return WorkbookXform;\n}(BaseXform);\n\nWorkbookXform.WORKBOOK_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n  'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n  'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n  'mc:Ignorable': 'x15',\n  'xmlns:x15': 'http://schemas.microsoft.com/office/spreadsheetml/2010/11/main'\n};\nWorkbookXform.STATIC_XFORMS = {\n  fileVersion: new StaticXform({\n    tag: 'fileVersion',\n    $: {\n      appName: 'xl',\n      lastEdited: 5,\n      lowestEdited: 5,\n      rupBuild: 9303\n    }\n  })\n};\nmodule.exports = WorkbookXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/book/workbook-xform.js"],"names":["_","require","colCache","XmlStream","BaseXform","StaticXform","ListXform","DefinedNameXform","SheetXform","WorkbookViewXform","WorkbookPropertiesXform","WorkbookCalcPropertiesXform","WorkbookXform","fileVersion","workbookPr","bookViews","tag","count","childXform","sheets","definedNames","calcPr","model","printAreas","index","sheet","printAreaComponents","printArea","definedName","name","ranges","localSheetId","titlesColumns","titlesRows","medium","i","xmlStream","node","text","properties","views","calcProperties","rels","map","rel","worksheets","worksheet","range","rangeString","dollarRegex","rowRangeRegex","rowRangeMatches","columnRangeRegex","columnRangeMatches","media","xmlns","$","appName","lastEdited","lowestEdited","rupBuild","module"],"mappings":"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","sourcesContent":["const _ = require('../../../utils/under-dash');\r\n\r\nconst colCache = require('../../../utils/col-cache');\r\nconst XmlStream = require('../../../utils/xml-stream');\r\n\r\nconst BaseXform = require('../base-xform');\r\nconst StaticXform = require('../static-xform');\r\nconst ListXform = require('../list-xform');\r\nconst DefinedNameXform = require('./defined-name-xform');\r\nconst SheetXform = require('./sheet-xform');\r\nconst WorkbookViewXform = require('./workbook-view-xform');\r\nconst WorkbookPropertiesXform = require('./workbook-properties-xform');\r\nconst WorkbookCalcPropertiesXform = require('./workbook-calc-properties-xform');\r\n\r\nclass WorkbookXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      fileVersion: WorkbookXform.STATIC_XFORMS.fileVersion,\r\n      workbookPr: new WorkbookPropertiesXform(),\r\n      bookViews: new ListXform({\r\n        tag: 'bookViews',\r\n        count: false,\r\n        childXform: new WorkbookViewXform(),\r\n      }),\r\n      sheets: new ListXform({tag: 'sheets', count: false, childXform: new SheetXform()}),\r\n      definedNames: new ListXform({\r\n        tag: 'definedNames',\r\n        count: false,\r\n        childXform: new DefinedNameXform(),\r\n      }),\r\n      calcPr: new WorkbookCalcPropertiesXform(),\r\n    };\r\n  }\r\n\r\n  prepare(model) {\r\n    model.sheets = model.worksheets;\r\n\r\n    // collate all the print areas from all of the sheets and add them to the defined names\r\n    const printAreas = [];\r\n    let index = 0; // sheets is sparse array - calc index manually\r\n    model.sheets.forEach(sheet => {\r\n      if (sheet.pageSetup && sheet.pageSetup.printArea) {\r\n        sheet.pageSetup.printArea.split('&&').forEach(printArea => {\r\n          const printAreaComponents = printArea.split(':');\r\n          const definedName = {\r\n            name: '_xlnm.Print_Area',\r\n            ranges: [`'${sheet.name}'!$${printAreaComponents[0]}:$${printAreaComponents[1]}`],\r\n            localSheetId: index,\r\n          };\r\n          printAreas.push(definedName);\r\n        });\r\n      }\r\n\r\n      if (\r\n        sheet.pageSetup &&\r\n        (sheet.pageSetup.printTitlesRow || sheet.pageSetup.printTitlesColumn)\r\n      ) {\r\n        const ranges = [];\r\n\r\n        if (sheet.pageSetup.printTitlesColumn) {\r\n          const titlesColumns = sheet.pageSetup.printTitlesColumn.split(':');\r\n          ranges.push(`'${sheet.name}'!$${titlesColumns[0]}:$${titlesColumns[1]}`);\r\n        }\r\n\r\n        if (sheet.pageSetup.printTitlesRow) {\r\n          const titlesRows = sheet.pageSetup.printTitlesRow.split(':');\r\n          ranges.push(`'${sheet.name}'!$${titlesRows[0]}:$${titlesRows[1]}`);\r\n        }\r\n\r\n        const definedName = {\r\n          name: '_xlnm.Print_Titles',\r\n          ranges,\r\n          localSheetId: index,\r\n        };\r\n\r\n        printAreas.push(definedName);\r\n      }\r\n      index++;\r\n    });\r\n    if (printAreas.length) {\r\n      model.definedNames = model.definedNames.concat(printAreas);\r\n    }\r\n\r\n    (model.media || []).forEach((medium, i) => {\r\n      // assign name\r\n      medium.name = medium.type + (i + 1);\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n    xmlStream.openNode('workbook', WorkbookXform.WORKBOOK_ATTRIBUTES);\r\n\r\n    this.map.fileVersion.render(xmlStream);\r\n    this.map.workbookPr.render(xmlStream, model.properties);\r\n    this.map.bookViews.render(xmlStream, model.views);\r\n    this.map.sheets.render(xmlStream, model.sheets);\r\n    this.map.definedNames.render(xmlStream, model.definedNames);\r\n    this.map.calcPr.render(xmlStream, model.calcProperties);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'workbook':\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n        }\r\n        return true;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case 'workbook':\r\n        this.model = {\r\n          sheets: this.map.sheets.model,\r\n          properties: this.map.workbookPr.model || {},\r\n          views: this.map.bookViews.model,\r\n          calcProperties: {},\r\n        };\r\n        if (this.map.definedNames.model) {\r\n          this.model.definedNames = this.map.definedNames.model;\r\n        }\r\n\r\n        return false;\r\n      default:\r\n        // not quite sure how we get here!\r\n        return true;\r\n    }\r\n  }\r\n\r\n  reconcile(model) {\r\n    const rels = (model.workbookRels || []).reduce((map, rel) => {\r\n      map[rel.Id] = rel;\r\n      return map;\r\n    }, {});\r\n\r\n    // reconcile sheet ids, rIds and names\r\n    const worksheets = [];\r\n    let worksheet;\r\n    let index = 0;\r\n\r\n    (model.sheets || []).forEach(sheet => {\r\n      const rel = rels[sheet.rId];\r\n      if (!rel) {\r\n        return;\r\n      }\r\n      // if rel.Target start with `[space]/xl/` or `/xl/` , then it will be replaced with `''` and spliced behind `xl/`,\r\n      // otherwise it will be spliced directly behind `xl/`. i.g.\r\n      worksheet = model.worksheetHash[`xl/${rel.Target.replace(/^(\\s|\\/xl\\/)+/, '')}`];\r\n      // If there are \"chartsheets\" in the file, rel.Target will\r\n      // come out as chartsheets/sheet1.xml or similar here, and\r\n      // that won't be in model.worksheetHash.\r\n      // As we don't have the infrastructure to support chartsheets,\r\n      // we will ignore them for now:\r\n      if (worksheet) {\r\n        worksheet.name = sheet.name;\r\n        worksheet.id = sheet.id;\r\n        worksheet.state = sheet.state;\r\n        worksheets[index++] = worksheet;\r\n      }\r\n    });\r\n\r\n    // reconcile print areas\r\n    const definedNames = [];\r\n    _.each(model.definedNames, definedName => {\r\n      if (definedName.name === '_xlnm.Print_Area') {\r\n        worksheet = worksheets[definedName.localSheetId];\r\n        if (worksheet) {\r\n          if (!worksheet.pageSetup) {\r\n            worksheet.pageSetup = {};\r\n          }\r\n          const range = colCache.decodeEx(definedName.ranges[0]);\r\n          worksheet.pageSetup.printArea = worksheet.pageSetup.printArea\r\n            ? `${worksheet.pageSetup.printArea}&&${range.dimensions}`\r\n            : range.dimensions;\r\n        }\r\n      } else if (definedName.name === '_xlnm.Print_Titles') {\r\n        worksheet = worksheets[definedName.localSheetId];\r\n        if (worksheet) {\r\n          if (!worksheet.pageSetup) {\r\n            worksheet.pageSetup = {};\r\n          }\r\n\r\n          const rangeString = definedName.ranges.join(',');\r\n\r\n          const dollarRegex = /\\$/g;\r\n\r\n          const rowRangeRegex = /\\$\\d+:\\$\\d+/;\r\n          const rowRangeMatches = rangeString.match(rowRangeRegex);\r\n\r\n          if (rowRangeMatches && rowRangeMatches.length) {\r\n            const range = rowRangeMatches[0];\r\n            worksheet.pageSetup.printTitlesRow = range.replace(dollarRegex, '');\r\n          }\r\n\r\n          const columnRangeRegex = /\\$[A-Z]+:\\$[A-Z]+/;\r\n          const columnRangeMatches = rangeString.match(columnRangeRegex);\r\n\r\n          if (columnRangeMatches && columnRangeMatches.length) {\r\n            const range = columnRangeMatches[0];\r\n            worksheet.pageSetup.printTitlesColumn = range.replace(dollarRegex, '');\r\n          }\r\n        }\r\n      } else {\r\n        definedNames.push(definedName);\r\n      }\r\n    });\r\n    model.definedNames = definedNames;\r\n\r\n    // used by sheets to build their image models\r\n    model.media.forEach((media, i) => {\r\n      media.index = i;\r\n    });\r\n  }\r\n}\r\n\r\nWorkbookXform.WORKBOOK_ATTRIBUTES = {\r\n  xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n  'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\r\n  'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\r\n  'mc:Ignorable': 'x15',\r\n  'xmlns:x15': 'http://schemas.microsoft.com/office/spreadsheetml/2010/11/main',\r\n};\r\nWorkbookXform.STATIC_XFORMS = {\r\n  fileVersion: new StaticXform({\r\n    tag: 'fileVersion',\r\n    $: {appName: 'xl', lastEdited: 5, lowestEdited: 5, rupBuild: 9303},\r\n  }),\r\n};\r\n\r\nmodule.exports = WorkbookXform;\r\n"]},"metadata":{},"sourceType":"script"}