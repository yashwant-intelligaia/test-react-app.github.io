{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/yashwant-intelligaia/Documents/Official/TestTasks/my-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}\n\nvar parseSax = require('../../utils/parse-sax');\n\nvar XmlStream = require('../../utils/xml-stream');\n/* 'virtual' methods used as a form of documentation */\n\n/* eslint-disable class-methods-use-this */\n// Base class for Xforms\n\n\nvar BaseXform = /*#__PURE__*/function () {\n  function BaseXform() {\n    _classCallCheck(this, BaseXform);\n  }\n\n  _createClass(BaseXform, [{\n    key: \"prepare\",\n    // constructor(/* model, name */) {}\n    // ============================================================\n    // Virtual Interface\n    value: function prepare()\n    /* model, options */\n    {// optional preparation (mutation) of model so it is ready for write\n    }\n  }, {\n    key: \"render\",\n    value: function render()\n    /* xmlStream, model */\n    {// convert model to xml\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {// XML node opened\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {// chunk of text encountered for current node\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {// XML node closed\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model, options) {// optional post-parse step (opposite to prepare)\n    } // ============================================================\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // to make sure parses don't bleed to next iteration\n      this.model = null; // if we have a map - reset them too\n\n      if (this.map) {\n        Object.values(this.map).forEach(function (xform) {\n          if (xform instanceof BaseXform) {\n            xform.reset();\n          } else if (xform.xform) {\n            xform.xform.reset();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"mergeModel\",\n    value: function mergeModel(obj) {\n      // set obj's props to this.model\n      this.model = Object.assign(this.model || {}, obj);\n    }\n  }, {\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(saxParser) {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, events, _iterator2, _step2, _step2$value, eventType, value;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 2;\n                _iterator = _asyncIterator(saxParser);\n\n              case 4:\n                _context.next = 6;\n                return _iterator.next();\n\n              case 6:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 10;\n                return _step.value;\n\n              case 10:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 42;\n                  break;\n                }\n\n                events = _value;\n                _iterator2 = _createForOfIteratorHelper(events);\n                _context.prev = 14;\n\n                _iterator2.s();\n\n              case 16:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 31;\n                  break;\n                }\n\n                _step2$value = _step2.value, eventType = _step2$value.eventType, value = _step2$value.value;\n\n                if (!(eventType === 'opentag')) {\n                  _context.next = 22;\n                  break;\n                }\n\n                this.parseOpen(value);\n                _context.next = 29;\n                break;\n\n              case 22:\n                if (!(eventType === 'text')) {\n                  _context.next = 26;\n                  break;\n                }\n\n                this.parseText(value);\n                _context.next = 29;\n                break;\n\n              case 26:\n                if (!(eventType === 'closetag')) {\n                  _context.next = 29;\n                  break;\n                }\n\n                if (this.parseClose(value.name)) {\n                  _context.next = 29;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.model);\n\n              case 29:\n                _context.next = 16;\n                break;\n\n              case 31:\n                _context.next = 36;\n                break;\n\n              case 33:\n                _context.prev = 33;\n                _context.t0 = _context[\"catch\"](14);\n\n                _iterator2.e(_context.t0);\n\n              case 36:\n                _context.prev = 36;\n\n                _iterator2.f();\n\n                return _context.finish(36);\n\n              case 39:\n                _iteratorNormalCompletion = true;\n                _context.next = 4;\n                break;\n\n              case 42:\n                _context.next = 48;\n                break;\n\n              case 44:\n                _context.prev = 44;\n                _context.t1 = _context[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context.t1;\n\n              case 48:\n                _context.prev = 48;\n                _context.prev = 49;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 53;\n                  break;\n                }\n\n                _context.next = 53;\n                return _iterator.return();\n\n              case 53:\n                _context.prev = 53;\n\n                if (!_didIteratorError) {\n                  _context.next = 56;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 56:\n                return _context.finish(53);\n\n              case 57:\n                return _context.finish(48);\n\n              case 58:\n                return _context.abrupt(\"return\", this.model);\n\n              case 59:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 44, 48, 58], [14, 33, 36, 39], [49,, 53, 57]]);\n      }));\n\n      function parse(_x) {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"parseStream\",\n    value: function () {\n      var _parseStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.parse(parseSax(stream)));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function parseStream(_x2) {\n        return _parseStream.apply(this, arguments);\n      }\n\n      return parseStream;\n    }()\n  }, {\n    key: \"toXml\",\n    value: function toXml(model) {\n      var xmlStream = new XmlStream();\n      this.render(xmlStream, model);\n      return xmlStream.xml;\n    } // ============================================================\n    // Useful Utilities\n\n  }, {\n    key: \"xml\",\n    get: function get() {\n      // convenience function to get the xml of this.model\n      // useful for manager types that are built during the prepare phase\n      return this.toXml(this.model);\n    }\n  }], [{\n    key: \"toAttribute\",\n    value: function toAttribute(value, dflt) {\n      var always = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (value === undefined) {\n        if (always) {\n          return dflt;\n        }\n      } else if (always || value !== dflt) {\n        return value.toString();\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"toStringAttribute\",\n    value: function toStringAttribute(value, dflt) {\n      var always = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return BaseXform.toAttribute(value, dflt, always);\n    }\n  }, {\n    key: \"toStringValue\",\n    value: function toStringValue(attr, dflt) {\n      return attr === undefined ? dflt : attr;\n    }\n  }, {\n    key: \"toBoolAttribute\",\n    value: function toBoolAttribute(value, dflt) {\n      var always = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (value === undefined) {\n        if (always) {\n          return dflt;\n        }\n      } else if (always || value !== dflt) {\n        return value ? '1' : '0';\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"toBoolValue\",\n    value: function toBoolValue(attr, dflt) {\n      return attr === undefined ? dflt : attr === '1';\n    }\n  }, {\n    key: \"toIntAttribute\",\n    value: function toIntAttribute(value, dflt) {\n      var always = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return BaseXform.toAttribute(value, dflt, always);\n    }\n  }, {\n    key: \"toIntValue\",\n    value: function toIntValue(attr, dflt) {\n      return attr === undefined ? dflt : parseInt(attr, 10);\n    }\n  }, {\n    key: \"toFloatAttribute\",\n    value: function toFloatAttribute(value, dflt) {\n      var always = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return BaseXform.toAttribute(value, dflt, always);\n    }\n  }, {\n    key: \"toFloatValue\",\n    value: function toFloatValue(attr, dflt) {\n      return attr === undefined ? dflt : parseFloat(attr);\n    }\n  }]);\n\n  return BaseXform;\n}();\n\nmodule.exports = BaseXform;","map":{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["parseSax","require","XmlStream","BaseXform","node","text","name","model","options","Object","xform","obj","saxParser","events","eventType","value","stream","xmlStream","dflt","always","attr","parseInt","parseFloat","module"],"mappings":"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","sourcesContent":["const parseSax = require('../../utils/parse-sax');\r\nconst XmlStream = require('../../utils/xml-stream');\r\n\r\n/* 'virtual' methods used as a form of documentation */\r\n/* eslint-disable class-methods-use-this */\r\n\r\n// Base class for Xforms\r\nclass BaseXform {\r\n  // constructor(/* model, name */) {}\r\n\r\n  // ============================================================\r\n  // Virtual Interface\r\n  prepare(/* model, options */) {\r\n    // optional preparation (mutation) of model so it is ready for write\r\n  }\r\n\r\n  render(/* xmlStream, model */) {\r\n    // convert model to xml\r\n  }\r\n\r\n  parseOpen(node) {\r\n    // XML node opened\r\n  }\r\n\r\n  parseText(text) {\r\n    // chunk of text encountered for current node\r\n  }\r\n\r\n  parseClose(name) {\r\n    // XML node closed\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    // optional post-parse step (opposite to prepare)\r\n  }\r\n\r\n  // ============================================================\r\n  reset() {\r\n    // to make sure parses don't bleed to next iteration\r\n    this.model = null;\r\n\r\n    // if we have a map - reset them too\r\n    if (this.map) {\r\n      Object.values(this.map).forEach(xform => {\r\n        if (xform instanceof BaseXform) {\r\n          xform.reset();\r\n        } else if (xform.xform) {\r\n          xform.xform.reset();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  mergeModel(obj) {\r\n    // set obj's props to this.model\r\n    this.model = Object.assign(this.model || {}, obj);\r\n  }\r\n\r\n  async parse(saxParser) {\r\n    for await (const events of saxParser) {\r\n      for (const {eventType, value} of events) {\r\n        if (eventType === 'opentag') {\r\n          this.parseOpen(value);\r\n        } else if (eventType === 'text') {\r\n          this.parseText(value);\r\n        } else if (eventType === 'closetag') {\r\n          if (!this.parseClose(value.name)) {\r\n            return this.model;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return this.model;\r\n  }\r\n\r\n  async parseStream(stream) {\r\n    return this.parse(parseSax(stream));\r\n  }\r\n\r\n  get xml() {\r\n    // convenience function to get the xml of this.model\r\n    // useful for manager types that are built during the prepare phase\r\n    return this.toXml(this.model);\r\n  }\r\n\r\n  toXml(model) {\r\n    const xmlStream = new XmlStream();\r\n    this.render(xmlStream, model);\r\n    return xmlStream.xml;\r\n  }\r\n\r\n  // ============================================================\r\n  // Useful Utilities\r\n  static toAttribute(value, dflt, always = false) {\r\n    if (value === undefined) {\r\n      if (always) {\r\n        return dflt;\r\n      }\r\n    } else if (always || value !== dflt) {\r\n      return value.toString();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static toStringAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toStringValue(attr, dflt) {\r\n    return attr === undefined ? dflt : attr;\r\n  }\r\n\r\n  static toBoolAttribute(value, dflt, always = false) {\r\n    if (value === undefined) {\r\n      if (always) {\r\n        return dflt;\r\n      }\r\n    } else if (always || value !== dflt) {\r\n      return value ? '1' : '0';\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static toBoolValue(attr, dflt) {\r\n    return attr === undefined ? dflt : attr === '1';\r\n  }\r\n\r\n  static toIntAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toIntValue(attr, dflt) {\r\n    return attr === undefined ? dflt : parseInt(attr, 10);\r\n  }\r\n\r\n  static toFloatAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toFloatValue(attr, dflt) {\r\n    return attr === undefined ? dflt : parseFloat(attr);\r\n  }\r\n}\r\n\r\nmodule.exports = BaseXform;\r\n"]},"metadata":{},"sourceType":"script"}