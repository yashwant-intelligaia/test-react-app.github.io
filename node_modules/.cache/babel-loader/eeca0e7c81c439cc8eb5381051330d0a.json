{"ast":null,"code":"\"use strict\";\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar utils = require('../../../utils/utils');\n\nvar BaseXform = require('../base-xform');\n\nvar CommentXform = require('./comment-xform');\n\nvar CommentsXform = module.exports = function () {\n  this.map = {\n    comment: new CommentXform()\n  };\n};\n\nutils.inherits(CommentsXform, BaseXform, {\n  COMMENTS_ATTRIBUTES: {\n    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n  }\n}, {\n  render: function render(xmlStream, model) {\n    var _this = this;\n\n    model = model || this.model;\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode('comments', CommentsXform.COMMENTS_ATTRIBUTES); // authors\n    // TODO: support authors properly\n\n    xmlStream.openNode('authors');\n    xmlStream.leafNode('author', null, 'Author');\n    xmlStream.closeNode(); // comments\n\n    xmlStream.openNode('commentList');\n    model.comments.forEach(function (comment) {\n      _this.map.comment.render(xmlStream, comment);\n    });\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n  },\n  parseOpen: function parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case 'commentList':\n        this.model = {\n          comments: []\n        };\n        return true;\n\n      case 'comment':\n        this.parser = this.map.comment;\n        this.parser.parseOpen(node);\n        return true;\n\n      default:\n        return false;\n    }\n  },\n  parseText: function parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose: function parseClose(name) {\n    switch (name) {\n      case 'commentList':\n        return false;\n\n      case 'comment':\n        this.model.comments.push(this.parser.model);\n        this.parser = undefined;\n        return true;\n\n      default:\n        if (this.parser) {\n          this.parser.parseClose(name);\n        }\n\n        return true;\n    }\n  }\n});","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/comment/comments-xform.js"],"names":["XmlStream","require","utils","BaseXform","CommentXform","CommentsXform","module","comment","COMMENTS_ATTRIBUTES","xmlns","render","model","xmlStream","parseOpen","node","comments","parseText","parseClose"],"mappings":";;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,2BAAyB,CAAzB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAArB,sBAAqB,CAArB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAzB,eAAyB,CAAzB;;AAEA,IAAMG,YAAY,GAAGH,OAAO,CAA5B,iBAA4B,CAA5B;;AAEA,IAAMI,aAAa,GAAIC,MAAM,CAANA,OAAAA,GAAiB,YAAW;AACjD,OAAA,GAAA,GAAW;AACTC,IAAAA,OAAO,EAAE,IAAA,YAAA;AADA,GAAX;AADF,CAAA;;AAMAL,KAAK,CAALA,QAAAA,CAAAA,aAAAA,EAAAA,SAAAA,EAGE;AACEM,EAAAA,mBAAmB,EAAE;AACnBC,IAAAA,KAAK,EAAE;AADY;AADvB,CAHFP,EAQE;AACEQ,EAAAA,MADF,EAAA,SAAA,MAAA,CAAA,SAAA,EAAA,KAAA,EAC2B;AAAA,QAAA,KAAA,GAAA,IAAA;;AACvBC,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAjBA,KAAAA;AACAC,IAAAA,SAAS,CAATA,OAAAA,CAAkBZ,SAAS,CAA3BY,gBAAAA;AACAA,IAAAA,SAAS,CAATA,QAAAA,CAAAA,UAAAA,EAA+BP,aAAa,CAHrB,mBAGvBO,EAHuB,CAKvB;AACA;;AACAA,IAAAA,SAAS,CAATA,QAAAA,CAAAA,SAAAA;AACAA,IAAAA,SAAS,CAATA,QAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EAAAA,QAAAA;AACAA,IAAAA,SAAS,CATc,SASvBA,GATuB,CAWvB;;AACAA,IAAAA,SAAS,CAATA,QAAAA,CAAAA,aAAAA;AACAD,IAAAA,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAuB,UAAA,OAAA,EAAW;AAChC,MAAA,KAAI,CAAJ,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,EAAA,OAAA;AADFA,KAAAA;AAGAC,IAAAA,SAAS,CAATA,SAAAA;AACAA,IAAAA,SAAS,CAATA,SAAAA;AAlBJ,GAAA;AAqBEC,EAAAA,SArBF,EAAA,SAAA,SAAA,CAAA,IAAA,EAqBkB;AACd,QAAI,KAAJ,MAAA,EAAiB;AACf,WAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACA,aAAA,IAAA;AACD;;AACD,YAAQC,IAAI,CAAZ,IAAA;AACE,WAAA,aAAA;AACE,aAAA,KAAA,GAAa;AACXC,UAAAA,QAAQ,EAAE;AADC,SAAb;AAGA,eAAA,IAAA;;AACF,WAAA,SAAA;AACE,aAAA,MAAA,GAAc,KAAA,GAAA,CAAd,OAAA;AACA,aAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACA,eAAA,IAAA;;AACF;AACE,eAAA,KAAA;AAXJ;AA1BJ,GAAA;AAwCEC,EAAAA,SAxCF,EAAA,SAAA,SAAA,CAAA,IAAA,EAwCkB;AACd,QAAI,KAAJ,MAAA,EAAiB;AACf,WAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACD;AA3CL,GAAA;AA6CEC,EAAAA,UA7CF,EAAA,SAAA,UAAA,CAAA,IAAA,EA6CmB;AACf,YAAA,IAAA;AACE,WAAA,aAAA;AACE,eAAA,KAAA;;AACF,WAAA,SAAA;AACE,aAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAyB,KAAA,MAAA,CAAzB,KAAA;AACA,aAAA,MAAA,GAAA,SAAA;AACA,eAAA,IAAA;;AACF;AACE,YAAI,KAAJ,MAAA,EAAiB;AACf,eAAA,MAAA,CAAA,UAAA,CAAA,IAAA;AACD;;AACD,eAAA,IAAA;AAXJ;AAaD;AA3DH,CARFf","sourcesContent":["const XmlStream = require('../../../utils/xml-stream');\r\nconst utils = require('../../../utils/utils');\r\nconst BaseXform = require('../base-xform');\r\n\r\nconst CommentXform = require('./comment-xform');\r\n\r\nconst CommentsXform = (module.exports = function() {\r\n  this.map = {\r\n    comment: new CommentXform(),\r\n  };\r\n});\r\n\r\nutils.inherits(\r\n  CommentsXform,\r\n  BaseXform,\r\n  {\r\n    COMMENTS_ATTRIBUTES: {\r\n      xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n    },\r\n  },\r\n  {\r\n    render(xmlStream, model) {\r\n      model = model || this.model;\r\n      xmlStream.openXml(XmlStream.StdDocAttributes);\r\n      xmlStream.openNode('comments', CommentsXform.COMMENTS_ATTRIBUTES);\r\n\r\n      // authors\r\n      // TODO: support authors properly\r\n      xmlStream.openNode('authors');\r\n      xmlStream.leafNode('author', null, 'Author');\r\n      xmlStream.closeNode();\r\n\r\n      // comments\r\n      xmlStream.openNode('commentList');\r\n      model.comments.forEach(comment => {\r\n        this.map.comment.render(xmlStream, comment);\r\n      });\r\n      xmlStream.closeNode();\r\n      xmlStream.closeNode();\r\n    },\r\n\r\n    parseOpen(node) {\r\n      if (this.parser) {\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      }\r\n      switch (node.name) {\r\n        case 'commentList':\r\n          this.model = {\r\n            comments: [],\r\n          };\r\n          return true;\r\n        case 'comment':\r\n          this.parser = this.map.comment;\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        default:\r\n          return false;\r\n      }\r\n    },\r\n    parseText(text) {\r\n      if (this.parser) {\r\n        this.parser.parseText(text);\r\n      }\r\n    },\r\n    parseClose(name) {\r\n      switch (name) {\r\n        case 'commentList':\r\n          return false;\r\n        case 'comment':\r\n          this.model.comments.push(this.parser.model);\r\n          this.parser = undefined;\r\n          return true;\r\n        default:\r\n          if (this.parser) {\r\n            this.parser.parseClose(name);\r\n          }\r\n          return true;\r\n      }\r\n    },\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"script"}