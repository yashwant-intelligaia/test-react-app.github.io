{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../../base-xform');\n\nvar CompositeXform = require('../../composite-xform');\n\nvar ColorXform = require('../../style/color-xform');\n\nvar CfvoExtXform = require('./cfvo-ext-xform');\n\nvar DatabarExtXform = /*#__PURE__*/function (_CompositeXform) {\n  _inherits(DatabarExtXform, _CompositeXform);\n\n  var _super = _createSuper(DatabarExtXform);\n\n  function DatabarExtXform() {\n    var _this;\n\n    _classCallCheck(this, DatabarExtXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'x14:cfvo': _this.cfvoXform = new CfvoExtXform(),\n      'x14:borderColor': _this.borderColorXform = new ColorXform('x14:borderColor'),\n      'x14:negativeBorderColor': _this.negativeBorderColorXform = new ColorXform('x14:negativeBorderColor'),\n      'x14:negativeFillColor': _this.negativeFillColorXform = new ColorXform('x14:negativeFillColor'),\n      'x14:axisColor': _this.axisColorXform = new ColorXform('x14:axisColor')\n    };\n    return _this;\n  }\n\n  _createClass(DatabarExtXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this2 = this;\n\n      xmlStream.openNode(this.tag, {\n        minLength: BaseXform.toIntAttribute(model.minLength, 0, true),\n        maxLength: BaseXform.toIntAttribute(model.maxLength, 100, true),\n        border: BaseXform.toBoolAttribute(model.border, false),\n        gradient: BaseXform.toBoolAttribute(model.gradient, true),\n        negativeBarColorSameAsPositive: BaseXform.toBoolAttribute(model.negativeBarColorSameAsPositive, true),\n        negativeBarBorderColorSameAsPositive: BaseXform.toBoolAttribute(model.negativeBarBorderColorSameAsPositive, true),\n        axisPosition: BaseXform.toAttribute(model.axisPosition, 'auto'),\n        direction: BaseXform.toAttribute(model.direction, 'leftToRight')\n      });\n      model.cfvo.forEach(function (cfvo) {\n        _this2.cfvoXform.render(xmlStream, cfvo);\n      });\n      this.borderColorXform.render(xmlStream, model.borderColor);\n      this.negativeBorderColorXform.render(xmlStream, model.negativeBorderColor);\n      this.negativeFillColorXform.render(xmlStream, model.negativeFillColor);\n      this.axisColorXform.render(xmlStream, model.axisColor);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"createNewModel\",\n    value: function createNewModel(_ref) {\n      var attributes = _ref.attributes;\n      return {\n        cfvo: [],\n        minLength: BaseXform.toIntValue(attributes.minLength, 0),\n        maxLength: BaseXform.toIntValue(attributes.maxLength, 100),\n        border: BaseXform.toBoolValue(attributes.border, false),\n        gradient: BaseXform.toBoolValue(attributes.gradient, true),\n        negativeBarColorSameAsPositive: BaseXform.toBoolValue(attributes.negativeBarColorSameAsPositive, true),\n        negativeBarBorderColorSameAsPositive: BaseXform.toBoolValue(attributes.negativeBarBorderColorSameAsPositive, true),\n        axisPosition: BaseXform.toStringValue(attributes.axisPosition, 'auto'),\n        direction: BaseXform.toStringValue(attributes.direction, 'leftToRight')\n      };\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      var _name$split = name.split(':'),\n          _name$split2 = _slicedToArray(_name$split, 2),\n          prop = _name$split2[1];\n\n      switch (prop) {\n        case 'cfvo':\n          this.model.cfvo.push(parser.model);\n          break;\n\n        default:\n          this.model[prop] = parser.model;\n          break;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'x14:dataBar';\n    }\n  }], [{\n    key: \"isExt\",\n    value: function isExt(rule) {\n      // not all databars need ext\n      // TODO: refine this\n      return !rule.gradient;\n    }\n  }]);\n\n  return DatabarExtXform;\n}(CompositeXform);\n\nmodule.exports = DatabarExtXform;","map":{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/databar-ext-xform.js"],"names":["BaseXform","require","CompositeXform","ColorXform","CfvoExtXform","DatabarExtXform","rule","xmlStream","model","minLength","maxLength","border","gradient","negativeBarColorSameAsPositive","negativeBarBorderColorSameAsPositive","axisPosition","direction","attributes","cfvo","name","parser","prop","module"],"mappings":"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","sourcesContent":["const BaseXform = require('../../base-xform');\r\nconst CompositeXform = require('../../composite-xform');\r\n\r\nconst ColorXform = require('../../style/color-xform');\r\nconst CfvoExtXform = require('./cfvo-ext-xform');\r\n\r\nclass DatabarExtXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'x14:cfvo': (this.cfvoXform = new CfvoExtXform()),\r\n      'x14:borderColor': (this.borderColorXform = new ColorXform('x14:borderColor')),\r\n      'x14:negativeBorderColor': (this.negativeBorderColorXform = new ColorXform(\r\n        'x14:negativeBorderColor'\r\n      )),\r\n      'x14:negativeFillColor': (this.negativeFillColorXform = new ColorXform(\r\n        'x14:negativeFillColor'\r\n      )),\r\n      'x14:axisColor': (this.axisColorXform = new ColorXform('x14:axisColor')),\r\n    };\r\n  }\r\n\r\n  static isExt(rule) {\r\n    // not all databars need ext\r\n    // TODO: refine this\r\n    return !rule.gradient;\r\n  }\r\n\r\n  get tag() {\r\n    return 'x14:dataBar';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      minLength: BaseXform.toIntAttribute(model.minLength, 0, true),\r\n      maxLength: BaseXform.toIntAttribute(model.maxLength, 100, true),\r\n      border: BaseXform.toBoolAttribute(model.border, false),\r\n      gradient: BaseXform.toBoolAttribute(model.gradient, true),\r\n      negativeBarColorSameAsPositive: BaseXform.toBoolAttribute(\r\n        model.negativeBarColorSameAsPositive,\r\n        true\r\n      ),\r\n      negativeBarBorderColorSameAsPositive: BaseXform.toBoolAttribute(\r\n        model.negativeBarBorderColorSameAsPositive,\r\n        true\r\n      ),\r\n      axisPosition: BaseXform.toAttribute(model.axisPosition, 'auto'),\r\n      direction: BaseXform.toAttribute(model.direction, 'leftToRight'),\r\n    });\r\n\r\n    model.cfvo.forEach(cfvo => {\r\n      this.cfvoXform.render(xmlStream, cfvo);\r\n    });\r\n\r\n    this.borderColorXform.render(xmlStream, model.borderColor);\r\n    this.negativeBorderColorXform.render(xmlStream, model.negativeBorderColor);\r\n    this.negativeFillColorXform.render(xmlStream, model.negativeFillColor);\r\n    this.axisColorXform.render(xmlStream, model.axisColor);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel({attributes}) {\r\n    return {\r\n      cfvo: [],\r\n      minLength: BaseXform.toIntValue(attributes.minLength, 0),\r\n      maxLength: BaseXform.toIntValue(attributes.maxLength, 100),\r\n      border: BaseXform.toBoolValue(attributes.border, false),\r\n      gradient: BaseXform.toBoolValue(attributes.gradient, true),\r\n      negativeBarColorSameAsPositive: BaseXform.toBoolValue(\r\n        attributes.negativeBarColorSameAsPositive,\r\n        true\r\n      ),\r\n      negativeBarBorderColorSameAsPositive: BaseXform.toBoolValue(\r\n        attributes.negativeBarBorderColorSameAsPositive,\r\n        true\r\n      ),\r\n      axisPosition: BaseXform.toStringValue(attributes.axisPosition, 'auto'),\r\n      direction: BaseXform.toStringValue(attributes.direction, 'leftToRight'),\r\n    };\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    const [, prop] = name.split(':');\r\n    switch (prop) {\r\n      case 'cfvo':\r\n        this.model.cfvo.push(parser.model);\r\n        break;\r\n\r\n      default:\r\n        this.model[prop] = parser.model;\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = DatabarExtXform;\r\n"]},"metadata":{},"sourceType":"script"}