{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar RichTextXform = require('../strings/rich-text-xform');\n\nvar utils = require('../../../utils/utils');\n\nvar BaseXform = require('../base-xform');\n/**\r\n  <comment ref=\"B1\" authorId=\"0\">\r\n    <text>\r\n      <r>\r\n        <rPr>\r\n          <b/>\r\n          <sz val=\"9\"/>\r\n          <rFont val=\"宋体\"/>\r\n          <charset val=\"134\"/>\r\n        </rPr>\r\n        <t>51422:</t>\r\n      </r>\r\n      <r>\r\n        <rPr>\r\n          <sz val=\"9\"/>\r\n          <rFont val=\"宋体\"/>\r\n          <charset val=\"134\"/>\r\n        </rPr>\r\n        <t xml:space=\"preserve\">&#10;test</t>\r\n      </r>\r\n    </text>\r\n  </comment>\r\n */\n\n\nvar CommentXform = module.exports = function (model) {\n  this.model = model;\n};\n\nutils.inherits(CommentXform, BaseXform, {\n  get tag() {\n    return 'r';\n  },\n\n  get richTextXform() {\n    if (!this._richTextXform) {\n      this._richTextXform = new RichTextXform();\n    }\n\n    return this._richTextXform;\n  },\n\n  render: function render(xmlStream, model) {\n    var _this = this;\n\n    model = model || this.model;\n    xmlStream.openNode('comment', {\n      ref: model.ref,\n      authorId: 0\n    });\n    xmlStream.openNode('text');\n\n    if (model && model.note && model.note.texts) {\n      model.note.texts.forEach(function (text) {\n        _this.richTextXform.render(xmlStream, text);\n      });\n    }\n\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n  },\n  parseOpen: function parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case 'comment':\n        this.model = _objectSpread({\n          type: 'note',\n          note: {\n            texts: []\n          }\n        }, node.attributes);\n        return true;\n\n      case 'r':\n        this.parser = this.richTextXform;\n        this.parser.parseOpen(node);\n        return true;\n\n      default:\n        return false;\n    }\n  },\n  parseText: function parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose: function parseClose(name) {\n    switch (name) {\n      case 'comment':\n        return false;\n\n      case 'r':\n        this.model.note.texts.push(this.parser.model);\n        this.parser = undefined;\n        return true;\n\n      default:\n        if (this.parser) {\n          this.parser.parseClose(name);\n        }\n\n        return true;\n    }\n  }\n});","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/comment/comment-xform.js"],"names":["RichTextXform","require","utils","BaseXform","CommentXform","module","render","model","xmlStream","ref","authorId","parseOpen","node","type","note","texts","parseText","parseClose"],"mappings":"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","sourcesContent":["const RichTextXform = require('../strings/rich-text-xform');\r\nconst utils = require('../../../utils/utils');\r\nconst BaseXform = require('../base-xform');\r\n\r\n/**\r\n  <comment ref=\"B1\" authorId=\"0\">\r\n    <text>\r\n      <r>\r\n        <rPr>\r\n          <b/>\r\n          <sz val=\"9\"/>\r\n          <rFont val=\"宋体\"/>\r\n          <charset val=\"134\"/>\r\n        </rPr>\r\n        <t>51422:</t>\r\n      </r>\r\n      <r>\r\n        <rPr>\r\n          <sz val=\"9\"/>\r\n          <rFont val=\"宋体\"/>\r\n          <charset val=\"134\"/>\r\n        </rPr>\r\n        <t xml:space=\"preserve\">&#10;test</t>\r\n      </r>\r\n    </text>\r\n  </comment>\r\n */\r\n\r\nconst CommentXform = (module.exports = function(model) {\r\n  this.model = model;\r\n});\r\n\r\nutils.inherits(CommentXform, BaseXform, {\r\n  get tag() {\r\n    return 'r';\r\n  },\r\n\r\n  get richTextXform() {\r\n    if (!this._richTextXform) {\r\n      this._richTextXform = new RichTextXform();\r\n    }\r\n    return this._richTextXform;\r\n  },\r\n\r\n  render(xmlStream, model) {\r\n    model = model || this.model;\r\n\r\n    xmlStream.openNode('comment', {\r\n      ref: model.ref,\r\n      authorId: 0,\r\n    });\r\n    xmlStream.openNode('text');\r\n    if (model && model.note && model.note.texts) {\r\n      model.note.texts.forEach(text => {\r\n        this.richTextXform.render(xmlStream, text);\r\n      });\r\n    }\r\n    xmlStream.closeNode();\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'comment':\r\n        this.model = {\r\n          type: 'note',\r\n          note: {\r\n            texts: [],\r\n          },\r\n          ...node.attributes,\r\n        };\r\n        return true;\r\n      case 'r':\r\n        this.parser = this.richTextXform;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case 'comment':\r\n        return false;\r\n      case 'r':\r\n        this.model.note.texts.push(this.parser.model);\r\n        this.parser = undefined;\r\n        return true;\r\n      default:\r\n        if (this.parser) {\r\n          this.parser.parseClose(name);\r\n        }\r\n        return true;\r\n    }\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"script"}