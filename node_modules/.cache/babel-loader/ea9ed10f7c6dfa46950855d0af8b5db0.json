{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar PageBreaksXform = require('./page-breaks-xform');\n\nvar ListXform = require('../list-xform');\n\nvar RowBreaksXform = /*#__PURE__*/function (_ListXform) {\n  _inherits(RowBreaksXform, _ListXform);\n\n  var _super = _createSuper(RowBreaksXform);\n\n  function RowBreaksXform() {\n    _classCallCheck(this, RowBreaksXform);\n\n    var options = {\n      tag: 'rowBreaks',\n      count: true,\n      childXform: new PageBreaksXform()\n    };\n    return _super.call(this, options);\n  } // get tag() { return 'rowBreaks'; }\n\n\n  _createClass(RowBreaksXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      if (model && model.length) {\n        xmlStream.openNode(this.tag, this.$);\n\n        if (this.count) {\n          xmlStream.addAttribute(this.$count, model.length);\n          xmlStream.addAttribute('manualBreakCount', model.length);\n        }\n\n        var childXform = this.childXform;\n        model.forEach(function (childModel) {\n          childXform.render(xmlStream, childModel);\n        });\n        xmlStream.closeNode();\n      } else if (this.empty) {\n        xmlStream.leafNode(this.tag);\n      }\n    }\n  }]);\n\n  return RowBreaksXform;\n}(ListXform);\n\nmodule.exports = RowBreaksXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/row-breaks-xform.js"],"names":["PageBreaksXform","require","ListXform","RowBreaksXform","options","tag","count","childXform","xmlStream","model","module"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAA/B,qBAA+B,CAA/B;;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAAzB,eAAyB,CAAzB;;IAEME,c;;;;;AACJ,WAAA,cAAA,GAAc;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AACZ,QAAMC,OAAO,GAAG;AACdC,MAAAA,GAAG,EADW,WAAA;AAEdC,MAAAA,KAAK,EAFS,IAAA;AAGdC,MAAAA,UAAU,EAAE,IAAA,eAAA;AAHE,KAAhB;AADY,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,OAAA,CAAA;IASd;;;;;2BAEOC,S,EAAWC,K,EAAO;AACvB,UAAIA,KAAK,IAAIA,KAAK,CAAlB,MAAA,EAA2B;AACzBD,QAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA,EAA6B,KAA7BA,CAAAA;;AACA,YAAI,KAAJ,KAAA,EAAgB;AACdA,UAAAA,SAAS,CAATA,YAAAA,CAAuB,KAAvBA,MAAAA,EAAoCC,KAAK,CAAzCD,MAAAA;AACAA,UAAAA,SAAS,CAATA,YAAAA,CAAAA,kBAAAA,EAA2CC,KAAK,CAAhDD,MAAAA;AACD;;AALwB,YAOlBD,UAPkB,GAAA,KAAA,UAAA;AAQzBE,QAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,UAAA,EAAc;AAC1BF,UAAAA,UAAU,CAAVA,MAAAA,CAAAA,SAAAA,EAAAA,UAAAA;AADFE,SAAAA;AAIAD,QAAAA,SAAS,CAATA,SAAAA;AAZF,OAAA,MAaO,IAAI,KAAJ,KAAA,EAAgB;AACrBA,QAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA;AACD;AACF;;;;EA7B0BN,S;;AAgC7BQ,MAAM,CAANA,OAAAA,GAAAA,cAAAA","sourcesContent":["'use strict';\r\n\r\nconst PageBreaksXform = require('./page-breaks-xform');\r\n\r\nconst ListXform = require('../list-xform');\r\n\r\nclass RowBreaksXform extends ListXform {\r\n  constructor() {\r\n    const options = {\r\n      tag: 'rowBreaks',\r\n      count: true,\r\n      childXform: new PageBreaksXform(),\r\n    };\r\n    super(options);\r\n  }\r\n\r\n  // get tag() { return 'rowBreaks'; }\r\n\r\n  render(xmlStream, model) {\r\n    if (model && model.length) {\r\n      xmlStream.openNode(this.tag, this.$);\r\n      if (this.count) {\r\n        xmlStream.addAttribute(this.$count, model.length);\r\n        xmlStream.addAttribute('manualBreakCount', model.length);\r\n      }\r\n\r\n      const {childXform} = this;\r\n      model.forEach(childModel => {\r\n        childXform.render(xmlStream, childModel);\r\n      });\r\n\r\n      xmlStream.closeNode();\r\n    } else if (this.empty) {\r\n      xmlStream.leafNode(this.tag);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = RowBreaksXform;\r\n"]},"metadata":{},"sourceType":"script"}