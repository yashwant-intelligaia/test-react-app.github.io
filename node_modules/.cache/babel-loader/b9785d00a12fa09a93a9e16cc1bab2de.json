{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar BlipXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(BlipXform, _BaseXform);\n\n  var _super = _createSuper(BlipXform);\n\n  function BlipXform() {\n    _classCallCheck(this, BlipXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BlipXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.leafNode(this.tag, {\n        'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n        'r:embed': model.rId,\n        cstate: 'print'\n      }); // TODO: handle children (e.g. a:extLst=>a:ext=>a14:useLocalDpi\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      switch (node.name) {\n        case this.tag:\n          this.model = {\n            rId: node.attributes['r:embed']\n          };\n          return true;\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      switch (name) {\n        case this.tag:\n          return false;\n\n        default:\n          // unprocessed internal nodes\n          return true;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'a:blip';\n    }\n  }]);\n\n  return BlipXform;\n}(BaseXform);\n\nmodule.exports = BlipXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/blip-xform.js"],"names":["BaseXform","require","BlipXform","xmlStream","model","cstate","node","rId","name","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;IAEMC,S;;;;;;;;;;;;;2BAKGC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA,EAA6B;AAC3B,mBAD2B,qEAAA;AAE3B,mBAAWC,KAAK,CAFW,GAAA;AAG3BC,QAAAA,MAAM,EAAE;AAHmB,OAA7BF,EADuB,CAMvB;AACD;;;8BAESG,I,EAAM;AACd,cAAQA,IAAI,CAAZ,IAAA;AACE,aAAK,KAAL,GAAA;AACE,eAAA,KAAA,GAAa;AACXC,YAAAA,GAAG,EAAED,IAAI,CAAJA,UAAAA,CAAAA,SAAAA;AADM,WAAb;AAGA,iBAAA,IAAA;;AACF;AACE,iBAAA,IAAA;AAPJ;AASD;;;gCAEW,CAAE;;;+BAEHE,I,EAAM;AACf,cAAA,IAAA;AACE,aAAK,KAAL,GAAA;AACE,iBAAA,KAAA;;AACF;AACE;AACA,iBAAA,IAAA;AALJ;AAOD;;;wBAnCS;AACR,aAAA,QAAA;AACD;;;;EAHqBR,S;;AAuCxBS,MAAM,CAANA,OAAAA,GAAAA,SAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nclass BlipXform extends BaseXform {\r\n  get tag() {\r\n    return 'a:blip';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.leafNode(this.tag, {\r\n      'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\r\n      'r:embed': model.rId,\r\n      cstate: 'print',\r\n    });\r\n    // TODO: handle children (e.g. a:extLst=>a:ext=>a14:useLocalDpi\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          rId: node.attributes['r:embed'],\r\n        };\r\n        return true;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        // unprocessed internal nodes\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = BlipXform;\r\n"]},"metadata":{},"sourceType":"script"}