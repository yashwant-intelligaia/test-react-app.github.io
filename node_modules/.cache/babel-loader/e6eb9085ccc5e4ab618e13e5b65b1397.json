{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* eslint-disable max-classes-per-file */\n\n\nvar BaseXform = require('../base-xform');\n\nvar ColorXform = require('./color-xform');\n\nvar EdgeXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(EdgeXform, _BaseXform);\n\n  var _super = _createSuper(EdgeXform);\n\n  function EdgeXform(name) {\n    var _this;\n\n    _classCallCheck(this, EdgeXform);\n\n    _this = _super.call(this);\n    _this.name = name;\n    _this.map = {\n      color: new ColorXform()\n    };\n    return _this;\n  }\n\n  _createClass(EdgeXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model, defaultColor) {\n      var color = model && model.color || defaultColor || this.defaultColor;\n      xmlStream.openNode(this.name);\n\n      if (model && model.style) {\n        xmlStream.addAttribute('style', model.style);\n\n        if (color) {\n          this.map.color.render(xmlStream, color);\n        }\n      }\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case this.name:\n          {\n            var style = node.attributes.style;\n\n            if (style) {\n              this.model = {\n                style: style\n              };\n            } else {\n              this.model = undefined;\n            }\n\n            return true;\n          }\n\n        case 'color':\n          this.parser = this.map.color;\n          this.parser.parseOpen(node);\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      if (name === this.name) {\n        if (this.map.color.model) {\n          if (!this.model) {\n            this.model = {};\n          }\n\n          this.model.color = this.map.color.model;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"validStyle\",\n    value: function validStyle(value) {\n      return EdgeXform.validStyleValues[value];\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return this.name;\n    }\n  }]);\n\n  return EdgeXform;\n}(BaseXform);\n\nEdgeXform.validStyleValues = ['thin', 'dotted', 'dashDot', 'hair', 'dashDotDot', 'slantDashDot', 'mediumDashed', 'mediumDashDotDot', 'mediumDashDot', 'medium', 'double', 'thick'].reduce(function (p, v) {\n  p[v] = true;\n  return p;\n}, {}); // Border encapsulates translation from border model to/from xlsx\n\nvar BorderXform = /*#__PURE__*/function (_BaseXform2) {\n  _inherits(BorderXform, _BaseXform2);\n\n  var _super2 = _createSuper(BorderXform);\n\n  function BorderXform() {\n    var _this2;\n\n    _classCallCheck(this, BorderXform);\n\n    _this2 = _super2.call(this);\n    _this2.map = {\n      top: new EdgeXform('top'),\n      left: new EdgeXform('left'),\n      bottom: new EdgeXform('bottom'),\n      right: new EdgeXform('right'),\n      diagonal: new EdgeXform('diagonal')\n    };\n    return _this2;\n  }\n\n  _createClass(BorderXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var color = model.color;\n      xmlStream.openNode('border');\n\n      if (model.diagonal && model.diagonal.style) {\n        if (model.diagonal.up) {\n          xmlStream.addAttribute('diagonalUp', '1');\n        }\n\n        if (model.diagonal.down) {\n          xmlStream.addAttribute('diagonalDown', '1');\n        }\n      }\n\n      function add(edgeModel, edgeXform) {\n        if (edgeModel && !edgeModel.color && model.color) {\n          // don't mess with incoming models\n          edgeModel = _objectSpread(_objectSpread({}, edgeModel), {}, {\n            color: model.color\n          });\n        }\n\n        edgeXform.render(xmlStream, edgeModel, color);\n      }\n\n      add(model.left, this.map.left);\n      add(model.right, this.map.right);\n      add(model.top, this.map.top);\n      add(model.bottom, this.map.bottom);\n      add(model.diagonal, this.map.diagonal);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case 'border':\n          this.reset();\n          this.diagonalUp = !!node.attributes.diagonalUp;\n          this.diagonalDown = !!node.attributes.diagonalDown;\n          return true;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n            return true;\n          }\n\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      if (name === 'border') {\n        var model = this.model = {};\n\n        var add = function add(key, edgeModel, extensions) {\n          if (edgeModel) {\n            if (extensions) {\n              Object.assign(edgeModel, extensions);\n            }\n\n            model[key] = edgeModel;\n          }\n        };\n\n        add('left', this.map.left.model);\n        add('right', this.map.right.model);\n        add('top', this.map.top.model);\n        add('bottom', this.map.bottom.model);\n        add('diagonal', this.map.diagonal.model, {\n          up: this.diagonalUp,\n          down: this.diagonalDown\n        });\n      }\n\n      return false;\n    }\n  }]);\n\n  return BorderXform;\n}(BaseXform);\n\nmodule.exports = BorderXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/border-xform.js"],"names":["BaseXform","require","ColorXform","EdgeXform","color","xmlStream","model","defaultColor","node","style","text","name","value","p","BorderXform","top","left","bottom","right","diagonal","edgeModel","edgeXform","add","Object","up","down","diagonalDown","module"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\r\nconst BaseXform = require('../base-xform');\r\n\r\nconst ColorXform = require('./color-xform');\r\n\r\nclass EdgeXform extends BaseXform {\r\n  constructor(name) {\r\n    super();\r\n\r\n    this.name = name;\r\n    this.map = {\r\n      color: new ColorXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return this.name;\r\n  }\r\n\r\n  render(xmlStream, model, defaultColor) {\r\n    const color = (model && model.color) || defaultColor || this.defaultColor;\r\n    xmlStream.openNode(this.name);\r\n    if (model && model.style) {\r\n      xmlStream.addAttribute('style', model.style);\r\n      if (color) {\r\n        this.map.color.render(xmlStream, color);\r\n      }\r\n    }\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.name: {\r\n        const {style} = node.attributes;\r\n        if (style) {\r\n          this.model = {\r\n            style,\r\n          };\r\n        } else {\r\n          this.model = undefined;\r\n        }\r\n        return true;\r\n      }\r\n      case 'color':\r\n        this.parser = this.map.color;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    if (name === this.name) {\r\n      if (this.map.color.model) {\r\n        if (!this.model) {\r\n          this.model = {};\r\n        }\r\n        this.model.color = this.map.color.model;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  validStyle(value) {\r\n    return EdgeXform.validStyleValues[value];\r\n  }\r\n}\r\n\r\nEdgeXform.validStyleValues = [\r\n  'thin',\r\n  'dotted',\r\n  'dashDot',\r\n  'hair',\r\n  'dashDotDot',\r\n  'slantDashDot',\r\n  'mediumDashed',\r\n  'mediumDashDotDot',\r\n  'mediumDashDot',\r\n  'medium',\r\n  'double',\r\n  'thick',\r\n].reduce((p, v) => {\r\n  p[v] = true;\r\n  return p;\r\n}, {});\r\n\r\n// Border encapsulates translation from border model to/from xlsx\r\nclass BorderXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      top: new EdgeXform('top'),\r\n      left: new EdgeXform('left'),\r\n      bottom: new EdgeXform('bottom'),\r\n      right: new EdgeXform('right'),\r\n      diagonal: new EdgeXform('diagonal'),\r\n    };\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    const {color} = model;\r\n    xmlStream.openNode('border');\r\n    if (model.diagonal && model.diagonal.style) {\r\n      if (model.diagonal.up) {\r\n        xmlStream.addAttribute('diagonalUp', '1');\r\n      }\r\n      if (model.diagonal.down) {\r\n        xmlStream.addAttribute('diagonalDown', '1');\r\n      }\r\n    }\r\n    function add(edgeModel, edgeXform) {\r\n      if (edgeModel && !edgeModel.color && model.color) {\r\n        // don't mess with incoming models\r\n        edgeModel = {\r\n          ...edgeModel,\r\n          color: model.color,\r\n        };\r\n      }\r\n      edgeXform.render(xmlStream, edgeModel, color);\r\n    }\r\n    add(model.left, this.map.left);\r\n    add(model.right, this.map.right);\r\n    add(model.top, this.map.top);\r\n    add(model.bottom, this.map.bottom);\r\n    add(model.diagonal, this.map.diagonal);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'border':\r\n        this.reset();\r\n        this.diagonalUp = !!node.attributes.diagonalUp;\r\n        this.diagonalDown = !!node.attributes.diagonalDown;\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    if (name === 'border') {\r\n      const model = (this.model = {});\r\n      const add = function(key, edgeModel, extensions) {\r\n        if (edgeModel) {\r\n          if (extensions) {\r\n            Object.assign(edgeModel, extensions);\r\n          }\r\n          model[key] = edgeModel;\r\n        }\r\n      };\r\n      add('left', this.map.left.model);\r\n      add('right', this.map.right.model);\r\n      add('top', this.map.top.model);\r\n      add('bottom', this.map.bottom.model);\r\n      add('diagonal', this.map.diagonal.model, {up: this.diagonalUp, down: this.diagonalDown});\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = BorderXform;\r\n"]},"metadata":{},"sourceType":"script"}