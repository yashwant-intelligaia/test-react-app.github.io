{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar TableColumnXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(TableColumnXform, _BaseXform);\n\n  var _super = _createSuper(TableColumnXform);\n\n  function TableColumnXform() {\n    _classCallCheck(this, TableColumnXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TableColumnXform, [{\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      model.id = options.index + 1;\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.leafNode(this.tag, {\n        id: model.id.toString(),\n        name: model.name,\n        totalsRowLabel: model.totalsRowLabel,\n        totalsRowFunction: model.totalsRowFunction,\n        dxfId: model.dxfId\n      });\n      return true;\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (node.name === this.tag) {\n        var attributes = node.attributes;\n        this.model = {\n          name: attributes.name,\n          totalsRowLabel: attributes.totalsRowLabel,\n          totalsRowFunction: attributes.totalsRowFunction,\n          dxfId: attributes.dxfId\n        };\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'tableColumn';\n    }\n  }]);\n\n  return TableColumnXform;\n}(BaseXform);\n\nmodule.exports = TableColumnXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/table/table-column-xform.js"],"names":["BaseXform","require","TableColumnXform","model","options","xmlStream","id","name","totalsRowLabel","totalsRowFunction","dxfId","node","attributes","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;IAEMC,gB;;;;;;;;;;;;;4BAKIC,K,EAAOC,O,EAAS;AACtBD,MAAAA,KAAK,CAALA,EAAAA,GAAWC,OAAO,CAAPA,KAAAA,GAAXD,CAAAA;AACD;;;2BAEME,S,EAAWF,K,EAAO;AACvBE,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA,EAA6B;AAC3BC,QAAAA,EAAE,EAAEH,KAAK,CAALA,EAAAA,CADuB,QACvBA,EADuB;AAE3BI,QAAAA,IAAI,EAAEJ,KAAK,CAFgB,IAAA;AAG3BK,QAAAA,cAAc,EAAEL,KAAK,CAHM,cAAA;AAI3BM,QAAAA,iBAAiB,EAAEN,KAAK,CAJG,iBAAA;AAK3BO,QAAAA,KAAK,EAAEP,KAAK,CAACO;AALc,OAA7BL;AAOA,aAAA,IAAA;AACD;;;8BAESM,I,EAAM;AACd,UAAIA,IAAI,CAAJA,IAAAA,KAAc,KAAlB,GAAA,EAA4B;AAAA,YACnBC,UADmB,GACLD,IADK,CAAA,UAAA;AAE1B,aAAA,KAAA,GAAa;AACXJ,UAAAA,IAAI,EAAEK,UAAU,CADL,IAAA;AAEXJ,UAAAA,cAAc,EAAEI,UAAU,CAFf,cAAA;AAGXH,UAAAA,iBAAiB,EAAEG,UAAU,CAHlB,iBAAA;AAIXF,UAAAA,KAAK,EAAEE,UAAU,CAACF;AAJP,SAAb;AAMA,eAAA,IAAA;AACD;;AACD,aAAA,KAAA;AACD;;;gCAEW,CAAE;;;iCAED;AACX,aAAA,KAAA;AACD;;;wBArCS;AACR,aAAA,aAAA;AACD;;;;EAH4BV,S;;AAyC/Ba,MAAM,CAANA,OAAAA,GAAAA,gBAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nclass TableColumnXform extends BaseXform {\r\n  get tag() {\r\n    return 'tableColumn';\r\n  }\r\n\r\n  prepare(model, options) {\r\n    model.id = options.index + 1;\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.leafNode(this.tag, {\r\n      id: model.id.toString(),\r\n      name: model.name,\r\n      totalsRowLabel: model.totalsRowLabel,\r\n      totalsRowFunction: model.totalsRowFunction,\r\n      dxfId: model.dxfId,\r\n    });\r\n    return true;\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (node.name === this.tag) {\r\n      const {attributes} = node;\r\n      this.model = {\r\n        name: attributes.name,\r\n        totalsRowLabel: attributes.totalsRowLabel,\r\n        totalsRowFunction: attributes.totalsRowFunction,\r\n        dxfId: attributes.dxfId,\r\n      };\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = TableColumnXform;\r\n"]},"metadata":{},"sourceType":"script"}