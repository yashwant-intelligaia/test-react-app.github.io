{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar FilterColumnXform = require('./filter-column-xform');\n\nvar AutoFilterXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(AutoFilterXform, _BaseXform);\n\n  var _super = _createSuper(AutoFilterXform);\n\n  function AutoFilterXform() {\n    var _this;\n\n    _classCallCheck(this, AutoFilterXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      filterColumn: new FilterColumnXform()\n    };\n    return _this;\n  }\n\n  _createClass(AutoFilterXform, [{\n    key: \"prepare\",\n    value: function prepare(model) {\n      var _this2 = this;\n\n      model.columns.forEach(function (column, index) {\n        _this2.map.filterColumn.prepare(column, {\n          index: index\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this3 = this;\n\n      xmlStream.openNode(this.tag, {\n        ref: model.autoFilterRef\n      });\n      model.columns.forEach(function (column) {\n        _this3.map.filterColumn.render(xmlStream, column);\n      });\n      xmlStream.closeNode();\n      return true;\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case this.tag:\n          this.model = {\n            autoFilterRef: node.attributes.ref,\n            columns: []\n          };\n          return true;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parseOpen(node);\n            return true;\n          }\n\n          throw new Error(\"Unexpected xml node in parseOpen: \".concat(JSON.stringify(node)));\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.model.columns.push(this.parser.model);\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case this.tag:\n          return false;\n\n        default:\n          throw new Error(\"Unexpected xml node in parseClose: \".concat(name));\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'autoFilter';\n    }\n  }]);\n\n  return AutoFilterXform;\n}(BaseXform);\n\nmodule.exports = AutoFilterXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/table/auto-filter-xform.js"],"names":["BaseXform","require","FilterColumnXform","AutoFilterXform","filterColumn","model","index","xmlStream","ref","autoFilterRef","node","columns","JSON","text","name","module"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nconst FilterColumnXform = require('./filter-column-xform');\r\n\r\nclass AutoFilterXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      filterColumn: new FilterColumnXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'autoFilter';\r\n  }\r\n\r\n  prepare(model) {\r\n    model.columns.forEach((column, index) => {\r\n      this.map.filterColumn.prepare(column, {index});\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {ref: model.autoFilterRef});\r\n\r\n    model.columns.forEach(column => {\r\n      this.map.filterColumn.render(xmlStream, column);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n    return true;\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          autoFilterRef: node.attributes.ref,\r\n          columns: [],\r\n        };\r\n        return true;\r\n\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parseOpen(node);\r\n          return true;\r\n        }\r\n        throw new Error(`Unexpected xml node in parseOpen: ${JSON.stringify(node)}`);\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.columns.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        throw new Error(`Unexpected xml node in parseClose: ${name}`);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = AutoFilterXform;\r\n"]},"metadata":{},"sourceType":"script"}