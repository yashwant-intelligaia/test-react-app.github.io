{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColumnParser = void 0;\n\nconst NonQuotedColumnParser_1 = require(\"./NonQuotedColumnParser\");\n\nconst QuotedColumnParser_1 = require(\"./QuotedColumnParser\");\n\nconst Token_1 = require(\"../Token\");\n\nclass ColumnParser {\n  constructor(parserOptions) {\n    this.parserOptions = parserOptions;\n    this.quotedColumnParser = new QuotedColumnParser_1.QuotedColumnParser(parserOptions);\n    this.nonQuotedColumnParser = new NonQuotedColumnParser_1.NonQuotedColumnParser(parserOptions);\n  }\n\n  parse(scanner) {\n    const {\n      nextNonSpaceToken\n    } = scanner;\n\n    if (nextNonSpaceToken !== null && Token_1.Token.isTokenQuote(nextNonSpaceToken, this.parserOptions)) {\n      scanner.advanceToToken(nextNonSpaceToken);\n      return this.quotedColumnParser.parse(scanner);\n    }\n\n    return this.nonQuotedColumnParser.parse(scanner);\n  }\n\n}\n\nexports.ColumnParser = ColumnParser;","map":{"version":3,"sources":["../../../../src/parser/column/ColumnParser.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAa,YAAb,CAAyB;AAOrB,EAAA,WAAA,CAAmB,aAAnB,EAA+C;AAC3C,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,kBAAL,GAA0B,IAAI,oBAAA,CAAA,kBAAJ,CAAuB,aAAvB,CAA1B;AACA,SAAK,qBAAL,GAA6B,IAAI,uBAAA,CAAA,qBAAJ,CAA0B,aAA1B,CAA7B;AACH;;AAEM,EAAA,KAAK,CAAC,OAAD,EAAiB;AACzB,UAAM;AAAE,MAAA;AAAF,QAAwB,OAA9B;;AACA,QAAI,iBAAiB,KAAK,IAAtB,IAA8B,OAAA,CAAA,KAAA,CAAM,YAAN,CAAmB,iBAAnB,EAAsC,KAAK,aAA3C,CAAlC,EAA6F;AACzF,MAAA,OAAO,CAAC,cAAR,CAAuB,iBAAvB;AACA,aAAO,KAAK,kBAAL,CAAwB,KAAxB,CAA8B,OAA9B,CAAP;AACH;;AACD,WAAO,KAAK,qBAAL,CAA2B,KAA3B,CAAiC,OAAjC,CAAP;AACH;;AApBoB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColumnParser = void 0;\nconst NonQuotedColumnParser_1 = require(\"./NonQuotedColumnParser\");\nconst QuotedColumnParser_1 = require(\"./QuotedColumnParser\");\nconst Token_1 = require(\"../Token\");\nclass ColumnParser {\n    constructor(parserOptions) {\n        this.parserOptions = parserOptions;\n        this.quotedColumnParser = new QuotedColumnParser_1.QuotedColumnParser(parserOptions);\n        this.nonQuotedColumnParser = new NonQuotedColumnParser_1.NonQuotedColumnParser(parserOptions);\n    }\n    parse(scanner) {\n        const { nextNonSpaceToken } = scanner;\n        if (nextNonSpaceToken !== null && Token_1.Token.isTokenQuote(nextNonSpaceToken, this.parserOptions)) {\n            scanner.advanceToToken(nextNonSpaceToken);\n            return this.quotedColumnParser.parse(scanner);\n        }\n        return this.nonQuotedColumnParser.parse(scanner);\n    }\n}\nexports.ColumnParser = ColumnParser;\n//# sourceMappingURL=ColumnParser.js.map"]},"metadata":{},"sourceType":"script"}