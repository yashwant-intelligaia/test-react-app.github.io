{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../../base-xform');\n\nvar ConditionalFormattingXform = require('./conditional-formatting-xform');\n\nvar ConditionalFormattingsXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(ConditionalFormattingsXform, _BaseXform);\n\n  var _super = _createSuper(ConditionalFormattingsXform);\n\n  function ConditionalFormattingsXform() {\n    var _this;\n\n    _classCallCheck(this, ConditionalFormattingsXform);\n\n    _this = _super.call(this);\n    _this.cfXform = new ConditionalFormattingXform();\n    return _this;\n  }\n\n  _createClass(ConditionalFormattingsXform, [{\n    key: \"reset\",\n    value: function reset() {\n      this.model = [];\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      // ensure each rule has a priority value\n      var nextPriority = model.reduce(function (p, cf) {\n        return Math.max.apply(Math, [p].concat(_toConsumableArray(cf.rules.map(function (rule) {\n          return rule.priority || 0;\n        }))));\n      }, 1);\n      model.forEach(function (cf) {\n        cf.rules.forEach(function (rule) {\n          if (!rule.priority) {\n            rule.priority = nextPriority++;\n          }\n\n          if (rule.style) {\n            rule.dxfId = options.styles.addDxfStyle(rule.style);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this2 = this;\n\n      model.forEach(function (cf) {\n        _this2.cfXform.render(xmlStream, cf);\n      });\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case 'conditionalFormatting':\n          this.parser = this.cfXform;\n          this.parser.parseOpen(node);\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.model.push(this.parser.model);\n          this.parser = undefined;\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model, options) {\n      model.forEach(function (cf) {\n        cf.rules.forEach(function (rule) {\n          if (rule.dxfId !== undefined) {\n            rule.style = options.styles.getDxfStyle(rule.dxfId);\n            delete rule.dxfId;\n          }\n        });\n      });\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'conditionalFormatting';\n    }\n  }]);\n\n  return ConditionalFormattingsXform;\n}(BaseXform);\n\nmodule.exports = ConditionalFormattingsXform;","map":{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf/conditional-formattings-xform.js"],"names":["BaseXform","require","ConditionalFormattingXform","ConditionalFormattingsXform","model","options","nextPriority","Math","rule","cf","xmlStream","node","text","name","module"],"mappings":"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","sourcesContent":["const BaseXform = require('../../base-xform');\r\n\r\nconst ConditionalFormattingXform = require('./conditional-formatting-xform');\r\n\r\nclass ConditionalFormattingsXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.cfXform = new ConditionalFormattingXform();\r\n  }\r\n\r\n  get tag() {\r\n    return 'conditionalFormatting';\r\n  }\r\n\r\n  reset() {\r\n    this.model = [];\r\n  }\r\n\r\n  prepare(model, options) {\r\n    // ensure each rule has a priority value\r\n    let nextPriority = model.reduce(\r\n      (p, cf) => Math.max(p, ...cf.rules.map(rule => rule.priority || 0)),\r\n      1\r\n    );\r\n    model.forEach(cf => {\r\n      cf.rules.forEach(rule => {\r\n        if (!rule.priority) {\r\n          rule.priority = nextPriority++;\r\n        }\r\n\r\n        if (rule.style) {\r\n          rule.dxfId = options.styles.addDxfStyle(rule.style);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    model.forEach(cf => {\r\n      this.cfXform.render(xmlStream, cf);\r\n    });\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n\r\n    switch (node.name) {\r\n      case 'conditionalFormatting':\r\n        this.parser = this.cfXform;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.push(this.parser.model);\r\n        this.parser = undefined;\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    model.forEach(cf => {\r\n      cf.rules.forEach(rule => {\r\n        if (rule.dxfId !== undefined) {\r\n          rule.style = options.styles.getDxfStyle(rule.dxfId);\r\n          delete rule.dxfId;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = ConditionalFormattingsXform;\r\n"]},"metadata":{},"sourceType":"script"}