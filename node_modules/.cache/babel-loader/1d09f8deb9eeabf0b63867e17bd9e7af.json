{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar TextXform = require('./text-xform');\n\nvar FontXform = require('../style/font-xform');\n\nvar BaseXform = require('../base-xform'); // <r>\n//   <rPr>\n//     <sz val=\"11\"/>\n//     <color theme=\"1\" tint=\"5\"/>\n//     <rFont val=\"Calibri\"/>\n//     <family val=\"2\"/>\n//     <scheme val=\"minor\"/>\n//   </rPr>\n//   <t xml:space=\"preserve\"> is </t>\n// </r>\n\n\nvar RichTextXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(RichTextXform, _BaseXform);\n\n  var _super = _createSuper(RichTextXform);\n\n  function RichTextXform(model) {\n    var _this;\n\n    _classCallCheck(this, RichTextXform);\n\n    _this = _super.call(this);\n    _this.model = model;\n    return _this;\n  }\n\n  _createClass(RichTextXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      model = model || this.model;\n      xmlStream.openNode('r');\n\n      if (model.font) {\n        this.fontXform.render(xmlStream, model.font);\n      }\n\n      this.textXform.render(xmlStream, model.text);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case 'r':\n          this.model = {};\n          return true;\n\n        case 't':\n          this.parser = this.textXform;\n          this.parser.parseOpen(node);\n          return true;\n\n        case 'rPr':\n          this.parser = this.fontXform;\n          this.parser.parseOpen(node);\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      switch (name) {\n        case 'r':\n          return false;\n\n        case 't':\n          this.model.text = this.parser.model;\n          this.parser = undefined;\n          return true;\n\n        case 'rPr':\n          this.model.font = this.parser.model;\n          this.parser = undefined;\n          return true;\n\n        default:\n          if (this.parser) {\n            this.parser.parseClose(name);\n          }\n\n          return true;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'r';\n    }\n  }, {\n    key: \"textXform\",\n    get: function get() {\n      return this._textXform || (this._textXform = new TextXform());\n    }\n  }, {\n    key: \"fontXform\",\n    get: function get() {\n      return this._fontXform || (this._fontXform = new FontXform(RichTextXform.FONT_OPTIONS));\n    }\n  }]);\n\n  return RichTextXform;\n}(BaseXform);\n\nRichTextXform.FONT_OPTIONS = {\n  tagName: 'rPr',\n  fontNameTag: 'rFont'\n};\nmodule.exports = RichTextXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/rich-text-xform.js"],"names":["TextXform","require","FontXform","BaseXform","RichTextXform","xmlStream","model","node","text","name","tagName","fontNameTag","module"],"mappings":"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","sourcesContent":["const TextXform = require('./text-xform');\r\nconst FontXform = require('../style/font-xform');\r\n\r\nconst BaseXform = require('../base-xform');\r\n\r\n// <r>\r\n//   <rPr>\r\n//     <sz val=\"11\"/>\r\n//     <color theme=\"1\" tint=\"5\"/>\r\n//     <rFont val=\"Calibri\"/>\r\n//     <family val=\"2\"/>\r\n//     <scheme val=\"minor\"/>\r\n//   </rPr>\r\n//   <t xml:space=\"preserve\"> is </t>\r\n// </r>\r\n\r\nclass RichTextXform extends BaseXform {\r\n  constructor(model) {\r\n    super();\r\n\r\n    this.model = model;\r\n  }\r\n\r\n  get tag() {\r\n    return 'r';\r\n  }\r\n\r\n  get textXform() {\r\n    return this._textXform || (this._textXform = new TextXform());\r\n  }\r\n\r\n  get fontXform() {\r\n    return this._fontXform || (this._fontXform = new FontXform(RichTextXform.FONT_OPTIONS));\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    model = model || this.model;\r\n\r\n    xmlStream.openNode('r');\r\n    if (model.font) {\r\n      this.fontXform.render(xmlStream, model.font);\r\n    }\r\n    this.textXform.render(xmlStream, model.text);\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'r':\r\n        this.model = {};\r\n        return true;\r\n      case 't':\r\n        this.parser = this.textXform;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      case 'rPr':\r\n        this.parser = this.fontXform;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case 'r':\r\n        return false;\r\n      case 't':\r\n        this.model.text = this.parser.model;\r\n        this.parser = undefined;\r\n        return true;\r\n      case 'rPr':\r\n        this.model.font = this.parser.model;\r\n        this.parser = undefined;\r\n        return true;\r\n      default:\r\n        if (this.parser) {\r\n          this.parser.parseClose(name);\r\n        }\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nRichTextXform.FONT_OPTIONS = {\r\n  tagName: 'rPr',\r\n  fontNameTag: 'rFont',\r\n};\r\n\r\nmodule.exports = RichTextXform;\r\n"]},"metadata":{},"sourceType":"script"}