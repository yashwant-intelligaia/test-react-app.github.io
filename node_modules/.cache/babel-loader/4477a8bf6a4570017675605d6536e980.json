{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar TextXform = require('./text-xform');\n\nvar RichTextXform = require('./rich-text-xform');\n\nvar PhoneticTextXform = require('./phonetic-text-xform');\n\nvar BaseXform = require('../base-xform'); // <si>\n//   <r></r><r></r>...\n// </si>\n// <si>\n//   <t></t>\n// </si>\n\n\nvar SharedStringXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(SharedStringXform, _BaseXform);\n\n  var _super = _createSuper(SharedStringXform);\n\n  function SharedStringXform(model) {\n    var _this;\n\n    _classCallCheck(this, SharedStringXform);\n\n    _this = _super.call(this);\n    _this.model = model;\n    _this.map = {\n      r: new RichTextXform(),\n      t: new TextXform(),\n      rPh: new PhoneticTextXform()\n    };\n    return _this;\n  }\n\n  _createClass(SharedStringXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this2 = this;\n\n      xmlStream.openNode(this.tag);\n\n      if (model && model.hasOwnProperty('richText') && model.richText) {\n        if (model.richText.length) {\n          model.richText.forEach(function (text) {\n            _this2.map.r.render(xmlStream, text);\n          });\n        } else {\n          this.map.t.render(xmlStream, '');\n        }\n      } else if (model !== undefined && model !== null) {\n        this.map.t.render(xmlStream, model);\n      }\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      var name = node.name;\n\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      if (name === this.tag) {\n        this.model = {};\n        return true;\n      }\n\n      this.parser = this.map[name];\n\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          switch (name) {\n            case 'r':\n              {\n                var rt = this.model.richText;\n\n                if (!rt) {\n                  rt = this.model.richText = [];\n                }\n\n                rt.push(this.parser.model);\n                break;\n              }\n\n            case 't':\n              this.model = this.parser.model;\n              break;\n\n            default:\n              break;\n          }\n\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case this.tag:\n          return false;\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'si';\n    }\n  }]);\n\n  return SharedStringXform;\n}(BaseXform);\n\nmodule.exports = SharedStringXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/shared-string-xform.js"],"names":["TextXform","require","RichTextXform","PhoneticTextXform","BaseXform","SharedStringXform","r","t","rPh","xmlStream","model","node","name","text","rt","module"],"mappings":"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","sourcesContent":["const TextXform = require('./text-xform');\r\nconst RichTextXform = require('./rich-text-xform');\r\nconst PhoneticTextXform = require('./phonetic-text-xform');\r\n\r\nconst BaseXform = require('../base-xform');\r\n\r\n// <si>\r\n//   <r></r><r></r>...\r\n// </si>\r\n// <si>\r\n//   <t></t>\r\n// </si>\r\n\r\nclass SharedStringXform extends BaseXform {\r\n  constructor(model) {\r\n    super();\r\n\r\n    this.model = model;\r\n\r\n    this.map = {\r\n      r: new RichTextXform(),\r\n      t: new TextXform(),\r\n      rPh: new PhoneticTextXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'si';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag);\r\n    if (model && model.hasOwnProperty('richText') && model.richText) {\r\n      if (model.richText.length) {\r\n        model.richText.forEach(text => {\r\n          this.map.r.render(xmlStream, text);\r\n        });\r\n      } else {\r\n        this.map.t.render(xmlStream, '');\r\n      }\r\n    } else if (model !== undefined && model !== null) {\r\n      this.map.t.render(xmlStream, model);\r\n    }\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    const {name} = node;\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    if (name === this.tag) {\r\n      this.model = {};\r\n      return true;\r\n    }\r\n    this.parser = this.map[name];\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        switch (name) {\r\n          case 'r': {\r\n            let rt = this.model.richText;\r\n            if (!rt) {\r\n              rt = this.model.richText = [];\r\n            }\r\n            rt.push(this.parser.model);\r\n            break;\r\n          }\r\n          case 't':\r\n            this.model = this.parser.model;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = SharedStringXform;\r\n"]},"metadata":{},"sourceType":"script"}