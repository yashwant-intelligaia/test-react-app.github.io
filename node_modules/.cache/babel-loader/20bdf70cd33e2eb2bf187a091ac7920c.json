{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar _ = require('../../../utils/under-dash');\n\nvar colCache = require('../../../utils/col-cache');\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar RelType = require('../../rel-type');\n\nvar Merges = require('./merges');\n\nvar BaseXform = require('../base-xform');\n\nvar ListXform = require('../list-xform');\n\nvar RowXform = require('./row-xform');\n\nvar ColXform = require('./col-xform');\n\nvar DimensionXform = require('./dimension-xform');\n\nvar HyperlinkXform = require('./hyperlink-xform');\n\nvar MergeCellXform = require('./merge-cell-xform');\n\nvar DataValidationsXform = require('./data-validations-xform');\n\nvar SheetPropertiesXform = require('./sheet-properties-xform');\n\nvar SheetFormatPropertiesXform = require('./sheet-format-properties-xform');\n\nvar SheetViewXform = require('./sheet-view-xform');\n\nvar SheetProtectionXform = require('./sheet-protection-xform');\n\nvar PageMarginsXform = require('./page-margins-xform');\n\nvar PageSetupXform = require('./page-setup-xform');\n\nvar PrintOptionsXform = require('./print-options-xform');\n\nvar AutoFilterXform = require('./auto-filter-xform');\n\nvar PictureXform = require('./picture-xform');\n\nvar DrawingXform = require('./drawing-xform');\n\nvar TablePartXform = require('./table-part-xform');\n\nvar RowBreaksXform = require('./row-breaks-xform');\n\nvar HeaderFooterXform = require('./header-footer-xform');\n\nvar ConditionalFormattingsXform = require('./cf/conditional-formattings-xform');\n\nvar ExtListXform = require('./ext-lst-xform');\n\nvar mergeRule = function mergeRule(rule, extRule) {\n  Object.keys(extRule).forEach(function (key) {\n    var value = rule[key];\n    var extValue = extRule[key];\n\n    if (value === undefined && extValue !== undefined) {\n      rule[key] = extValue;\n    }\n  });\n};\n\nvar mergeConditionalFormattings = function mergeConditionalFormattings(model, extModel) {\n  // conditional formattings are rendered in worksheet.conditionalFormatting and also in\n  // worksheet.extLst.ext.x14:conditionalFormattings\n  // some (e.g. dataBar) are even spread across both!\n  if (!extModel || !extModel.length) {\n    return model;\n  }\n\n  if (!model || !model.length) {\n    return extModel;\n  } // index model rules by x14Id\n\n\n  var cfMap = {};\n  var ruleMap = {};\n  model.forEach(function (cf) {\n    cfMap[cf.ref] = cf;\n    cf.rules.forEach(function (rule) {\n      var x14Id = rule.x14Id;\n\n      if (x14Id) {\n        ruleMap[x14Id] = rule;\n      }\n    });\n  });\n  extModel.forEach(function (extCf) {\n    extCf.rules.forEach(function (extRule) {\n      var rule = ruleMap[extRule.x14Id];\n\n      if (rule) {\n        // merge with matching rule\n        mergeRule(rule, extRule);\n      } else if (cfMap[extCf.ref]) {\n        // reuse existing cf ref\n        cfMap[extCf.ref].rules.push(extRule);\n      } else {\n        // create new cf\n        model.push({\n          ref: extCf.ref,\n          rules: [extRule]\n        });\n      }\n    });\n  }); // need to cope with rules in extModel that don't exist in model\n\n  return model;\n};\n\nvar WorkSheetXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(WorkSheetXform, _BaseXform);\n\n  var _super = _createSuper(WorkSheetXform);\n\n  function WorkSheetXform(options) {\n    var _this;\n\n    _classCallCheck(this, WorkSheetXform);\n\n    _this = _super.call(this);\n\n    var _ref = options || {},\n        maxRows = _ref.maxRows,\n        maxCols = _ref.maxCols;\n\n    _this.map = {\n      sheetPr: new SheetPropertiesXform(),\n      dimension: new DimensionXform(),\n      sheetViews: new ListXform({\n        tag: 'sheetViews',\n        count: false,\n        childXform: new SheetViewXform()\n      }),\n      sheetFormatPr: new SheetFormatPropertiesXform(),\n      cols: new ListXform({\n        tag: 'cols',\n        count: false,\n        childXform: new ColXform()\n      }),\n      sheetData: new ListXform({\n        tag: 'sheetData',\n        count: false,\n        empty: true,\n        childXform: new RowXform({\n          maxItems: maxCols\n        }),\n        maxItems: maxRows\n      }),\n      autoFilter: new AutoFilterXform(),\n      mergeCells: new ListXform({\n        tag: 'mergeCells',\n        count: true,\n        childXform: new MergeCellXform()\n      }),\n      rowBreaks: new RowBreaksXform(),\n      hyperlinks: new ListXform({\n        tag: 'hyperlinks',\n        count: false,\n        childXform: new HyperlinkXform()\n      }),\n      pageMargins: new PageMarginsXform(),\n      dataValidations: new DataValidationsXform(),\n      pageSetup: new PageSetupXform(),\n      headerFooter: new HeaderFooterXform(),\n      printOptions: new PrintOptionsXform(),\n      picture: new PictureXform(),\n      drawing: new DrawingXform(),\n      sheetProtection: new SheetProtectionXform(),\n      tableParts: new ListXform({\n        tag: 'tableParts',\n        count: true,\n        childXform: new TablePartXform()\n      }),\n      conditionalFormatting: new ConditionalFormattingsXform(),\n      extLst: new ExtListXform()\n    };\n    return _this;\n  }\n\n  _createClass(WorkSheetXform, [{\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      var _this2 = this;\n\n      options.merges = new Merges();\n      model.hyperlinks = options.hyperlinks = [];\n      model.comments = options.comments = [];\n      options.formulae = {};\n      options.siFormulae = 0;\n      this.map.cols.prepare(model.cols, options);\n      this.map.sheetData.prepare(model.rows, options);\n      this.map.conditionalFormatting.prepare(model.conditionalFormattings, options);\n      model.mergeCells = options.merges.mergeCells; // prepare relationships\n\n      var rels = model.rels = [];\n\n      function nextRid(r) {\n        return \"rId\".concat(r.length + 1);\n      }\n\n      model.hyperlinks.forEach(function (hyperlink) {\n        var rId = nextRid(rels);\n        hyperlink.rId = rId;\n        rels.push({\n          Id: rId,\n          Type: RelType.Hyperlink,\n          Target: hyperlink.target,\n          TargetMode: 'External'\n        });\n      }); // prepare comment relationships\n\n      if (model.comments.length > 0) {\n        var comment = {\n          Id: nextRid(rels),\n          Type: RelType.Comments,\n          Target: \"../comments\".concat(model.id, \".xml\")\n        };\n        rels.push(comment);\n        var vmlDrawing = {\n          Id: nextRid(rels),\n          Type: RelType.VmlDrawing,\n          Target: \"../drawings/vmlDrawing\".concat(model.id, \".vml\")\n        };\n        rels.push(vmlDrawing);\n        model.comments.forEach(function (item) {\n          item.refAddress = colCache.decodeAddress(item.ref);\n        });\n        options.commentRefs.push({\n          commentName: \"comments\".concat(model.id),\n          vmlDrawing: \"vmlDrawing\".concat(model.id)\n        });\n      }\n\n      var drawingRelsHash = [];\n      var bookImage;\n      model.media.forEach(function (medium) {\n        if (medium.type === 'background') {\n          var rId = nextRid(rels);\n          bookImage = options.media[medium.imageId];\n          rels.push({\n            Id: rId,\n            Type: RelType.Image,\n            Target: \"../media/\".concat(bookImage.name, \".\").concat(bookImage.extension)\n          });\n          model.background = {\n            rId: rId\n          };\n          model.image = options.media[medium.imageId];\n        } else if (medium.type === 'image') {\n          var drawing = model.drawing;\n          bookImage = options.media[medium.imageId];\n\n          if (!drawing) {\n            drawing = model.drawing = {\n              rId: nextRid(rels),\n              name: \"drawing\".concat(++options.drawingsCount),\n              anchors: [],\n              rels: []\n            };\n            options.drawings.push(drawing);\n            rels.push({\n              Id: drawing.rId,\n              Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n              Target: \"../drawings/\".concat(drawing.name, \".xml\")\n            });\n          }\n\n          var rIdImage = _this2.preImageId === medium.imageId ? drawingRelsHash[medium.imageId] : drawingRelsHash[drawing.rels.length];\n\n          if (!rIdImage) {\n            rIdImage = nextRid(drawing.rels);\n            drawingRelsHash[drawing.rels.length] = rIdImage;\n            drawing.rels.push({\n              Id: rIdImage,\n              Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n              Target: \"../media/\".concat(bookImage.name, \".\").concat(bookImage.extension)\n            });\n          }\n\n          var anchor = {\n            picture: {\n              rId: rIdImage\n            },\n            range: medium.range\n          };\n\n          if (medium.hyperlinks && medium.hyperlinks.hyperlink) {\n            var rIdHyperLink = nextRid(drawing.rels);\n            drawingRelsHash[drawing.rels.length] = rIdHyperLink;\n            anchor.picture.hyperlinks = {\n              tooltip: medium.hyperlinks.tooltip,\n              rId: rIdHyperLink\n            };\n            drawing.rels.push({\n              Id: rIdHyperLink,\n              Type: RelType.Hyperlink,\n              Target: medium.hyperlinks.hyperlink,\n              TargetMode: 'External'\n            });\n          }\n\n          _this2.preImageId = medium.imageId;\n          drawing.anchors.push(anchor);\n        }\n      }); // prepare tables\n\n      model.tables.forEach(function (table) {\n        // relationships\n        var rId = nextRid(rels);\n        table.rId = rId;\n        rels.push({\n          Id: rId,\n          Type: RelType.Table,\n          Target: \"../tables/\".concat(table.target)\n        }); // dynamic styles\n\n        table.columns.forEach(function (column) {\n          var style = column.style;\n\n          if (style) {\n            column.dxfId = options.styles.addDxfStyle(style);\n          }\n        });\n      }); // prepare ext items\n\n      this.map.extLst.prepare(model, options);\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n      xmlStream.openNode('worksheet', WorkSheetXform.WORKSHEET_ATTRIBUTES);\n      var sheetFormatPropertiesModel = model.properties ? {\n        defaultRowHeight: model.properties.defaultRowHeight,\n        dyDescent: model.properties.dyDescent,\n        outlineLevelCol: model.properties.outlineLevelCol,\n        outlineLevelRow: model.properties.outlineLevelRow\n      } : undefined;\n\n      if (model.properties && model.properties.defaultColWidth) {\n        sheetFormatPropertiesModel.defaultColWidth = model.properties.defaultColWidth;\n      }\n\n      var sheetPropertiesModel = {\n        outlineProperties: model.properties && model.properties.outlineProperties,\n        tabColor: model.properties && model.properties.tabColor,\n        pageSetup: model.pageSetup && model.pageSetup.fitToPage ? {\n          fitToPage: model.pageSetup.fitToPage\n        } : undefined\n      };\n      var pageMarginsModel = model.pageSetup && model.pageSetup.margins;\n      var printOptionsModel = {\n        showRowColHeaders: model.pageSetup && model.pageSetup.showRowColHeaders,\n        showGridLines: model.pageSetup && model.pageSetup.showGridLines,\n        horizontalCentered: model.pageSetup && model.pageSetup.horizontalCentered,\n        verticalCentered: model.pageSetup && model.pageSetup.verticalCentered\n      };\n      var sheetProtectionModel = model.sheetProtection;\n      this.map.sheetPr.render(xmlStream, sheetPropertiesModel);\n      this.map.dimension.render(xmlStream, model.dimensions);\n      this.map.sheetViews.render(xmlStream, model.views);\n      this.map.sheetFormatPr.render(xmlStream, sheetFormatPropertiesModel);\n      this.map.cols.render(xmlStream, model.cols);\n      this.map.sheetData.render(xmlStream, model.rows);\n      this.map.sheetProtection.render(xmlStream, sheetProtectionModel); // Note: must be after sheetData and before autoFilter\n\n      this.map.autoFilter.render(xmlStream, model.autoFilter);\n      this.map.mergeCells.render(xmlStream, model.mergeCells);\n      this.map.conditionalFormatting.render(xmlStream, model.conditionalFormattings); // Note: must be before dataValidations\n\n      this.map.dataValidations.render(xmlStream, model.dataValidations); // For some reason hyperlinks have to be after the data validations\n\n      this.map.hyperlinks.render(xmlStream, model.hyperlinks);\n      this.map.printOptions.render(xmlStream, printOptionsModel); // Note: must be before pageMargins\n\n      this.map.pageMargins.render(xmlStream, pageMarginsModel);\n      this.map.pageSetup.render(xmlStream, model.pageSetup);\n      this.map.headerFooter.render(xmlStream, model.headerFooter);\n      this.map.rowBreaks.render(xmlStream, model.rowBreaks);\n      this.map.drawing.render(xmlStream, model.drawing); // Note: must be after rowBreaks\n\n      this.map.picture.render(xmlStream, model.background); // Note: must be after drawing\n\n      this.map.tableParts.render(xmlStream, model.tables);\n      this.map.extLst.render(xmlStream, model);\n\n      if (model.rels) {\n        // add a <legacyDrawing /> node for each comment\n        model.rels.forEach(function (rel) {\n          if (rel.Type === RelType.VmlDrawing) {\n            xmlStream.leafNode('legacyDrawing', {\n              'r:id': rel.Id\n            });\n          }\n        });\n      }\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      if (node.name === 'worksheet') {\n        _.each(this.map, function (xform) {\n          xform.reset();\n        });\n\n        return true;\n      }\n\n      this.parser = this.map[node.name];\n\n      if (this.parser) {\n        this.parser.parseOpen(node);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case 'worksheet':\n          {\n            var properties = this.map.sheetFormatPr.model || {};\n\n            if (this.map.sheetPr.model && this.map.sheetPr.model.tabColor) {\n              properties.tabColor = this.map.sheetPr.model.tabColor;\n            }\n\n            if (this.map.sheetPr.model && this.map.sheetPr.model.outlineProperties) {\n              properties.outlineProperties = this.map.sheetPr.model.outlineProperties;\n            }\n\n            var sheetProperties = {\n              fitToPage: this.map.sheetPr.model && this.map.sheetPr.model.pageSetup && this.map.sheetPr.model.pageSetup.fitToPage || false,\n              margins: this.map.pageMargins.model\n            };\n            var pageSetup = Object.assign(sheetProperties, this.map.pageSetup.model, this.map.printOptions.model);\n            var conditionalFormattings = mergeConditionalFormattings(this.map.conditionalFormatting.model, this.map.extLst.model && this.map.extLst.model['x14:conditionalFormattings']);\n            this.model = {\n              dimensions: this.map.dimension.model,\n              cols: this.map.cols.model,\n              rows: this.map.sheetData.model,\n              mergeCells: this.map.mergeCells.model,\n              hyperlinks: this.map.hyperlinks.model,\n              dataValidations: this.map.dataValidations.model,\n              properties: properties,\n              views: this.map.sheetViews.model,\n              pageSetup: pageSetup,\n              headerFooter: this.map.headerFooter.model,\n              background: this.map.picture.model,\n              drawing: this.map.drawing.model,\n              tables: this.map.tableParts.model,\n              conditionalFormattings: conditionalFormattings\n            };\n\n            if (this.map.autoFilter.model) {\n              this.model.autoFilter = this.map.autoFilter.model;\n            }\n\n            if (this.map.sheetProtection.model) {\n              this.model.sheetProtection = this.map.sheetProtection.model;\n            }\n\n            return false;\n          }\n\n        default:\n          // not quite sure how we get here!\n          return true;\n      }\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model, options) {\n      // options.merges = new Merges();\n      // options.merges.reconcile(model.mergeCells, model.rows);\n      var rels = (model.relationships || []).reduce(function (h, rel) {\n        h[rel.Id] = rel;\n\n        if (rel.Type === RelType.Comments) {\n          model.comments = options.comments[rel.Target].comments;\n        }\n\n        if (rel.Type === RelType.VmlDrawing && model.comments && model.comments.length) {\n          var vmlComment = options.vmlDrawings[rel.Target].comments;\n          model.comments.forEach(function (comment, index) {\n            comment.note = Object.assign({}, comment.note, vmlComment[index]);\n          });\n        }\n\n        return h;\n      }, {});\n      options.commentsMap = (model.comments || []).reduce(function (h, comment) {\n        if (comment.ref) {\n          h[comment.ref] = comment;\n        }\n\n        return h;\n      }, {});\n      options.hyperlinkMap = (model.hyperlinks || []).reduce(function (h, hyperlink) {\n        if (hyperlink.rId) {\n          h[hyperlink.address] = rels[hyperlink.rId].Target;\n        }\n\n        return h;\n      }, {});\n      options.formulae = {}; // compact the rows and cells\n\n      model.rows = model.rows && model.rows.filter(Boolean) || [];\n      model.rows.forEach(function (row) {\n        row.cells = row.cells && row.cells.filter(Boolean) || [];\n      });\n      this.map.cols.reconcile(model.cols, options);\n      this.map.sheetData.reconcile(model.rows, options);\n      this.map.conditionalFormatting.reconcile(model.conditionalFormattings, options);\n      model.media = [];\n\n      if (model.drawing) {\n        var drawingRel = rels[model.drawing.rId];\n        var match = drawingRel.Target.match(/\\/drawings\\/([a-zA-Z0-9]+)[.][a-zA-Z]{3,4}$/);\n\n        if (match) {\n          var drawingName = match[1];\n          var drawing = options.drawings[drawingName];\n          drawing.anchors.forEach(function (anchor) {\n            if (anchor.medium) {\n              var image = {\n                type: 'image',\n                imageId: anchor.medium.index,\n                range: anchor.range,\n                hyperlinks: anchor.picture.hyperlinks\n              };\n              model.media.push(image);\n            }\n          });\n        }\n      }\n\n      var backgroundRel = model.background && rels[model.background.rId];\n\n      if (backgroundRel) {\n        var target = backgroundRel.Target.split('/media/')[1];\n        var imageId = options.mediaIndex && options.mediaIndex[target];\n\n        if (imageId !== undefined) {\n          model.media.push({\n            type: 'background',\n            imageId: imageId\n          });\n        }\n      }\n\n      model.tables = (model.tables || []).map(function (tablePart) {\n        var rel = rels[tablePart.rId];\n        return options.tables[rel.Target];\n      });\n      delete model.relationships;\n      delete model.hyperlinks;\n      delete model.comments;\n    }\n  }]);\n\n  return WorkSheetXform;\n}(BaseXform);\n\nWorkSheetXform.WORKSHEET_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n  'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n  'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n  'mc:Ignorable': 'x14ac',\n  'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac'\n};\nmodule.exports = WorkSheetXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/worksheet-xform.js"],"names":["_","require","colCache","XmlStream","RelType","Merges","BaseXform","ListXform","RowXform","ColXform","DimensionXform","HyperlinkXform","MergeCellXform","DataValidationsXform","SheetPropertiesXform","SheetFormatPropertiesXform","SheetViewXform","SheetProtectionXform","PageMarginsXform","PageSetupXform","PrintOptionsXform","AutoFilterXform","PictureXform","DrawingXform","TablePartXform","RowBreaksXform","HeaderFooterXform","ConditionalFormattingsXform","ExtListXform","mergeRule","Object","value","rule","extValue","extRule","mergeConditionalFormattings","extModel","model","cfMap","ruleMap","cf","x14Id","extCf","ref","rules","WorkSheetXform","maxRows","maxCols","options","sheetPr","dimension","sheetViews","tag","count","childXform","sheetFormatPr","cols","sheetData","empty","maxItems","autoFilter","mergeCells","rowBreaks","hyperlinks","pageMargins","dataValidations","pageSetup","headerFooter","printOptions","picture","drawing","sheetProtection","tableParts","conditionalFormatting","extLst","rels","r","rId","nextRid","hyperlink","Id","Type","Target","TargetMode","comment","vmlDrawing","item","commentName","drawingRelsHash","medium","bookImage","name","anchors","rIdImage","anchor","range","rIdHyperLink","tooltip","table","style","column","xmlStream","sheetFormatPropertiesModel","defaultRowHeight","dyDescent","outlineLevelCol","outlineLevelRow","sheetPropertiesModel","outlineProperties","tabColor","fitToPage","undefined","pageMarginsModel","printOptionsModel","showRowColHeaders","showGridLines","horizontalCentered","verticalCentered","sheetProtectionModel","rel","node","xform","text","properties","sheetProperties","margins","conditionalFormattings","dimensions","rows","views","background","tables","h","vmlComment","row","drawingRel","match","drawingName","image","type","imageId","backgroundRel","target","tablePart","xmlns","module"],"mappings":"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","sourcesContent":["const _ = require('../../../utils/under-dash');\r\n\r\nconst colCache = require('../../../utils/col-cache');\r\nconst XmlStream = require('../../../utils/xml-stream');\r\n\r\nconst RelType = require('../../rel-type');\r\n\r\nconst Merges = require('./merges');\r\n\r\nconst BaseXform = require('../base-xform');\r\nconst ListXform = require('../list-xform');\r\nconst RowXform = require('./row-xform');\r\nconst ColXform = require('./col-xform');\r\nconst DimensionXform = require('./dimension-xform');\r\nconst HyperlinkXform = require('./hyperlink-xform');\r\nconst MergeCellXform = require('./merge-cell-xform');\r\nconst DataValidationsXform = require('./data-validations-xform');\r\nconst SheetPropertiesXform = require('./sheet-properties-xform');\r\nconst SheetFormatPropertiesXform = require('./sheet-format-properties-xform');\r\nconst SheetViewXform = require('./sheet-view-xform');\r\nconst SheetProtectionXform = require('./sheet-protection-xform');\r\nconst PageMarginsXform = require('./page-margins-xform');\r\nconst PageSetupXform = require('./page-setup-xform');\r\nconst PrintOptionsXform = require('./print-options-xform');\r\nconst AutoFilterXform = require('./auto-filter-xform');\r\nconst PictureXform = require('./picture-xform');\r\nconst DrawingXform = require('./drawing-xform');\r\nconst TablePartXform = require('./table-part-xform');\r\nconst RowBreaksXform = require('./row-breaks-xform');\r\nconst HeaderFooterXform = require('./header-footer-xform');\r\nconst ConditionalFormattingsXform = require('./cf/conditional-formattings-xform');\r\nconst ExtListXform = require('./ext-lst-xform');\r\n\r\nconst mergeRule = (rule, extRule) => {\r\n  Object.keys(extRule).forEach(key => {\r\n    const value = rule[key];\r\n    const extValue = extRule[key];\r\n    if (value === undefined && extValue !== undefined) {\r\n      rule[key] = extValue;\r\n    }\r\n  });\r\n};\r\n\r\nconst mergeConditionalFormattings = (model, extModel) => {\r\n  // conditional formattings are rendered in worksheet.conditionalFormatting and also in\r\n  // worksheet.extLst.ext.x14:conditionalFormattings\r\n  // some (e.g. dataBar) are even spread across both!\r\n  if (!extModel || !extModel.length) {\r\n    return model;\r\n  }\r\n  if (!model || !model.length) {\r\n    return extModel;\r\n  }\r\n\r\n  // index model rules by x14Id\r\n  const cfMap = {};\r\n  const ruleMap = {};\r\n  model.forEach(cf => {\r\n    cfMap[cf.ref] = cf;\r\n    cf.rules.forEach(rule => {\r\n      const {x14Id} = rule;\r\n      if (x14Id) {\r\n        ruleMap[x14Id] = rule;\r\n      }\r\n    });\r\n  });\r\n\r\n  extModel.forEach(extCf => {\r\n    extCf.rules.forEach(extRule => {\r\n      const rule = ruleMap[extRule.x14Id];\r\n      if (rule) {\r\n        // merge with matching rule\r\n        mergeRule(rule, extRule);\r\n      } else if (cfMap[extCf.ref]) {\r\n        // reuse existing cf ref\r\n        cfMap[extCf.ref].rules.push(extRule);\r\n      } else {\r\n        // create new cf\r\n        model.push({\r\n          ref: extCf.ref,\r\n          rules: [extRule],\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // need to cope with rules in extModel that don't exist in model\r\n  return model;\r\n};\r\n\r\nclass WorkSheetXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    const {maxRows, maxCols} = options || {};\r\n    this.map = {\r\n      sheetPr: new SheetPropertiesXform(),\r\n      dimension: new DimensionXform(),\r\n      sheetViews: new ListXform({\r\n        tag: 'sheetViews',\r\n        count: false,\r\n        childXform: new SheetViewXform(),\r\n      }),\r\n      sheetFormatPr: new SheetFormatPropertiesXform(),\r\n      cols: new ListXform({tag: 'cols', count: false, childXform: new ColXform()}),\r\n      sheetData: new ListXform({\r\n        tag: 'sheetData',\r\n        count: false,\r\n        empty: true,\r\n        childXform: new RowXform({maxItems: maxCols}),\r\n        maxItems: maxRows,\r\n      }),\r\n      autoFilter: new AutoFilterXform(),\r\n      mergeCells: new ListXform({tag: 'mergeCells', count: true, childXform: new MergeCellXform()}),\r\n      rowBreaks: new RowBreaksXform(),\r\n      hyperlinks: new ListXform({\r\n        tag: 'hyperlinks',\r\n        count: false,\r\n        childXform: new HyperlinkXform(),\r\n      }),\r\n      pageMargins: new PageMarginsXform(),\r\n      dataValidations: new DataValidationsXform(),\r\n      pageSetup: new PageSetupXform(),\r\n      headerFooter: new HeaderFooterXform(),\r\n      printOptions: new PrintOptionsXform(),\r\n      picture: new PictureXform(),\r\n      drawing: new DrawingXform(),\r\n      sheetProtection: new SheetProtectionXform(),\r\n      tableParts: new ListXform({tag: 'tableParts', count: true, childXform: new TablePartXform()}),\r\n      conditionalFormatting: new ConditionalFormattingsXform(),\r\n      extLst: new ExtListXform(),\r\n    };\r\n  }\r\n\r\n  prepare(model, options) {\r\n    options.merges = new Merges();\r\n    model.hyperlinks = options.hyperlinks = [];\r\n    model.comments = options.comments = [];\r\n\r\n    options.formulae = {};\r\n    options.siFormulae = 0;\r\n    this.map.cols.prepare(model.cols, options);\r\n    this.map.sheetData.prepare(model.rows, options);\r\n    this.map.conditionalFormatting.prepare(model.conditionalFormattings, options);\r\n\r\n    model.mergeCells = options.merges.mergeCells;\r\n\r\n    // prepare relationships\r\n    const rels = (model.rels = []);\r\n\r\n    function nextRid(r) {\r\n      return `rId${r.length + 1}`;\r\n    }\r\n\r\n    model.hyperlinks.forEach(hyperlink => {\r\n      const rId = nextRid(rels);\r\n      hyperlink.rId = rId;\r\n      rels.push({\r\n        Id: rId,\r\n        Type: RelType.Hyperlink,\r\n        Target: hyperlink.target,\r\n        TargetMode: 'External',\r\n      });\r\n    });\r\n\r\n    // prepare comment relationships\r\n    if (model.comments.length > 0) {\r\n      const comment = {\r\n        Id: nextRid(rels),\r\n        Type: RelType.Comments,\r\n        Target: `../comments${model.id}.xml`,\r\n      };\r\n      rels.push(comment);\r\n      const vmlDrawing = {\r\n        Id: nextRid(rels),\r\n        Type: RelType.VmlDrawing,\r\n        Target: `../drawings/vmlDrawing${model.id}.vml`,\r\n      };\r\n      rels.push(vmlDrawing);\r\n\r\n      model.comments.forEach(item => {\r\n        item.refAddress = colCache.decodeAddress(item.ref);\r\n      });\r\n\r\n      options.commentRefs.push({\r\n        commentName: `comments${model.id}`,\r\n        vmlDrawing: `vmlDrawing${model.id}`,\r\n      });\r\n    }\r\n\r\n    const drawingRelsHash = [];\r\n    let bookImage;\r\n    model.media.forEach(medium => {\r\n      if (medium.type === 'background') {\r\n        const rId = nextRid(rels);\r\n        bookImage = options.media[medium.imageId];\r\n        rels.push({\r\n          Id: rId,\r\n          Type: RelType.Image,\r\n          Target: `../media/${bookImage.name}.${bookImage.extension}`,\r\n        });\r\n        model.background = {\r\n          rId,\r\n        };\r\n        model.image = options.media[medium.imageId];\r\n      } else if (medium.type === 'image') {\r\n        let {drawing} = model;\r\n        bookImage = options.media[medium.imageId];\r\n        if (!drawing) {\r\n          drawing = model.drawing = {\r\n            rId: nextRid(rels),\r\n            name: `drawing${++options.drawingsCount}`,\r\n            anchors: [],\r\n            rels: [],\r\n          };\r\n          options.drawings.push(drawing);\r\n          rels.push({\r\n            Id: drawing.rId,\r\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\r\n            Target: `../drawings/${drawing.name}.xml`,\r\n          });\r\n        }\r\n        let rIdImage =\r\n          this.preImageId === medium.imageId\r\n            ? drawingRelsHash[medium.imageId]\r\n            : drawingRelsHash[drawing.rels.length];\r\n        if (!rIdImage) {\r\n          rIdImage = nextRid(drawing.rels);\r\n          drawingRelsHash[drawing.rels.length] = rIdImage;\r\n          drawing.rels.push({\r\n            Id: rIdImage,\r\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\r\n            Target: `../media/${bookImage.name}.${bookImage.extension}`,\r\n          });\r\n        }\r\n\r\n        const anchor = {\r\n          picture: {\r\n            rId: rIdImage,\r\n          },\r\n          range: medium.range,\r\n        };\r\n        if (medium.hyperlinks && medium.hyperlinks.hyperlink) {\r\n          const rIdHyperLink = nextRid(drawing.rels);\r\n          drawingRelsHash[drawing.rels.length] = rIdHyperLink;\r\n          anchor.picture.hyperlinks = {\r\n            tooltip: medium.hyperlinks.tooltip,\r\n            rId: rIdHyperLink,\r\n          };\r\n          drawing.rels.push({\r\n            Id: rIdHyperLink,\r\n            Type: RelType.Hyperlink,\r\n            Target: medium.hyperlinks.hyperlink,\r\n            TargetMode: 'External',\r\n          });\r\n        }\r\n        this.preImageId = medium.imageId;\r\n        drawing.anchors.push(anchor);\r\n      }\r\n    });\r\n\r\n    // prepare tables\r\n    model.tables.forEach(table => {\r\n      // relationships\r\n      const rId = nextRid(rels);\r\n      table.rId = rId;\r\n      rels.push({\r\n        Id: rId,\r\n        Type: RelType.Table,\r\n        Target: `../tables/${table.target}`,\r\n      });\r\n\r\n      // dynamic styles\r\n      table.columns.forEach(column => {\r\n        const {style} = column;\r\n        if (style) {\r\n          column.dxfId = options.styles.addDxfStyle(style);\r\n        }\r\n      });\r\n    });\r\n\r\n    // prepare ext items\r\n    this.map.extLst.prepare(model, options);\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n    xmlStream.openNode('worksheet', WorkSheetXform.WORKSHEET_ATTRIBUTES);\r\n\r\n    const sheetFormatPropertiesModel = model.properties\r\n      ? {\r\n          defaultRowHeight: model.properties.defaultRowHeight,\r\n          dyDescent: model.properties.dyDescent,\r\n          outlineLevelCol: model.properties.outlineLevelCol,\r\n          outlineLevelRow: model.properties.outlineLevelRow,\r\n        }\r\n      : undefined;\r\n    if (model.properties && model.properties.defaultColWidth) {\r\n      sheetFormatPropertiesModel.defaultColWidth = model.properties.defaultColWidth;\r\n    }\r\n    const sheetPropertiesModel = {\r\n      outlineProperties: model.properties && model.properties.outlineProperties,\r\n      tabColor: model.properties && model.properties.tabColor,\r\n      pageSetup:\r\n        model.pageSetup && model.pageSetup.fitToPage\r\n          ? {\r\n              fitToPage: model.pageSetup.fitToPage,\r\n            }\r\n          : undefined,\r\n    };\r\n    const pageMarginsModel = model.pageSetup && model.pageSetup.margins;\r\n    const printOptionsModel = {\r\n      showRowColHeaders: model.pageSetup && model.pageSetup.showRowColHeaders,\r\n      showGridLines: model.pageSetup && model.pageSetup.showGridLines,\r\n      horizontalCentered: model.pageSetup && model.pageSetup.horizontalCentered,\r\n      verticalCentered: model.pageSetup && model.pageSetup.verticalCentered,\r\n    };\r\n    const sheetProtectionModel = model.sheetProtection;\r\n\r\n    this.map.sheetPr.render(xmlStream, sheetPropertiesModel);\r\n    this.map.dimension.render(xmlStream, model.dimensions);\r\n    this.map.sheetViews.render(xmlStream, model.views);\r\n    this.map.sheetFormatPr.render(xmlStream, sheetFormatPropertiesModel);\r\n    this.map.cols.render(xmlStream, model.cols);\r\n    this.map.sheetData.render(xmlStream, model.rows);\r\n    this.map.sheetProtection.render(xmlStream, sheetProtectionModel); // Note: must be after sheetData and before autoFilter\r\n    this.map.autoFilter.render(xmlStream, model.autoFilter);\r\n    this.map.mergeCells.render(xmlStream, model.mergeCells);\r\n    this.map.conditionalFormatting.render(xmlStream, model.conditionalFormattings); // Note: must be before dataValidations\r\n    this.map.dataValidations.render(xmlStream, model.dataValidations);\r\n\r\n    // For some reason hyperlinks have to be after the data validations\r\n    this.map.hyperlinks.render(xmlStream, model.hyperlinks);\r\n\r\n    this.map.printOptions.render(xmlStream, printOptionsModel); // Note: must be before pageMargins\r\n    this.map.pageMargins.render(xmlStream, pageMarginsModel);\r\n    this.map.pageSetup.render(xmlStream, model.pageSetup);\r\n    this.map.headerFooter.render(xmlStream, model.headerFooter);\r\n    this.map.rowBreaks.render(xmlStream, model.rowBreaks);\r\n    this.map.drawing.render(xmlStream, model.drawing); // Note: must be after rowBreaks\r\n    this.map.picture.render(xmlStream, model.background); // Note: must be after drawing\r\n    this.map.tableParts.render(xmlStream, model.tables);\r\n\r\n    this.map.extLst.render(xmlStream, model);\r\n\r\n    if (model.rels) {\r\n      // add a <legacyDrawing /> node for each comment\r\n      model.rels.forEach(rel => {\r\n        if (rel.Type === RelType.VmlDrawing) {\r\n          xmlStream.leafNode('legacyDrawing', {'r:id': rel.Id});\r\n        }\r\n      });\r\n    }\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n\r\n    if (node.name === 'worksheet') {\r\n      _.each(this.map, xform => {\r\n        xform.reset();\r\n      });\r\n      return true;\r\n    }\r\n\r\n    this.parser = this.map[node.name];\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case 'worksheet': {\r\n        const properties = this.map.sheetFormatPr.model || {};\r\n        if (this.map.sheetPr.model && this.map.sheetPr.model.tabColor) {\r\n          properties.tabColor = this.map.sheetPr.model.tabColor;\r\n        }\r\n        if (this.map.sheetPr.model && this.map.sheetPr.model.outlineProperties) {\r\n          properties.outlineProperties = this.map.sheetPr.model.outlineProperties;\r\n        }\r\n        const sheetProperties = {\r\n          fitToPage:\r\n            (this.map.sheetPr.model &&\r\n              this.map.sheetPr.model.pageSetup &&\r\n              this.map.sheetPr.model.pageSetup.fitToPage) ||\r\n            false,\r\n          margins: this.map.pageMargins.model,\r\n        };\r\n        const pageSetup = Object.assign(\r\n          sheetProperties,\r\n          this.map.pageSetup.model,\r\n          this.map.printOptions.model\r\n        );\r\n        const conditionalFormattings = mergeConditionalFormattings(\r\n          this.map.conditionalFormatting.model,\r\n          this.map.extLst.model && this.map.extLst.model['x14:conditionalFormattings']\r\n        );\r\n        this.model = {\r\n          dimensions: this.map.dimension.model,\r\n          cols: this.map.cols.model,\r\n          rows: this.map.sheetData.model,\r\n          mergeCells: this.map.mergeCells.model,\r\n          hyperlinks: this.map.hyperlinks.model,\r\n          dataValidations: this.map.dataValidations.model,\r\n          properties,\r\n          views: this.map.sheetViews.model,\r\n          pageSetup,\r\n          headerFooter: this.map.headerFooter.model,\r\n          background: this.map.picture.model,\r\n          drawing: this.map.drawing.model,\r\n          tables: this.map.tableParts.model,\r\n          conditionalFormattings,\r\n        };\r\n\r\n        if (this.map.autoFilter.model) {\r\n          this.model.autoFilter = this.map.autoFilter.model;\r\n        }\r\n        if (this.map.sheetProtection.model) {\r\n          this.model.sheetProtection = this.map.sheetProtection.model;\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      default:\r\n        // not quite sure how we get here!\r\n        return true;\r\n    }\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    // options.merges = new Merges();\r\n    // options.merges.reconcile(model.mergeCells, model.rows);\r\n    const rels = (model.relationships || []).reduce((h, rel) => {\r\n      h[rel.Id] = rel;\r\n      if (rel.Type === RelType.Comments) {\r\n        model.comments = options.comments[rel.Target].comments;\r\n      }\r\n      if (rel.Type === RelType.VmlDrawing && model.comments && model.comments.length) {\r\n        const vmlComment = options.vmlDrawings[rel.Target].comments;\r\n        model.comments.forEach((comment, index) => {\r\n          comment.note = Object.assign({}, comment.note, vmlComment[index]);\r\n        });\r\n      }\r\n      return h;\r\n    }, {});\r\n    options.commentsMap = (model.comments || []).reduce((h, comment) => {\r\n      if (comment.ref) {\r\n        h[comment.ref] = comment;\r\n      }\r\n      return h;\r\n    }, {});\r\n    options.hyperlinkMap = (model.hyperlinks || []).reduce((h, hyperlink) => {\r\n      if (hyperlink.rId) {\r\n        h[hyperlink.address] = rels[hyperlink.rId].Target;\r\n      }\r\n      return h;\r\n    }, {});\r\n    options.formulae = {};\r\n\r\n    // compact the rows and cells\r\n    model.rows = (model.rows && model.rows.filter(Boolean)) || [];\r\n    model.rows.forEach(row => {\r\n      row.cells = (row.cells && row.cells.filter(Boolean)) || [];\r\n    });\r\n\r\n    this.map.cols.reconcile(model.cols, options);\r\n    this.map.sheetData.reconcile(model.rows, options);\r\n    this.map.conditionalFormatting.reconcile(model.conditionalFormattings, options);\r\n\r\n    model.media = [];\r\n    if (model.drawing) {\r\n      const drawingRel = rels[model.drawing.rId];\r\n      const match = drawingRel.Target.match(/\\/drawings\\/([a-zA-Z0-9]+)[.][a-zA-Z]{3,4}$/);\r\n      if (match) {\r\n        const drawingName = match[1];\r\n        const drawing = options.drawings[drawingName];\r\n        drawing.anchors.forEach(anchor => {\r\n          if (anchor.medium) {\r\n            const image = {\r\n              type: 'image',\r\n              imageId: anchor.medium.index,\r\n              range: anchor.range,\r\n              hyperlinks: anchor.picture.hyperlinks,\r\n            };\r\n            model.media.push(image);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    const backgroundRel = model.background && rels[model.background.rId];\r\n    if (backgroundRel) {\r\n      const target = backgroundRel.Target.split('/media/')[1];\r\n      const imageId = options.mediaIndex && options.mediaIndex[target];\r\n      if (imageId !== undefined) {\r\n        model.media.push({\r\n          type: 'background',\r\n          imageId,\r\n        });\r\n      }\r\n    }\r\n\r\n    model.tables = (model.tables || []).map(tablePart => {\r\n      const rel = rels[tablePart.rId];\r\n      return options.tables[rel.Target];\r\n    });\r\n\r\n    delete model.relationships;\r\n    delete model.hyperlinks;\r\n    delete model.comments;\r\n  }\r\n}\r\n\r\nWorkSheetXform.WORKSHEET_ATTRIBUTES = {\r\n  xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n  'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\r\n  'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\r\n  'mc:Ignorable': 'x14ac',\r\n  'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\r\n};\r\n\r\nmodule.exports = WorkSheetXform;\r\n"]},"metadata":{},"sourceType":"script"}