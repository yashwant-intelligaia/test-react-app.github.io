{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar _ = require('./under-dash');\n\nvar utils = require('./utils'); // constants\n\n\nvar OPEN_ANGLE = '<';\nvar CLOSE_ANGLE = '>';\nvar OPEN_ANGLE_SLASH = '</';\nvar CLOSE_SLASH_ANGLE = '/>';\nvar EQUALS_QUOTE = '=\"';\nvar QUOTE = '\"';\nvar SPACE = ' ';\n\nfunction pushAttribute(xml, name, value) {\n  xml.push(SPACE);\n  xml.push(name);\n  xml.push(EQUALS_QUOTE);\n  xml.push(utils.xmlEncode(value.toString()));\n  xml.push(QUOTE);\n}\n\nfunction pushAttributes(xml, attributes) {\n  if (attributes) {\n    _.each(attributes, function (value, name) {\n      if (value !== undefined) {\n        pushAttribute(xml, name, value);\n      }\n    });\n  }\n}\n\nvar XmlStream = /*#__PURE__*/function () {\n  function XmlStream() {\n    _classCallCheck(this, XmlStream);\n\n    this._xml = [];\n    this._stack = [];\n    this._rollbacks = [];\n  }\n\n  _createClass(XmlStream, [{\n    key: \"openXml\",\n    value: function openXml(docAttributes) {\n      var xml = this._xml; // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n      xml.push('<?xml');\n      pushAttributes(xml, docAttributes);\n      xml.push('?>\\n');\n    }\n  }, {\n    key: \"openNode\",\n    value: function openNode(name, attributes) {\n      var parent = this.tos;\n      var xml = this._xml;\n\n      if (parent && this.open) {\n        xml.push(CLOSE_ANGLE);\n      }\n\n      this._stack.push(name); // start streaming node\n\n\n      xml.push(OPEN_ANGLE);\n      xml.push(name);\n      pushAttributes(xml, attributes);\n      this.leaf = true;\n      this.open = true;\n    }\n  }, {\n    key: \"addAttribute\",\n    value: function addAttribute(name, value) {\n      if (!this.open) {\n        throw new Error('Cannot write attributes to node if it is not open');\n      }\n\n      if (value !== undefined) {\n        pushAttribute(this._xml, name, value);\n      }\n    }\n  }, {\n    key: \"addAttributes\",\n    value: function addAttributes(attrs) {\n      if (!this.open) {\n        throw new Error('Cannot write attributes to node if it is not open');\n      }\n\n      pushAttributes(this._xml, attrs);\n    }\n  }, {\n    key: \"writeText\",\n    value: function writeText(text) {\n      var xml = this._xml;\n\n      if (this.open) {\n        xml.push(CLOSE_ANGLE);\n        this.open = false;\n      }\n\n      this.leaf = false;\n      xml.push(utils.xmlEncode(text.toString()));\n    }\n  }, {\n    key: \"writeXml\",\n    value: function writeXml(xml) {\n      if (this.open) {\n        this._xml.push(CLOSE_ANGLE);\n\n        this.open = false;\n      }\n\n      this.leaf = false;\n\n      this._xml.push(xml);\n    }\n  }, {\n    key: \"closeNode\",\n    value: function closeNode() {\n      var node = this._stack.pop();\n\n      var xml = this._xml;\n\n      if (this.leaf) {\n        xml.push(CLOSE_SLASH_ANGLE);\n      } else {\n        xml.push(OPEN_ANGLE_SLASH);\n        xml.push(node);\n        xml.push(CLOSE_ANGLE);\n      }\n\n      this.open = false;\n      this.leaf = false;\n    }\n  }, {\n    key: \"leafNode\",\n    value: function leafNode(name, attributes, text) {\n      this.openNode(name, attributes);\n\n      if (text !== undefined) {\n        // zeros need to be written\n        this.writeText(text);\n      }\n\n      this.closeNode();\n    }\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      while (this._stack.length) {\n        this.closeNode();\n      }\n    }\n  }, {\n    key: \"addRollback\",\n    value: function addRollback() {\n      this._rollbacks.push({\n        xml: this._xml.length,\n        stack: this._stack.length,\n        leaf: this.leaf,\n        open: this.open\n      });\n\n      return this.cursor;\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      this._rollbacks.pop();\n    }\n  }, {\n    key: \"rollback\",\n    value: function rollback() {\n      var r = this._rollbacks.pop();\n\n      if (this._xml.length > r.xml) {\n        this._xml.splice(r.xml, this._xml.length - r.xml);\n      }\n\n      if (this._stack.length > r.stack) {\n        this._stack.splice(r.stack, this._stack.length - r.stack);\n      }\n\n      this.leaf = r.leaf;\n      this.open = r.open;\n    }\n  }, {\n    key: \"tos\",\n    get: function get() {\n      return this._stack.length ? this._stack[this._stack.length - 1] : undefined;\n    }\n  }, {\n    key: \"cursor\",\n    get: function get() {\n      // handy way to track whether anything has been added\n      return this._xml.length;\n    }\n  }, {\n    key: \"xml\",\n    get: function get() {\n      this.closeAll();\n      return this._xml.join('');\n    }\n  }]);\n\n  return XmlStream;\n}();\n\nXmlStream.StdDocAttributes = {\n  version: '1.0',\n  encoding: 'UTF-8',\n  standalone: 'yes'\n};\nmodule.exports = XmlStream;","map":{"version":3,"sources":["../../../lib/utils/xml-stream.js"],"names":["_","require","utils","OPEN_ANGLE","CLOSE_ANGLE","OPEN_ANGLE_SLASH","CLOSE_SLASH_ANGLE","EQUALS_QUOTE","QUOTE","SPACE","xml","value","pushAttribute","XmlStream","docAttributes","pushAttributes","name","attributes","parent","attrs","text","node","stack","leaf","open","r","version","encoding","standalone","module"],"mappings":"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","sourcesContent":["const _ = require('./under-dash');\r\n\r\nconst utils = require('./utils');\r\n\r\n// constants\r\nconst OPEN_ANGLE = '<';\r\nconst CLOSE_ANGLE = '>';\r\nconst OPEN_ANGLE_SLASH = '</';\r\nconst CLOSE_SLASH_ANGLE = '/>';\r\nconst EQUALS_QUOTE = '=\"';\r\nconst QUOTE = '\"';\r\nconst SPACE = ' ';\r\n\r\nfunction pushAttribute(xml, name, value) {\r\n  xml.push(SPACE);\r\n  xml.push(name);\r\n  xml.push(EQUALS_QUOTE);\r\n  xml.push(utils.xmlEncode(value.toString()));\r\n  xml.push(QUOTE);\r\n}\r\nfunction pushAttributes(xml, attributes) {\r\n  if (attributes) {\r\n    _.each(attributes, (value, name) => {\r\n      if (value !== undefined) {\r\n        pushAttribute(xml, name, value);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nclass XmlStream {\r\n  constructor() {\r\n    this._xml = [];\r\n    this._stack = [];\r\n    this._rollbacks = [];\r\n  }\r\n\r\n  get tos() {\r\n    return this._stack.length ? this._stack[this._stack.length - 1] : undefined;\r\n  }\r\n\r\n  get cursor() {\r\n    // handy way to track whether anything has been added\r\n    return this._xml.length;\r\n  }\r\n\r\n  openXml(docAttributes) {\r\n    const xml = this._xml;\r\n    // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n    xml.push('<?xml');\r\n    pushAttributes(xml, docAttributes);\r\n    xml.push('?>\\n');\r\n  }\r\n\r\n  openNode(name, attributes) {\r\n    const parent = this.tos;\r\n    const xml = this._xml;\r\n    if (parent && this.open) {\r\n      xml.push(CLOSE_ANGLE);\r\n    }\r\n\r\n    this._stack.push(name);\r\n\r\n    // start streaming node\r\n    xml.push(OPEN_ANGLE);\r\n    xml.push(name);\r\n    pushAttributes(xml, attributes);\r\n    this.leaf = true;\r\n    this.open = true;\r\n  }\r\n\r\n  addAttribute(name, value) {\r\n    if (!this.open) {\r\n      throw new Error('Cannot write attributes to node if it is not open');\r\n    }\r\n    if (value !== undefined) {\r\n      pushAttribute(this._xml, name, value);\r\n    }\r\n  }\r\n\r\n  addAttributes(attrs) {\r\n    if (!this.open) {\r\n      throw new Error('Cannot write attributes to node if it is not open');\r\n    }\r\n    pushAttributes(this._xml, attrs);\r\n  }\r\n\r\n  writeText(text) {\r\n    const xml = this._xml;\r\n    if (this.open) {\r\n      xml.push(CLOSE_ANGLE);\r\n      this.open = false;\r\n    }\r\n    this.leaf = false;\r\n    xml.push(utils.xmlEncode(text.toString()));\r\n  }\r\n\r\n  writeXml(xml) {\r\n    if (this.open) {\r\n      this._xml.push(CLOSE_ANGLE);\r\n      this.open = false;\r\n    }\r\n    this.leaf = false;\r\n    this._xml.push(xml);\r\n  }\r\n\r\n  closeNode() {\r\n    const node = this._stack.pop();\r\n    const xml = this._xml;\r\n    if (this.leaf) {\r\n      xml.push(CLOSE_SLASH_ANGLE);\r\n    } else {\r\n      xml.push(OPEN_ANGLE_SLASH);\r\n      xml.push(node);\r\n      xml.push(CLOSE_ANGLE);\r\n    }\r\n    this.open = false;\r\n    this.leaf = false;\r\n  }\r\n\r\n  leafNode(name, attributes, text) {\r\n    this.openNode(name, attributes);\r\n    if (text !== undefined) {\r\n      // zeros need to be written\r\n      this.writeText(text);\r\n    }\r\n    this.closeNode();\r\n  }\r\n\r\n  closeAll() {\r\n    while (this._stack.length) {\r\n      this.closeNode();\r\n    }\r\n  }\r\n\r\n  addRollback() {\r\n    this._rollbacks.push({\r\n      xml: this._xml.length,\r\n      stack: this._stack.length,\r\n      leaf: this.leaf,\r\n      open: this.open,\r\n    });\r\n    return this.cursor;\r\n  }\r\n\r\n  commit() {\r\n    this._rollbacks.pop();\r\n  }\r\n\r\n  rollback() {\r\n    const r = this._rollbacks.pop();\r\n    if (this._xml.length > r.xml) {\r\n      this._xml.splice(r.xml, this._xml.length - r.xml);\r\n    }\r\n    if (this._stack.length > r.stack) {\r\n      this._stack.splice(r.stack, this._stack.length - r.stack);\r\n    }\r\n    this.leaf = r.leaf;\r\n    this.open = r.open;\r\n  }\r\n\r\n  get xml() {\r\n    this.closeAll();\r\n    return this._xml.join('');\r\n  }\r\n}\r\n\r\nXmlStream.StdDocAttributes = {\r\n  version: '1.0',\r\n  encoding: 'UTF-8',\r\n  standalone: 'yes',\r\n};\r\n\r\nmodule.exports = XmlStream;\r\n"]},"metadata":{},"sourceType":"script"}