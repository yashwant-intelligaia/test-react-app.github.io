{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform');\n\nvar VmlShapeXform = require('./vml-shape-xform'); // This class is (currently) single purposed to insert the triangle\n// drawing icons on commented cells\n\n\nvar VmlNotesXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(VmlNotesXform, _BaseXform);\n\n  var _super = _createSuper(VmlNotesXform);\n\n  function VmlNotesXform() {\n    var _this;\n\n    _classCallCheck(this, VmlNotesXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'v:shape': new VmlShapeXform()\n    };\n    return _this;\n  }\n\n  _createClass(VmlNotesXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this2 = this;\n\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n      xmlStream.openNode(this.tag, VmlNotesXform.DRAWING_ATTRIBUTES);\n      xmlStream.openNode('o:shapelayout', {\n        'v:ext': 'edit'\n      });\n      xmlStream.leafNode('o:idmap', {\n        'v:ext': 'edit',\n        data: 1\n      });\n      xmlStream.closeNode();\n      xmlStream.openNode('v:shapetype', {\n        id: '_x0000_t202',\n        coordsize: '21600,21600',\n        'o:spt': 202,\n        path: 'm,l,21600r21600,l21600,xe'\n      });\n      xmlStream.leafNode('v:stroke', {\n        joinstyle: 'miter'\n      });\n      xmlStream.leafNode('v:path', {\n        gradientshapeok: 't',\n        'o:connecttype': 'rect'\n      });\n      xmlStream.closeNode();\n      model.comments.forEach(function (item, index) {\n        _this2.map['v:shape'].render(xmlStream, item, index);\n      });\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case this.tag:\n          this.reset();\n          this.model = {\n            comments: []\n          };\n          break;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n          }\n\n          break;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.model.comments.push(this.parser.model);\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case this.tag:\n          return false;\n\n        default:\n          // could be some unrecognised tags\n          return true;\n      }\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model, options) {\n      var _this3 = this;\n\n      model.anchors.forEach(function (anchor) {\n        if (anchor.br) {\n          _this3.map['xdr:twoCellAnchor'].reconcile(anchor, options);\n        } else {\n          _this3.map['xdr:oneCellAnchor'].reconcile(anchor, options);\n        }\n      });\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'xml';\n    }\n  }]);\n\n  return VmlNotesXform;\n}(BaseXform);\n\nVmlNotesXform.DRAWING_ATTRIBUTES = {\n  'xmlns:v': 'urn:schemas-microsoft-com:vml',\n  'xmlns:o': 'urn:schemas-microsoft-com:office:office',\n  'xmlns:x': 'urn:schemas-microsoft-com:office:excel'\n};\nmodule.exports = VmlNotesXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/comment/vml-notes-xform.js"],"names":["XmlStream","require","BaseXform","VmlShapeXform","VmlNotesXform","xmlStream","model","data","id","coordsize","path","joinstyle","gradientshapeok","node","comments","text","name","options","anchor","module"],"mappings":"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","sourcesContent":["const XmlStream = require('../../../utils/xml-stream');\r\n\r\nconst BaseXform = require('../base-xform');\r\nconst VmlShapeXform = require('./vml-shape-xform');\r\n\r\n// This class is (currently) single purposed to insert the triangle\r\n// drawing icons on commented cells\r\nclass VmlNotesXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n    this.map = {\r\n      'v:shape': new VmlShapeXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'xml';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n    xmlStream.openNode(this.tag, VmlNotesXform.DRAWING_ATTRIBUTES);\r\n\r\n    xmlStream.openNode('o:shapelayout', {'v:ext': 'edit'});\r\n    xmlStream.leafNode('o:idmap', {'v:ext': 'edit', data: 1});\r\n    xmlStream.closeNode();\r\n\r\n    xmlStream.openNode('v:shapetype', {\r\n      id: '_x0000_t202',\r\n      coordsize: '21600,21600',\r\n      'o:spt': 202,\r\n      path: 'm,l,21600r21600,l21600,xe',\r\n    });\r\n    xmlStream.leafNode('v:stroke', {joinstyle: 'miter'});\r\n    xmlStream.leafNode('v:path', {gradientshapeok: 't', 'o:connecttype': 'rect'});\r\n    xmlStream.closeNode();\r\n\r\n    model.comments.forEach((item, index) => {\r\n      this.map['v:shape'].render(xmlStream, item, index);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.reset();\r\n        this.model = {\r\n          comments: [],\r\n        };\r\n        break;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n        }\r\n        break;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.comments.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        // could be some unrecognised tags\r\n        return true;\r\n    }\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    model.anchors.forEach(anchor => {\r\n      if (anchor.br) {\r\n        this.map['xdr:twoCellAnchor'].reconcile(anchor, options);\r\n      } else {\r\n        this.map['xdr:oneCellAnchor'].reconcile(anchor, options);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nVmlNotesXform.DRAWING_ATTRIBUTES = {\r\n  'xmlns:v': 'urn:schemas-microsoft-com:vml',\r\n  'xmlns:o': 'urn:schemas-microsoft-com:office:office',\r\n  'xmlns:x': 'urn:schemas-microsoft-com:office:excel',\r\n};\r\n\r\nmodule.exports = VmlNotesXform;\r\n"]},"metadata":{},"sourceType":"script"}