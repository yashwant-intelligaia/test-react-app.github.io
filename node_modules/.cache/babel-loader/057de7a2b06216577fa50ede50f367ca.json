{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar VmlTextboxXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(VmlTextboxXform, _BaseXform);\n\n  var _super = _createSuper(VmlTextboxXform);\n\n  function VmlTextboxXform() {\n    _classCallCheck(this, VmlTextboxXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VmlTextboxXform, [{\n    key: \"conversionUnit\",\n    value: function conversionUnit(value, multiple, unit) {\n      return \"\".concat(parseFloat(value) * multiple.toFixed(2)).concat(unit);\n    }\n  }, {\n    key: \"reverseConversionUnit\",\n    value: function reverseConversionUnit(inset) {\n      var _this = this;\n\n      return (inset || '').split(',').map(function (margin) {\n        return Number(parseFloat(_this.conversionUnit(parseFloat(margin), 0.1, '')).toFixed(2));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var _this2 = this;\n\n      var attributes = {\n        style: 'mso-direction-alt:auto'\n      };\n\n      if (model && model.note) {\n        var _ref = model.note && model.note.margins,\n            inset = _ref.inset;\n\n        if (Array.isArray(inset)) {\n          inset = inset.map(function (margin) {\n            return _this2.conversionUnit(margin, 10, 'mm');\n          }).join(',');\n        }\n\n        if (inset) {\n          attributes.inset = inset;\n        }\n      }\n\n      xmlStream.openNode('v:textbox', attributes);\n      xmlStream.leafNode('div', {\n        style: 'text-align:left'\n      });\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      switch (node.name) {\n        case this.tag:\n          this.model = {\n            inset: this.reverseConversionUnit(node.attributes.inset)\n          };\n          return true;\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      switch (name) {\n        case this.tag:\n          return false;\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'v:textbox';\n    }\n  }]);\n\n  return VmlTextboxXform;\n}(BaseXform);\n\nmodule.exports = VmlTextboxXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/comment/vml-textbox-xform.js"],"names":["BaseXform","require","VmlTextboxXform","value","multiple","unit","parseFloat","inset","Number","xmlStream","model","attributes","style","Array","node","name","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;IAEMC,e;;;;;;;;;;;;;mCAKWC,K,EAAOC,Q,EAAUC,I,EAAM;AACpC,aAAA,GAAA,MAAA,CAAUC,UAAU,CAAVA,KAAU,CAAVA,GAAoBF,QAAQ,CAARA,OAAAA,CAA9B,CAA8BA,CAA9B,EAAA,MAAA,CAAA,IAAA,CAAA;AACD;;;0CAEqBG,K,EAAO;AAAA,UAAA,KAAA,GAAA,IAAA;;AAC3B,aAAO,CAACA,KAAK,IAAN,EAAA,EAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAA6B,UAAA,MAAA,EAAU;AAC5C,eAAOC,MAAM,CAACF,UAAU,CAAC,KAAI,CAAJ,cAAA,CAAoBA,UAAU,CAA9B,MAA8B,CAA9B,EAAA,GAAA,EAAXA,EAAW,CAAD,CAAVA,CAAAA,OAAAA,CAAd,CAAcA,CAAD,CAAb;AADF,OAAO,CAAP;AAGD;;;2BAEMG,S,EAAWC,K,EAAO;AAAA,UAAA,MAAA,GAAA,IAAA;;AACvB,UAAMC,UAAU,GAAG;AACjBC,QAAAA,KAAK,EAAE;AADU,OAAnB;;AAGA,UAAIF,KAAK,IAAIA,KAAK,CAAlB,IAAA,EAAyB;AAAA,YAAA,IAAA,GACTA,KAAK,CAALA,IAAAA,IAAcA,KAAK,CAALA,IAAAA,CADL,OAAA;AAAA,YAClBH,KADkB,GAAA,IAAA,CAAA,KAAA;;AAEvB,YAAIM,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;AACxBN,UAAAA,KAAK,GAAG,KAAK,CAAL,GAAA,CACD,UAAA,MAAA,EAAU;AACb,mBAAO,MAAI,CAAJ,cAAA,CAAA,MAAA,EAAA,EAAA,EAAP,IAAO,CAAP;AAFI,WAAA,EAAA,IAAA,CAARA,GAAQ,CAARA;AAKD;;AACD,YAAA,KAAA,EAAW;AACTI,UAAAA,UAAU,CAAVA,KAAAA,GAAAA,KAAAA;AACD;AACF;;AACDF,MAAAA,SAAS,CAATA,QAAAA,CAAAA,WAAAA,EAAAA,UAAAA;AACAA,MAAAA,SAAS,CAATA,QAAAA,CAAAA,KAAAA,EAA0B;AAACG,QAAAA,KAAK,EAAE;AAAR,OAA1BH;AACAA,MAAAA,SAAS,CAATA,SAAAA;AACD;;;8BAESK,I,EAAM;AACd,cAAQA,IAAI,CAAZ,IAAA;AACE,aAAK,KAAL,GAAA;AACE,eAAA,KAAA,GAAa;AACXP,YAAAA,KAAK,EAAE,KAAA,qBAAA,CAA2BO,IAAI,CAAJA,UAAAA,CAA3B,KAAA;AADI,WAAb;AAGA,iBAAA,IAAA;;AACF;AACE,iBAAA,IAAA;AAPJ;AASD;;;gCAEW,CAAE;;;+BAEHC,I,EAAM;AACf,cAAA,IAAA;AACE,aAAK,KAAL,GAAA;AACE,iBAAA,KAAA;;AACF;AACE,iBAAA,IAAA;AAJJ;AAMD;;;wBAzDS;AACR,aAAA,WAAA;AACD;;;;EAH2Bf,S;;AA6D9BgB,MAAM,CAANA,OAAAA,GAAAA,eAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nclass VmlTextboxXform extends BaseXform {\r\n  get tag() {\r\n    return 'v:textbox';\r\n  }\r\n\r\n  conversionUnit(value, multiple, unit) {\r\n    return `${parseFloat(value) * multiple.toFixed(2)}${unit}`;\r\n  }\r\n\r\n  reverseConversionUnit(inset) {\r\n    return (inset || '').split(',').map(margin => {\r\n      return Number(parseFloat(this.conversionUnit(parseFloat(margin), 0.1, '')).toFixed(2));\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    const attributes = {\r\n      style: 'mso-direction-alt:auto',\r\n    };\r\n    if (model && model.note) {\r\n      let {inset} = model.note && model.note.margins;\r\n      if (Array.isArray(inset)) {\r\n        inset = inset\r\n          .map(margin => {\r\n            return this.conversionUnit(margin, 10, 'mm');\r\n          })\r\n          .join(',');\r\n      }\r\n      if (inset) {\r\n        attributes.inset = inset;\r\n      }\r\n    }\r\n    xmlStream.openNode('v:textbox', attributes);\r\n    xmlStream.leafNode('div', {style: 'text-align:left'});\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          inset: this.reverseConversionUnit(node.attributes.inset),\r\n        };\r\n        return true;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = VmlTextboxXform;\r\n"]},"metadata":{},"sourceType":"script"}