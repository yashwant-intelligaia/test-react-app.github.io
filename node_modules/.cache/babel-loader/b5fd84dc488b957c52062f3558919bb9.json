{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar AlignmentXform = require('./alignment-xform');\n\nvar ProtectionXform = require('./protection-xform'); // <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\n//   Optional <alignment>\n//   Optional <protection>\n// </xf>\n// Style assists translation from style model to/from xlsx\n\n\nvar StyleXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(StyleXform, _BaseXform);\n\n  var _super = _createSuper(StyleXform);\n\n  function StyleXform(options) {\n    var _this;\n\n    _classCallCheck(this, StyleXform);\n\n    _this = _super.call(this);\n    _this.xfId = !!(options && options.xfId);\n    _this.map = {\n      alignment: new AlignmentXform(),\n      protection: new ProtectionXform()\n    };\n    return _this;\n  }\n\n  _createClass(StyleXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode('xf', {\n        numFmtId: model.numFmtId || 0,\n        fontId: model.fontId || 0,\n        fillId: model.fillId || 0,\n        borderId: model.borderId || 0\n      });\n\n      if (this.xfId) {\n        xmlStream.addAttribute('xfId', model.xfId || 0);\n      }\n\n      if (model.numFmtId) {\n        xmlStream.addAttribute('applyNumberFormat', '1');\n      }\n\n      if (model.fontId) {\n        xmlStream.addAttribute('applyFont', '1');\n      }\n\n      if (model.fillId) {\n        xmlStream.addAttribute('applyFill', '1');\n      }\n\n      if (model.borderId) {\n        xmlStream.addAttribute('applyBorder', '1');\n      }\n\n      if (model.alignment) {\n        xmlStream.addAttribute('applyAlignment', '1');\n      }\n\n      if (model.protection) {\n        xmlStream.addAttribute('applyProtection', '1');\n      }\n      /**\r\n       * Rendering tags causes close of XML stream.\r\n       * Therefore adding attributes must be done before rendering tags.\r\n       */\n\n\n      if (model.alignment) {\n        this.map.alignment.render(xmlStream, model.alignment);\n      }\n\n      if (model.protection) {\n        this.map.protection.render(xmlStream, model.protection);\n      }\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      } // used during sax parsing of xml to build font object\n\n\n      switch (node.name) {\n        case 'xf':\n          this.model = {\n            numFmtId: parseInt(node.attributes.numFmtId, 10),\n            fontId: parseInt(node.attributes.fontId, 10),\n            fillId: parseInt(node.attributes.fillId, 10),\n            borderId: parseInt(node.attributes.borderId, 10)\n          };\n\n          if (this.xfId) {\n            this.model.xfId = parseInt(node.attributes.xfId, 10);\n          }\n\n          return true;\n\n        case 'alignment':\n          this.parser = this.map.alignment;\n          this.parser.parseOpen(node);\n          return true;\n\n        case 'protection':\n          this.parser = this.map.protection;\n          this.parser.parseOpen(node);\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          if (this.map.protection === this.parser) {\n            this.model.protection = this.parser.model;\n          } else {\n            this.model.alignment = this.parser.model;\n          }\n\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      return name !== 'xf';\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'xf';\n    }\n  }]);\n\n  return StyleXform;\n}(BaseXform);\n\nmodule.exports = StyleXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/style-xform.js"],"names":["BaseXform","require","AlignmentXform","ProtectionXform","StyleXform","options","alignment","protection","xmlStream","model","numFmtId","fontId","fillId","borderId","node","parseInt","text","name","module"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nconst AlignmentXform = require('./alignment-xform');\r\nconst ProtectionXform = require('./protection-xform');\r\n\r\n// <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\r\n//   Optional <alignment>\r\n//   Optional <protection>\r\n// </xf>\r\n\r\n// Style assists translation from style model to/from xlsx\r\nclass StyleXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.xfId = !!(options && options.xfId);\r\n    this.map = {\r\n      alignment: new AlignmentXform(),\r\n      protection: new ProtectionXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'xf';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('xf', {\r\n      numFmtId: model.numFmtId || 0,\r\n      fontId: model.fontId || 0,\r\n      fillId: model.fillId || 0,\r\n      borderId: model.borderId || 0,\r\n    });\r\n    if (this.xfId) {\r\n      xmlStream.addAttribute('xfId', model.xfId || 0);\r\n    }\r\n\r\n    if (model.numFmtId) {\r\n      xmlStream.addAttribute('applyNumberFormat', '1');\r\n    }\r\n    if (model.fontId) {\r\n      xmlStream.addAttribute('applyFont', '1');\r\n    }\r\n    if (model.fillId) {\r\n      xmlStream.addAttribute('applyFill', '1');\r\n    }\r\n    if (model.borderId) {\r\n      xmlStream.addAttribute('applyBorder', '1');\r\n    }\r\n    if (model.alignment) {\r\n      xmlStream.addAttribute('applyAlignment', '1');\r\n    }\r\n    if (model.protection) {\r\n      xmlStream.addAttribute('applyProtection', '1');\r\n    }\r\n\r\n    /**\r\n     * Rendering tags causes close of XML stream.\r\n     * Therefore adding attributes must be done before rendering tags.\r\n     */\r\n\r\n    if (model.alignment) {\r\n      this.map.alignment.render(xmlStream, model.alignment);\r\n    }\r\n    if (model.protection) {\r\n      this.map.protection.render(xmlStream, model.protection);\r\n    }\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    // used during sax parsing of xml to build font object\r\n    switch (node.name) {\r\n      case 'xf':\r\n        this.model = {\r\n          numFmtId: parseInt(node.attributes.numFmtId, 10),\r\n          fontId: parseInt(node.attributes.fontId, 10),\r\n          fillId: parseInt(node.attributes.fillId, 10),\r\n          borderId: parseInt(node.attributes.borderId, 10),\r\n        };\r\n        if (this.xfId) {\r\n          this.model.xfId = parseInt(node.attributes.xfId, 10);\r\n        }\r\n        return true;\r\n      case 'alignment':\r\n        this.parser = this.map.alignment;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      case 'protection':\r\n        this.parser = this.map.protection;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        if (this.map.protection === this.parser) {\r\n          this.model.protection = this.parser.model;\r\n        } else {\r\n          this.model.alignment = this.parser.model;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return name !== 'xf';\r\n  }\r\n}\r\n\r\nmodule.exports = StyleXform;\r\n"]},"metadata":{},"sourceType":"script"}