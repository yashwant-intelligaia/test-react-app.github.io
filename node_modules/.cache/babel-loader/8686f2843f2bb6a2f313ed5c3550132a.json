{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar DateXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(DateXform, _BaseXform);\n\n  var _super = _createSuper(DateXform);\n\n  function DateXform(options) {\n    var _this;\n\n    _classCallCheck(this, DateXform);\n\n    _this = _super.call(this);\n    _this.tag = options.tag;\n    _this.attr = options.attr;\n    _this.attrs = options.attrs;\n\n    _this._format = options.format || function (dt) {\n      try {\n        if (Number.isNaN(dt.getTime())) return '';\n        return dt.toISOString();\n      } catch (e) {\n        return '';\n      }\n    };\n\n    _this._parse = options.parse || function (str) {\n      return new Date(str);\n    };\n\n    return _this;\n  }\n\n  _createClass(DateXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      if (model) {\n        xmlStream.openNode(this.tag);\n\n        if (this.attrs) {\n          xmlStream.addAttributes(this.attrs);\n        }\n\n        if (this.attr) {\n          xmlStream.addAttribute(this.attr, this._format(model));\n        } else {\n          xmlStream.writeText(this._format(model));\n        }\n\n        xmlStream.closeNode();\n      }\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (node.name === this.tag) {\n        if (this.attr) {\n          this.model = this._parse(node.attributes[this.attr]);\n        } else {\n          this.text = [];\n        }\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (!this.attr) {\n        this.text.push(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      if (!this.attr) {\n        this.model = this._parse(this.text.join(''));\n      }\n\n      return false;\n    }\n  }]);\n\n  return DateXform;\n}(BaseXform);\n\nmodule.exports = DateXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/simple/date-xform.js"],"names":["BaseXform","require","DateXform","options","Number","dt","xmlStream","model","node","text","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;IAEMC,S;;;;;AACJ,WAAA,SAAA,CAAA,OAAA,EAAqB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AACnB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,GAAA,GAAWC,OAAO,CAAlB,GAAA;AACA,IAAA,KAAA,CAAA,IAAA,GAAYA,OAAO,CAAnB,IAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAaA,OAAO,CAApB,KAAA;;AACA,IAAA,KAAA,CAAA,OAAA,GACEA,OAAO,CAAPA,MAAAA,IACA,UAAA,EAAA,EAAa;AACX,UAAI;AACF,YAAIC,MAAM,CAANA,KAAAA,CAAaC,EAAE,CAAnB,OAAiBA,EAAbD,CAAJ,EAAgC,OAAA,EAAA;AAChC,eAAOC,EAAE,CAAT,WAAOA,EAAP;AAFF,OAAA,CAGE,OAAA,CAAA,EAAU;AACV,eAAA,EAAA;AACD;AARL,KAAA;;AAUA,IAAA,KAAA,CAAA,MAAA,GACEF,OAAO,CAAPA,KAAAA,IACA,UAAA,GAAA,EAAc;AACZ,aAAO,IAAA,IAAA,CAAP,GAAO,CAAP;AAHJ,KAAA;;AAhBmB,WAAA,KAAA;AAqBpB;;;;2BAEMG,S,EAAWC,K,EAAO;AACvB,UAAA,KAAA,EAAW;AACTD,QAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA;;AACA,YAAI,KAAJ,KAAA,EAAgB;AACdA,UAAAA,SAAS,CAATA,aAAAA,CAAwB,KAAxBA,KAAAA;AACD;;AACD,YAAI,KAAJ,IAAA,EAAe;AACbA,UAAAA,SAAS,CAATA,YAAAA,CAAuB,KAAvBA,IAAAA,EAAkC,KAAA,OAAA,CAAlCA,KAAkC,CAAlCA;AADF,SAAA,MAEO;AACLA,UAAAA,SAAS,CAATA,SAAAA,CAAoB,KAAA,OAAA,CAApBA,KAAoB,CAApBA;AACD;;AACDA,QAAAA,SAAS,CAATA,SAAAA;AACD;AACF;;;8BAESE,I,EAAM;AACd,UAAIA,IAAI,CAAJA,IAAAA,KAAc,KAAlB,GAAA,EAA4B;AAC1B,YAAI,KAAJ,IAAA,EAAe;AACb,eAAA,KAAA,GAAa,KAAA,MAAA,CAAYA,IAAI,CAAJA,UAAAA,CAAgB,KAAzC,IAAyBA,CAAZ,CAAb;AADF,SAAA,MAEO;AACL,eAAA,IAAA,GAAA,EAAA;AACD;AACF;AACF;;;8BAESC,I,EAAM;AACd,UAAI,CAAC,KAAL,IAAA,EAAgB;AACd,aAAA,IAAA,CAAA,IAAA,CAAA,IAAA;AACD;AACF;;;iCAEY;AACX,UAAI,CAAC,KAAL,IAAA,EAAgB;AACd,aAAA,KAAA,GAAa,KAAA,MAAA,CAAY,KAAA,IAAA,CAAA,IAAA,CAAzB,EAAyB,CAAZ,CAAb;AACD;;AACD,aAAA,KAAA;AACD;;;;EA5DqBT,S;;AA+DxBU,MAAM,CAANA,OAAAA,GAAAA,SAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nclass DateXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.tag = options.tag;\r\n    this.attr = options.attr;\r\n    this.attrs = options.attrs;\r\n    this._format =\r\n      options.format ||\r\n      function(dt) {\r\n        try {\r\n          if (Number.isNaN(dt.getTime())) return '';\r\n          return dt.toISOString();\r\n        } catch (e) {\r\n          return '';\r\n        }\r\n      };\r\n    this._parse =\r\n      options.parse ||\r\n      function(str) {\r\n        return new Date(str);\r\n      };\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (model) {\r\n      xmlStream.openNode(this.tag);\r\n      if (this.attrs) {\r\n        xmlStream.addAttributes(this.attrs);\r\n      }\r\n      if (this.attr) {\r\n        xmlStream.addAttribute(this.attr, this._format(model));\r\n      } else {\r\n        xmlStream.writeText(this._format(model));\r\n      }\r\n      xmlStream.closeNode();\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (node.name === this.tag) {\r\n      if (this.attr) {\r\n        this.model = this._parse(node.attributes[this.attr]);\r\n      } else {\r\n        this.text = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (!this.attr) {\r\n      this.text.push(text);\r\n    }\r\n  }\r\n\r\n  parseClose() {\r\n    if (!this.attr) {\r\n      this.model = this._parse(this.text.join(''));\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = DateXform;\r\n"]},"metadata":{},"sourceType":"script"}