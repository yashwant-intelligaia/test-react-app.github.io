{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/yashwant-intelligaia/Documents/Official/TestTasks/my-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nfunction _awaitAsyncGenerator(value) {\n  return new _AwaitValue(value);\n}\n\nfunction _wrapAsyncGenerator(fn) {\n  return function () {\n    return new _AsyncGenerator(fn.apply(this, arguments));\n  };\n}\n\nfunction _AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof _AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(key === \"return\" ? \"return\" : \"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen.return !== \"function\") {\n    this.return = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\n_AsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\n_AsyncGenerator.prototype.throw = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\n_AsyncGenerator.prototype.return = function (arg) {\n  return this._invoke(\"return\", arg);\n};\n\nfunction _AwaitValue(value) {\n  this.wrapped = value;\n}\n\nfunction _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}\n\nvar _require = require('saxes'),\n    SaxesParser = _require.SaxesParser;\n\nvar _require2 = require('readable-stream'),\n    PassThrough = _require2.PassThrough;\n\nvar _require3 = require('./browser-buffer-decode'),\n    bufferToString = _require3.bufferToString;\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(iterable) {\n    var saxesParser, error, events, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // TODO: Remove once node v8 is deprecated\n            // Detect and upgrade old streams\n            if (iterable.pipe && !iterable[Symbol.asyncIterator]) {\n              iterable = iterable.pipe(new PassThrough());\n            }\n\n            saxesParser = new SaxesParser();\n            saxesParser.on('error', function (err) {\n              error = err;\n            });\n            events = [];\n            saxesParser.on('opentag', function (value) {\n              return events.push({\n                eventType: 'opentag',\n                value: value\n              });\n            });\n            saxesParser.on('text', function (value) {\n              return events.push({\n                eventType: 'text',\n                value: value\n              });\n            });\n            saxesParser.on('closetag', function (value) {\n              return events.push({\n                eventType: 'closetag',\n                value: value\n              });\n            });\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 9;\n            _iterator = _asyncIterator(iterable);\n\n          case 11:\n            _context.next = 13;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 13:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 17;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 17:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 29;\n              break;\n            }\n\n            chunk = _value;\n            saxesParser.write(bufferToString(chunk)); // saxesParser.write and saxesParser.on() are synchronous,\n            // so we can only reach the below line once all events have been emitted\n\n            if (!error) {\n              _context.next = 23;\n              break;\n            }\n\n            throw error;\n\n          case 23:\n            _context.next = 25;\n            return events;\n\n          case 25:\n            events = [];\n\n          case 26:\n            _iteratorNormalCompletion = true;\n            _context.next = 11;\n            break;\n\n          case 29:\n            _context.next = 35;\n            break;\n\n          case 31:\n            _context.prev = 31;\n            _context.t0 = _context[\"catch\"](9);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 35:\n            _context.prev = 35;\n            _context.prev = 36;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 40;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 40:\n            _context.prev = 40;\n\n            if (!_didIteratorError) {\n              _context.next = 43;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 43:\n            return _context.finish(40);\n\n          case 44:\n            return _context.finish(35);\n\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 31, 35, 45], [36,, 40, 44]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["../../../lib/utils/parse-sax.js"],"names":["SaxesParser","require","PassThrough","bufferToString","module","iterable","Symbol","saxesParser","error","events","eventType","value","chunk"],"mappings":"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","sourcesContent":["const {SaxesParser} = require('saxes');\r\nconst {PassThrough} = require('readable-stream');\r\nconst {bufferToString} = require('./browser-buffer-decode');\r\n\r\nmodule.exports = async function* (iterable) {\r\n  // TODO: Remove once node v8 is deprecated\r\n  // Detect and upgrade old streams\r\n  if (iterable.pipe && !iterable[Symbol.asyncIterator]) {\r\n    iterable = iterable.pipe(new PassThrough());\r\n  }\r\n  const saxesParser = new SaxesParser();\r\n  let error;\r\n  saxesParser.on('error', err => {\r\n    error = err;\r\n  });\r\n  let events = [];\r\n  saxesParser.on('opentag', value => events.push({eventType: 'opentag', value}));\r\n  saxesParser.on('text', value => events.push({eventType: 'text', value}));\r\n  saxesParser.on('closetag', value => events.push({eventType: 'closetag', value}));\r\n  for await (const chunk of iterable) {\r\n    saxesParser.write(bufferToString(chunk));\r\n    // saxesParser.write and saxesParser.on() are synchronous,\r\n    // so we can only reach the below line once all events have been emitted\r\n    if (error) throw error;\r\n    // As a performance optimization, we gather all events instead of passing\r\n    // them one by one, which would cause each event to go through the event queue\r\n    yield events;\r\n    events = [];\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}