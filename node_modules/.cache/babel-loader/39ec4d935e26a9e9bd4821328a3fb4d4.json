{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar AlignmentXform = require('./alignment-xform');\n\nvar BorderXform = require('./border-xform');\n\nvar FillXform = require('./fill-xform');\n\nvar FontXform = require('./font-xform');\n\nvar NumFmtXform = require('./numfmt-xform');\n\nvar ProtectionXform = require('./protection-xform'); // <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\n//   Optional <alignment>\n//   Optional <protection>\n// </xf>\n// Style assists translation from style model to/from xlsx\n\n\nvar DxfXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(DxfXform, _BaseXform);\n\n  var _super = _createSuper(DxfXform);\n\n  function DxfXform() {\n    var _this;\n\n    _classCallCheck(this, DxfXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      alignment: new AlignmentXform(),\n      border: new BorderXform(),\n      fill: new FillXform(),\n      font: new FontXform(),\n      numFmt: new NumFmtXform(),\n      protection: new ProtectionXform()\n    };\n    return _this;\n  }\n\n  _createClass(DxfXform, [{\n    key: \"render\",\n    // how do we generate dxfid?\n    value: function render(xmlStream, model) {\n      xmlStream.openNode(this.tag);\n\n      if (model.alignment) {\n        this.map.alignment.render(xmlStream, model.alignment);\n      }\n\n      if (model.border) {\n        this.map.border.render(xmlStream, model.border);\n      }\n\n      if (model.fill) {\n        this.map.fill.render(xmlStream, model.fill);\n      }\n\n      if (model.font) {\n        this.map.font.render(xmlStream, model.font);\n      }\n\n      if (model.numFmt) {\n        this.map.numFmt.render(xmlStream, model.numFmt);\n      }\n\n      if (model.protection) {\n        this.map.protection.render(xmlStream, model.protection);\n      }\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case this.tag:\n          // this node is often repeated. Need to reset children\n          this.reset();\n          return true;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n          }\n\n          return true;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      if (name === this.tag) {\n        this.model = {\n          alignment: this.map.alignment.model,\n          border: this.map.border.model,\n          fill: this.map.fill.model,\n          font: this.map.font.model,\n          numFmt: this.map.numFmt.model,\n          protection: this.map.protection.model\n        };\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'dxf';\n    }\n  }]);\n\n  return DxfXform;\n}(BaseXform);\n\nmodule.exports = DxfXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/dxf-xform.js"],"names":["BaseXform","require","AlignmentXform","BorderXform","FillXform","FontXform","NumFmtXform","ProtectionXform","DxfXform","alignment","border","fill","font","numFmt","protection","xmlStream","model","node","text","name","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;AAEA,IAAMC,cAAc,GAAGD,OAAO,CAA9B,mBAA8B,CAA9B;;AACA,IAAME,WAAW,GAAGF,OAAO,CAA3B,gBAA2B,CAA3B;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAzB,cAAyB,CAAzB;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAzB,cAAyB,CAAzB;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAA3B,gBAA2B,CAA3B;;AACA,IAAMM,eAAe,GAAGN,OAAO,CAA/B,oBAA+B,CAA/B,C,CAEA;AACA;AACA;AACA;AAEA;;;IACMO,Q;;;;;AACJ,WAAA,QAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AACZ,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,GAAA,GAAW;AACTC,MAAAA,SAAS,EAAE,IADF,cACE,EADF;AAETC,MAAAA,MAAM,EAAE,IAFC,WAED,EAFC;AAGTC,MAAAA,IAAI,EAAE,IAHG,SAGH,EAHG;AAITC,MAAAA,IAAI,EAAE,IAJG,SAIH,EAJG;AAKTC,MAAAA,MAAM,EAAE,IALC,WAKD,EALC;AAMTC,MAAAA,UAAU,EAAE,IAAA,eAAA;AANH,KAAX;AAHY,WAAA,KAAA;AAWb;;;;AAMD;2BAEOC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA;;AAEA,UAAIC,KAAK,CAAT,SAAA,EAAqB;AACnB,aAAA,GAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,EAAqCA,KAAK,CAA1C,SAAA;AACD;;AACD,UAAIA,KAAK,CAAT,MAAA,EAAkB;AAChB,aAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,EAAkCA,KAAK,CAAvC,MAAA;AACD;;AACD,UAAIA,KAAK,CAAT,IAAA,EAAgB;AACd,aAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAgCA,KAAK,CAArC,IAAA;AACD;;AACD,UAAIA,KAAK,CAAT,IAAA,EAAgB;AACd,aAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAgCA,KAAK,CAArC,IAAA;AACD;;AACD,UAAIA,KAAK,CAAT,MAAA,EAAkB;AAChB,aAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,EAAkCA,KAAK,CAAvC,MAAA;AACD;;AACD,UAAIA,KAAK,CAAT,UAAA,EAAsB;AACpB,aAAA,GAAA,CAAA,UAAA,CAAA,MAAA,CAAA,SAAA,EAAsCA,KAAK,CAA3C,UAAA;AACD;;AAEDD,MAAAA,SAAS,CAATA,SAAAA;AACD;;;8BAESE,I,EAAM;AACd,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACA,eAAA,IAAA;AACD;;AAED,cAAQA,IAAI,CAAZ,IAAA;AACE,aAAK,KAAL,GAAA;AACE;AACA,eAAA,KAAA;AACA,iBAAA,IAAA;;AACF;AACE,eAAA,MAAA,GAAc,KAAA,GAAA,CAASA,IAAI,CAA3B,IAAc,CAAd;;AACA,cAAI,KAAJ,MAAA,EAAiB;AACf,iBAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACD;;AACD,iBAAA,IAAA;AAVJ;AAYD;;;8BAESC,I,EAAM;AACd,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACD;AACF;;;+BAEUC,I,EAAM;AACf,UAAI,KAAJ,MAAA,EAAiB;AACf,YAAI,CAAC,KAAA,MAAA,CAAA,UAAA,CAAL,IAAK,CAAL,EAAmC;AACjC,eAAA,MAAA,GAAA,SAAA;AACD;;AACD,eAAA,IAAA;AACD;;AACD,UAAIA,IAAI,KAAK,KAAb,GAAA,EAAuB;AACrB,aAAA,KAAA,GAAa;AACXV,UAAAA,SAAS,EAAE,KAAA,GAAA,CAAA,SAAA,CADA,KAAA;AAEXC,UAAAA,MAAM,EAAE,KAAA,GAAA,CAAA,MAAA,CAFG,KAAA;AAGXC,UAAAA,IAAI,EAAE,KAAA,GAAA,CAAA,IAAA,CAHK,KAAA;AAIXC,UAAAA,IAAI,EAAE,KAAA,GAAA,CAAA,IAAA,CAJK,KAAA;AAKXC,UAAAA,MAAM,EAAE,KAAA,GAAA,CAAA,MAAA,CALG,KAAA;AAMXC,UAAAA,UAAU,EAAE,KAAA,GAAA,CAAA,UAAA,CAAoBE;AANrB,SAAb;AAQA,eAAA,KAAA;AACD;;AAED,aAAA,IAAA;AACD;;;wBA7ES;AACR,aAAA,KAAA;AACD;;;;EAhBoBhB,S;;AA8FvBoB,MAAM,CAANA,OAAAA,GAAAA,QAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nconst AlignmentXform = require('./alignment-xform');\r\nconst BorderXform = require('./border-xform');\r\nconst FillXform = require('./fill-xform');\r\nconst FontXform = require('./font-xform');\r\nconst NumFmtXform = require('./numfmt-xform');\r\nconst ProtectionXform = require('./protection-xform');\r\n\r\n// <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\r\n//   Optional <alignment>\r\n//   Optional <protection>\r\n// </xf>\r\n\r\n// Style assists translation from style model to/from xlsx\r\nclass DxfXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      alignment: new AlignmentXform(),\r\n      border: new BorderXform(),\r\n      fill: new FillXform(),\r\n      font: new FontXform(),\r\n      numFmt: new NumFmtXform(),\r\n      protection: new ProtectionXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'dxf';\r\n  }\r\n\r\n  // how do we generate dxfid?\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag);\r\n\r\n    if (model.alignment) {\r\n      this.map.alignment.render(xmlStream, model.alignment);\r\n    }\r\n    if (model.border) {\r\n      this.map.border.render(xmlStream, model.border);\r\n    }\r\n    if (model.fill) {\r\n      this.map.fill.render(xmlStream, model.fill);\r\n    }\r\n    if (model.font) {\r\n      this.map.font.render(xmlStream, model.font);\r\n    }\r\n    if (model.numFmt) {\r\n      this.map.numFmt.render(xmlStream, model.numFmt);\r\n    }\r\n    if (model.protection) {\r\n      this.map.protection.render(xmlStream, model.protection);\r\n    }\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n\r\n    switch (node.name) {\r\n      case this.tag:\r\n        // this node is often repeated. Need to reset children\r\n        this.reset();\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n        }\r\n        return true;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    if (name === this.tag) {\r\n      this.model = {\r\n        alignment: this.map.alignment.model,\r\n        border: this.map.border.model,\r\n        fill: this.map.fill.model,\r\n        font: this.map.font.model,\r\n        numFmt: this.map.numFmt.model,\r\n        protection: this.map.protection.model,\r\n      };\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nmodule.exports = DxfXform;\r\n"]},"metadata":{},"sourceType":"script"}