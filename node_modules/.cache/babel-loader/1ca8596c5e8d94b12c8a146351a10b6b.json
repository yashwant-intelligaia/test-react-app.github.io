{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar validation = {\n  boolean: function boolean(value, dflt) {\n    if (value === undefined) {\n      return dflt;\n    }\n\n    return value;\n  }\n}; // Protection encapsulates translation from style.protection model to/from xlsx\n\nvar ProtectionXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(ProtectionXform, _BaseXform);\n\n  var _super = _createSuper(ProtectionXform);\n\n  function ProtectionXform() {\n    _classCallCheck(this, ProtectionXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ProtectionXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.addRollback();\n      xmlStream.openNode('protection');\n      var isValid = false;\n\n      function add(name, value) {\n        if (value !== undefined) {\n          xmlStream.addAttribute(name, value);\n          isValid = true;\n        }\n      }\n\n      add('locked', validation.boolean(model.locked, true) ? undefined : '0');\n      add('hidden', validation.boolean(model.hidden, false) ? '1' : undefined);\n      xmlStream.closeNode();\n\n      if (isValid) {\n        xmlStream.commit();\n      } else {\n        xmlStream.rollback();\n      }\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      var model = {\n        locked: !(node.attributes.locked === '0'),\n        hidden: node.attributes.hidden === '1'\n      }; // only want to record models that differ from defaults\n\n      var isSignificant = !model.locked || model.hidden;\n      this.model = isSignificant ? model : null;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'protection';\n    }\n  }]);\n\n  return ProtectionXform;\n}(BaseXform);\n\nmodule.exports = ProtectionXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/protection-xform.js"],"names":["BaseXform","require","validation","boolean","value","ProtectionXform","xmlStream","model","isValid","add","node","locked","hidden","isSignificant","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,OADiB,EAAA,SAAA,OAAA,CAAA,KAAA,EAAA,IAAA,EACI;AACnB,QAAIC,KAAK,KAAT,SAAA,EAAyB;AACvB,aAAA,IAAA;AACD;;AACD,WAAA,KAAA;AACD;AANgB,CAAnB,C,CASA;;IACMC,e;;;;;;;;;;;;;2BAKGC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,WAAAA;AACAA,MAAAA,SAAS,CAATA,QAAAA,CAAAA,YAAAA;AAEA,UAAIE,OAAO,GAAX,KAAA;;AACA,eAAA,GAAA,CAAA,IAAA,EAAA,KAAA,EAA0B;AACxB,YAAIJ,KAAK,KAAT,SAAA,EAAyB;AACvBE,UAAAA,SAAS,CAATA,YAAAA,CAAAA,IAAAA,EAAAA,KAAAA;AACAE,UAAAA,OAAO,GAAPA,IAAAA;AACD;AACF;;AACDC,MAAAA,GAAG,CAAA,QAAA,EAAWP,UAAU,CAAVA,OAAAA,CAAmBK,KAAK,CAAxBL,MAAAA,EAAAA,IAAAA,IAAAA,SAAAA,GAAdO,GAAG,CAAHA;AACAA,MAAAA,GAAG,CAAA,QAAA,EAAWP,UAAU,CAAVA,OAAAA,CAAmBK,KAAK,CAAxBL,MAAAA,EAAAA,KAAAA,IAAAA,GAAAA,GAAdO,SAAG,CAAHA;AAEAH,MAAAA,SAAS,CAATA,SAAAA;;AAEA,UAAA,OAAA,EAAa;AACXA,QAAAA,SAAS,CAATA,MAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,SAAS,CAATA,QAAAA;AACD;AACF;;;8BAESI,I,EAAM;AACd,UAAMH,KAAK,GAAG;AACZI,QAAAA,MAAM,EAAE,EAAED,IAAI,CAAJA,UAAAA,CAAAA,MAAAA,KADE,GACJ,CADI;AAEZE,QAAAA,MAAM,EAAEF,IAAI,CAAJA,UAAAA,CAAAA,MAAAA,KAA2B;AAFvB,OAAd,CADc,CAMd;;AACA,UAAMG,aAAa,GAAG,CAACN,KAAK,CAAN,MAAA,IAAiBA,KAAK,CAA5C,MAAA;AAEA,WAAA,KAAA,GAAaM,aAAa,GAAA,KAAA,GAA1B,IAAA;AACD;;;gCAEW,CAAE;;;iCAED;AACX,aAAA,KAAA;AACD;;;wBA3CS;AACR,aAAA,YAAA;AACD;;;;EAH2Bb,S;;AA+C9Bc,MAAM,CAANA,OAAAA,GAAAA,eAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nconst validation = {\r\n  boolean(value, dflt) {\r\n    if (value === undefined) {\r\n      return dflt;\r\n    }\r\n    return value;\r\n  },\r\n};\r\n\r\n// Protection encapsulates translation from style.protection model to/from xlsx\r\nclass ProtectionXform extends BaseXform {\r\n  get tag() {\r\n    return 'protection';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.addRollback();\r\n    xmlStream.openNode('protection');\r\n\r\n    let isValid = false;\r\n    function add(name, value) {\r\n      if (value !== undefined) {\r\n        xmlStream.addAttribute(name, value);\r\n        isValid = true;\r\n      }\r\n    }\r\n    add('locked', validation.boolean(model.locked, true) ? undefined : '0');\r\n    add('hidden', validation.boolean(model.hidden, false) ? '1' : undefined);\r\n\r\n    xmlStream.closeNode();\r\n\r\n    if (isValid) {\r\n      xmlStream.commit();\r\n    } else {\r\n      xmlStream.rollback();\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    const model = {\r\n      locked: !(node.attributes.locked === '0'),\r\n      hidden: node.attributes.hidden === '1',\r\n    };\r\n\r\n    // only want to record models that differ from defaults\r\n    const isSignificant = !model.locked || model.hidden;\r\n\r\n    this.model = isSignificant ? model : null;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = ProtectionXform;\r\n"]},"metadata":{},"sourceType":"script"}