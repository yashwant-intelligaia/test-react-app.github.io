{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar _require = require('uuid'),\n    uuidv4 = _require.v4;\n\nvar BaseXform = require('../../base-xform');\n\nvar CompositeXform = require('../../composite-xform');\n\nvar DatabarExtXform = require('./databar-ext-xform');\n\nvar IconSetExtXform = require('./icon-set-ext-xform');\n\nvar extIcons = {\n  '3Triangles': true,\n  '3Stars': true,\n  '5Boxes': true\n};\n\nvar CfRuleExtXform = /*#__PURE__*/function (_CompositeXform) {\n  _inherits(CfRuleExtXform, _CompositeXform);\n\n  var _super = _createSuper(CfRuleExtXform);\n\n  function CfRuleExtXform() {\n    var _this;\n\n    _classCallCheck(this, CfRuleExtXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'x14:dataBar': _this.databarXform = new DatabarExtXform(),\n      'x14:iconSet': _this.iconSetXform = new IconSetExtXform()\n    };\n    return _this;\n  }\n\n  _createClass(CfRuleExtXform, [{\n    key: \"prepare\",\n    value: function prepare(model) {\n      if (CfRuleExtXform.isExt(model)) {\n        model.x14Id = \"{\".concat(uuidv4(), \"}\").toUpperCase();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      if (!CfRuleExtXform.isExt(model)) {\n        return;\n      }\n\n      switch (model.type) {\n        case 'dataBar':\n          this.renderDataBar(xmlStream, model);\n          break;\n\n        case 'iconSet':\n          this.renderIconSet(xmlStream, model);\n          break;\n      }\n    }\n  }, {\n    key: \"renderDataBar\",\n    value: function renderDataBar(xmlStream, model) {\n      xmlStream.openNode(this.tag, {\n        type: 'dataBar',\n        id: model.x14Id\n      });\n      this.databarXform.render(xmlStream, model);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"renderIconSet\",\n    value: function renderIconSet(xmlStream, model) {\n      xmlStream.openNode(this.tag, {\n        type: 'iconSet',\n        priority: model.priority,\n        id: model.x14Id || \"{\".concat(uuidv4(), \"}\")\n      });\n      this.iconSetXform.render(xmlStream, model);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"createNewModel\",\n    value: function createNewModel(_ref) {\n      var attributes = _ref.attributes;\n      return {\n        type: attributes.type,\n        x14Id: attributes.id,\n        priority: BaseXform.toIntValue(attributes.priority)\n      };\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      Object.assign(this.model, parser.model);\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'x14:cfRule';\n    }\n  }], [{\n    key: \"isExt\",\n    value: function isExt(rule) {\n      // is this rule primitive?\n      if (rule.type === 'dataBar') {\n        return DatabarExtXform.isExt(rule);\n      }\n\n      if (rule.type === 'iconSet') {\n        if (rule.custom || extIcons[rule.iconSet]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return CfRuleExtXform;\n}(CompositeXform);\n\nmodule.exports = CfRuleExtXform;","map":{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/cf-rule-ext-xform.js"],"names":["v4","uuidv4","require","BaseXform","CompositeXform","DatabarExtXform","IconSetExtXform","extIcons","CfRuleExtXform","rule","model","xmlStream","type","id","x14Id","priority","attributes","name","parser","Object","module"],"mappings":"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","sourcesContent":["const {v4: uuidv4} = require('uuid');\r\nconst BaseXform = require('../../base-xform');\r\nconst CompositeXform = require('../../composite-xform');\r\n\r\nconst DatabarExtXform = require('./databar-ext-xform');\r\nconst IconSetExtXform = require('./icon-set-ext-xform');\r\n\r\nconst extIcons = {\r\n  '3Triangles': true,\r\n  '3Stars': true,\r\n  '5Boxes': true,\r\n};\r\n\r\nclass CfRuleExtXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'x14:dataBar': (this.databarXform = new DatabarExtXform()),\r\n      'x14:iconSet': (this.iconSetXform = new IconSetExtXform()),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'x14:cfRule';\r\n  }\r\n\r\n  static isExt(rule) {\r\n    // is this rule primitive?\r\n    if (rule.type === 'dataBar') {\r\n      return DatabarExtXform.isExt(rule);\r\n    }\r\n    if (rule.type === 'iconSet') {\r\n      if (rule.custom || extIcons[rule.iconSet]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  prepare(model) {\r\n    if (CfRuleExtXform.isExt(model)) {\r\n      model.x14Id = `{${uuidv4()}}`.toUpperCase();\r\n    }\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (!CfRuleExtXform.isExt(model)) {\r\n      return;\r\n    }\r\n\r\n    switch (model.type) {\r\n      case 'dataBar':\r\n        this.renderDataBar(xmlStream, model);\r\n        break;\r\n      case 'iconSet':\r\n        this.renderIconSet(xmlStream, model);\r\n        break;\r\n    }\r\n  }\r\n\r\n  renderDataBar(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      type: 'dataBar',\r\n      id: model.x14Id,\r\n    });\r\n\r\n    this.databarXform.render(xmlStream, model);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  renderIconSet(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      type: 'iconSet',\r\n      priority: model.priority,\r\n      id: model.x14Id || `{${uuidv4()}}`,\r\n    });\r\n\r\n    this.iconSetXform.render(xmlStream, model);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel({attributes}) {\r\n    return {\r\n      type: attributes.type,\r\n      x14Id: attributes.id,\r\n      priority: BaseXform.toIntValue(attributes.priority),\r\n    };\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    Object.assign(this.model, parser.model);\r\n  }\r\n}\r\n\r\nmodule.exports = CfRuleExtXform;\r\n"]},"metadata":{},"sourceType":"script"}