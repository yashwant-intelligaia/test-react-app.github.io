{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar _ = require('../../../utils/under-dash');\n\nvar defaultNumFormats = require('../../defaultnumformats');\n\nvar BaseXform = require('../base-xform');\n\nfunction hashDefaultFormats() {\n  var hash = {};\n\n  _.each(defaultNumFormats, function (dnf, id) {\n    if (dnf.f) {\n      hash[dnf.f] = parseInt(id, 10);\n    } // at some point, add the other cultures here...\n\n  });\n\n  return hash;\n}\n\nvar defaultFmtHash = hashDefaultFormats(); // NumFmt encapsulates translation between number format and xlsx\n\nvar NumFmtXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(NumFmtXform, _BaseXform);\n\n  var _super = _createSuper(NumFmtXform);\n\n  function NumFmtXform(id, formatCode) {\n    var _this;\n\n    _classCallCheck(this, NumFmtXform);\n\n    _this = _super.call(this);\n    _this.id = id;\n    _this.formatCode = formatCode;\n    return _this;\n  }\n\n  _createClass(NumFmtXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.leafNode('numFmt', {\n        numFmtId: model.id,\n        formatCode: model.formatCode\n      });\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      switch (node.name) {\n        case 'numFmt':\n          this.model = {\n            id: parseInt(node.attributes.numFmtId, 10),\n            formatCode: node.attributes.formatCode.replace(/[\\\\](.)/g, '$1')\n          };\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'numFmt';\n    }\n  }]);\n\n  return NumFmtXform;\n}(BaseXform);\n\nNumFmtXform.getDefaultFmtId = function getDefaultFmtId(formatCode) {\n  return defaultFmtHash[formatCode];\n};\n\nNumFmtXform.getDefaultFmtCode = function getDefaultFmtCode(numFmtId) {\n  return defaultNumFormats[numFmtId] && defaultNumFormats[numFmtId].f;\n};\n\nmodule.exports = NumFmtXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/numfmt-xform.js"],"names":["_","require","defaultNumFormats","BaseXform","hash","dnf","parseInt","defaultFmtHash","hashDefaultFormats","NumFmtXform","xmlStream","model","numFmtId","formatCode","node","id","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAjB,2BAAiB,CAAjB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAjC,yBAAiC,CAAjC;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAzB,eAAyB,CAAzB;;AAEA,SAAA,kBAAA,GAA8B;AAC5B,MAAMG,IAAI,GAAV,EAAA;;AACAJ,EAAAA,CAAC,CAADA,IAAAA,CAAAA,iBAAAA,EAA0B,UAAA,GAAA,EAAA,EAAA,EAAa;AACrC,QAAIK,GAAG,CAAP,CAAA,EAAW;AACTD,MAAAA,IAAI,CAACC,GAAG,CAARD,CAAI,CAAJA,GAAcE,QAAQ,CAAA,EAAA,EAAtBF,EAAsB,CAAtBA;AAFmC,KAAA,CAIrC;;AAJFJ,GAAAA;;AAMA,SAAA,IAAA;AACD;;AACD,IAAMO,cAAc,GAAGC,kBAAvB,EAAA,C,CAEA;;IACMC,W;;;;;AACJ,WAAA,WAAA,CAAA,EAAA,EAAA,UAAA,EAA4B;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;AAC1B,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,EAAA,GAAA,EAAA;AACA,IAAA,KAAA,CAAA,UAAA,GAAA,UAAA;AAJ0B,WAAA,KAAA;AAK3B;;;;2BAMMC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,QAAAA,CAAAA,QAAAA,EAA6B;AAACE,QAAAA,QAAQ,EAAED,KAAK,CAAhB,EAAA;AAAqBE,QAAAA,UAAU,EAAEF,KAAK,CAACE;AAAvC,OAA7BH;AACD;;;8BAESI,I,EAAM;AACd,cAAQA,IAAI,CAAZ,IAAA;AACE,aAAA,QAAA;AACE,eAAA,KAAA,GAAa;AACXC,YAAAA,EAAE,EAAET,QAAQ,CAACQ,IAAI,CAAJA,UAAAA,CAAD,QAAA,EADD,EACC,CADD;AAEXD,YAAAA,UAAU,EAAEC,IAAI,CAAJA,UAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CAAAA,UAAAA,EAAAA,IAAAA;AAFD,WAAb;AAIA,iBAAA,IAAA;;AACF;AACE,iBAAA,KAAA;AARJ;AAUD;;;gCAEW,CAAE;;;iCAED;AACX,aAAA,KAAA;AACD;;;wBAzBS;AACR,aAAA,QAAA;AACD;;;;EAVuBX,S;;AAoC1BM,WAAW,CAAXA,eAAAA,GAA8B,SAAA,eAAA,CAAA,UAAA,EAAqC;AACjE,SAAOF,cAAc,CAArB,UAAqB,CAArB;AADFE,CAAAA;;AAIAA,WAAW,CAAXA,iBAAAA,GAAgC,SAAA,iBAAA,CAAA,QAAA,EAAqC;AACnE,SAAOP,iBAAiB,CAAjBA,QAAiB,CAAjBA,IAA+BA,iBAAiB,CAAjBA,QAAiB,CAAjBA,CAAtC,CAAA;AADFO,CAAAA;;AAIAO,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["const _ = require('../../../utils/under-dash');\r\nconst defaultNumFormats = require('../../defaultnumformats');\r\n\r\nconst BaseXform = require('../base-xform');\r\n\r\nfunction hashDefaultFormats() {\r\n  const hash = {};\r\n  _.each(defaultNumFormats, (dnf, id) => {\r\n    if (dnf.f) {\r\n      hash[dnf.f] = parseInt(id, 10);\r\n    }\r\n    // at some point, add the other cultures here...\r\n  });\r\n  return hash;\r\n}\r\nconst defaultFmtHash = hashDefaultFormats();\r\n\r\n// NumFmt encapsulates translation between number format and xlsx\r\nclass NumFmtXform extends BaseXform {\r\n  constructor(id, formatCode) {\r\n    super();\r\n\r\n    this.id = id;\r\n    this.formatCode = formatCode;\r\n  }\r\n\r\n  get tag() {\r\n    return 'numFmt';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.leafNode('numFmt', {numFmtId: model.id, formatCode: model.formatCode});\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case 'numFmt':\r\n        this.model = {\r\n          id: parseInt(node.attributes.numFmtId, 10),\r\n          formatCode: node.attributes.formatCode.replace(/[\\\\](.)/g, '$1'),\r\n        };\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nNumFmtXform.getDefaultFmtId = function getDefaultFmtId(formatCode) {\r\n  return defaultFmtHash[formatCode];\r\n};\r\n\r\nNumFmtXform.getDefaultFmtCode = function getDefaultFmtCode(numFmtId) {\r\n  return defaultNumFormats[numFmtId] && defaultNumFormats[numFmtId].f;\r\n};\r\n\r\nmodule.exports = NumFmtXform;\r\n"]},"metadata":{},"sourceType":"script"}