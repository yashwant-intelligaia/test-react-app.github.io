{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform'); //   <t xml:space=\"preserve\"> is </t>\n\n\nvar TextXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(TextXform, _BaseXform);\n\n  var _super = _createSuper(TextXform);\n\n  function TextXform() {\n    _classCallCheck(this, TextXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode('t');\n\n      if (/^\\s|\\n|\\s$/.test(model)) {\n        xmlStream.addAttribute('xml:space', 'preserve');\n      }\n\n      xmlStream.writeText(model);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      switch (node.name) {\n        case 't':\n          this._text = [];\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      this._text.push(text);\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 't';\n    }\n  }, {\n    key: \"model\",\n    get: function get() {\n      return this._text.join('').replace(/_x([0-9A-F]{4})_/g, function ($0, $1) {\n        return String.fromCharCode(parseInt($1, 16));\n      });\n    }\n  }]);\n\n  return TextXform;\n}(BaseXform);\n\nmodule.exports = TextXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/text-xform.js"],"names":["BaseXform","require","TextXform","xmlStream","model","String","parseInt","node","text","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB,C,CAEA;;;IAEMC,S;;;;;;;;;;;;;2BAKGC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,QAAAA,CAAAA,GAAAA;;AACA,UAAI,aAAA,IAAA,CAAJ,KAAI,CAAJ,EAA8B;AAC5BA,QAAAA,SAAS,CAATA,YAAAA,CAAAA,WAAAA,EAAAA,UAAAA;AACD;;AACDA,MAAAA,SAAS,CAATA,SAAAA,CAAAA,KAAAA;AACAA,MAAAA,SAAS,CAATA,SAAAA;AACD;;;8BAQSI,I,EAAM;AACd,cAAQA,IAAI,CAAZ,IAAA;AACE,aAAA,GAAA;AACE,eAAA,KAAA,GAAA,EAAA;AACA,iBAAA,IAAA;;AACF;AACE,iBAAA,KAAA;AALJ;AAOD;;;8BAESC,I,EAAM;AACd,WAAA,KAAA,CAAA,IAAA,CAAA,IAAA;AACD;;;iCAEY;AACX,aAAA,KAAA;AACD;;;wBAnCS;AACR,aAAA,GAAA;AACD;;;wBAWW;AACV,aAAO,KAAA,KAAA,CAAA,IAAA,CAAA,EAAA,EAAA,OAAA,CAAA,mBAAA,EAEyB,UAAA,EAAA,EAAA,EAAA,EAAA;AAAA,eAAYH,MAAM,CAANA,YAAAA,CAAoBC,QAAQ,CAAA,EAAA,EAAxC,EAAwC,CAA5BD,CAAZ;AAFhC,OAAO,CAAP;AAGD;;;;EAlBqBL,S;;AAuCxBS,MAAM,CAANA,OAAAA,GAAAA,SAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\n//   <t xml:space=\"preserve\"> is </t>\r\n\r\nclass TextXform extends BaseXform {\r\n  get tag() {\r\n    return 't';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('t');\r\n    if (/^\\s|\\n|\\s$/.test(model)) {\r\n      xmlStream.addAttribute('xml:space', 'preserve');\r\n    }\r\n    xmlStream.writeText(model);\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  get model() {\r\n    return this._text\r\n      .join('')\r\n      .replace(/_x([0-9A-F]{4})_/g, ($0, $1) => String.fromCharCode(parseInt($1, 16)));\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case 't':\r\n        this._text = [];\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    this._text.push(text);\r\n  }\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = TextXform;\r\n"]},"metadata":{},"sourceType":"script"}