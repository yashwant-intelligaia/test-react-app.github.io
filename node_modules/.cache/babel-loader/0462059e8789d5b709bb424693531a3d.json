{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar _ = require('../utils/under-dash');\n\nvar Enums = require('./enums');\n\nvar colCache = require('../utils/col-cache');\n\nvar DEFAULT_COLUMN_WIDTH = 9; // Column defines the column properties for 1 column.\n// This includes header rows, widths, key, (style), etc.\n// Worksheet will condense the columns as appropriate during serialization\n\nvar Column = /*#__PURE__*/function () {\n  function Column(worksheet, number, defn) {\n    _classCallCheck(this, Column);\n\n    this._worksheet = worksheet;\n    this._number = number;\n\n    if (defn !== false) {\n      // sometimes defn will follow\n      this.defn = defn;\n    }\n  }\n\n  _createClass(Column, [{\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify({\n        key: this.key,\n        width: this.width,\n        headers: this.headers.length ? this.headers : undefined\n      });\n    }\n  }, {\n    key: \"equivalentTo\",\n    value: function equivalentTo(other) {\n      return this.width === other.width && this.hidden === other.hidden && this.outlineLevel === other.outlineLevel && _.isEqual(this.style, other.style);\n    }\n  }, {\n    key: \"eachCell\",\n    value: function eachCell(options, iteratee) {\n      var colNumber = this.number;\n\n      if (!iteratee) {\n        iteratee = options;\n        options = null;\n      }\n\n      this._worksheet.eachRow(options, function (row, rowNumber) {\n        iteratee(row.getCell(colNumber), rowNumber);\n      });\n    }\n  }, {\n    key: \"_applyStyle\",\n    // =========================================================================\n    // styles\n    value: function _applyStyle(name, value) {\n      this.style[name] = value;\n      this.eachCell(function (cell) {\n        cell[name] = value;\n      });\n      return value;\n    }\n  }, {\n    key: \"number\",\n    get: function get() {\n      return this._number;\n    }\n  }, {\n    key: \"worksheet\",\n    get: function get() {\n      return this._worksheet;\n    }\n  }, {\n    key: \"letter\",\n    get: function get() {\n      return colCache.n2l(this._number);\n    }\n  }, {\n    key: \"isCustomWidth\",\n    get: function get() {\n      return this.width !== undefined && this.width !== DEFAULT_COLUMN_WIDTH;\n    }\n  }, {\n    key: \"defn\",\n    get: function get() {\n      return {\n        header: this._header,\n        key: this.key,\n        width: this.width,\n        style: this.style,\n        hidden: this.hidden,\n        outlineLevel: this.outlineLevel\n      };\n    },\n    set: function set(value) {\n      if (value) {\n        this.key = value.key;\n        this.width = value.width !== undefined ? value.width : DEFAULT_COLUMN_WIDTH;\n        this.outlineLevel = value.outlineLevel;\n\n        if (value.style) {\n          this.style = value.style;\n        } else {\n          this.style = {};\n        } // headers must be set after style\n\n\n        this.header = value.header;\n        this._hidden = !!value.hidden;\n      } else {\n        delete this._header;\n        delete this._key;\n        delete this.width;\n        this.style = {};\n        this.outlineLevel = 0;\n      }\n    }\n  }, {\n    key: \"headers\",\n    get: function get() {\n      return this._header && this._header instanceof Array ? this._header : [this._header];\n    }\n  }, {\n    key: \"header\",\n    get: function get() {\n      return this._header;\n    },\n    set: function set(value) {\n      var _this = this;\n\n      if (value !== undefined) {\n        this._header = value;\n        this.headers.forEach(function (text, index) {\n          _this._worksheet.getCell(index + 1, _this.number).value = text;\n        });\n      } else {\n        this._header = undefined;\n      }\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      return this._key;\n    },\n    set: function set(value) {\n      var column = this._key && this._worksheet.getColumnKey(this._key);\n\n      if (column === this) {\n        this._worksheet.deleteColumnKey(this._key);\n      }\n\n      this._key = value;\n\n      if (value) {\n        this._worksheet.setColumnKey(this._key, this);\n      }\n    }\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return !!this._hidden;\n    },\n    set: function set(value) {\n      this._hidden = value;\n    }\n  }, {\n    key: \"outlineLevel\",\n    get: function get() {\n      return this._outlineLevel || 0;\n    },\n    set: function set(value) {\n      this._outlineLevel = value;\n    }\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return !!(this._outlineLevel && this._outlineLevel >= this._worksheet.properties.outlineLevelCol);\n    }\n  }, {\n    key: \"isDefault\",\n    get: function get() {\n      if (this.isCustomWidth) {\n        return false;\n      }\n\n      if (this.hidden) {\n        return false;\n      }\n\n      if (this.outlineLevel) {\n        return false;\n      }\n\n      var s = this.style;\n\n      if (s && (s.font || s.numFmt || s.alignment || s.border || s.fill || s.protection)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"headerCount\",\n    get: function get() {\n      return this.headers.length;\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      var v = [];\n      this.eachCell(function (cell, rowNumber) {\n        if (cell && cell.type !== Enums.ValueType.Null) {\n          v[rowNumber] = cell.value;\n        }\n      });\n      return v;\n    },\n    set: function set(v) {\n      var _this2 = this;\n\n      if (!v) {\n        return;\n      }\n\n      var colNumber = this.number;\n      var offset = 0;\n\n      if (v.hasOwnProperty('0')) {\n        // assume contiguous array, start at row 1\n        offset = 1;\n      }\n\n      v.forEach(function (value, index) {\n        _this2._worksheet.getCell(index + offset, colNumber).value = value;\n      });\n    }\n  }, {\n    key: \"numFmt\",\n    get: function get() {\n      return this.style.numFmt;\n    },\n    set: function set(value) {\n      this._applyStyle('numFmt', value);\n    }\n  }, {\n    key: \"font\",\n    get: function get() {\n      return this.style.font;\n    },\n    set: function set(value) {\n      this._applyStyle('font', value);\n    }\n  }, {\n    key: \"alignment\",\n    get: function get() {\n      return this.style.alignment;\n    },\n    set: function set(value) {\n      this._applyStyle('alignment', value);\n    }\n  }, {\n    key: \"protection\",\n    get: function get() {\n      return this.style.protection;\n    },\n    set: function set(value) {\n      this._applyStyle('protection', value);\n    }\n  }, {\n    key: \"border\",\n    get: function get() {\n      return this.style.border;\n    },\n    set: function set(value) {\n      this._applyStyle('border', value);\n    }\n  }, {\n    key: \"fill\",\n    get: function get() {\n      return this.style.fill;\n    },\n    set: function set(value) {\n      this._applyStyle('fill', value);\n    } // =============================================================================\n    // static functions\n\n  }], [{\n    key: \"toModel\",\n    value: function toModel(columns) {\n      // Convert array of Column into compressed list cols\n      var cols = [];\n      var col = null;\n\n      if (columns) {\n        columns.forEach(function (column, index) {\n          if (column.isDefault) {\n            if (col) {\n              col = null;\n            }\n          } else if (!col || !column.equivalentTo(col)) {\n            col = {\n              min: index + 1,\n              max: index + 1,\n              width: column.width !== undefined ? column.width : DEFAULT_COLUMN_WIDTH,\n              style: column.style,\n              isCustomWidth: column.isCustomWidth,\n              hidden: column.hidden,\n              outlineLevel: column.outlineLevel,\n              collapsed: column.collapsed\n            };\n            cols.push(col);\n          } else {\n            col.max = index + 1;\n          }\n        });\n      }\n\n      return cols.length ? cols : undefined;\n    }\n  }, {\n    key: \"fromModel\",\n    value: function fromModel(worksheet, cols) {\n      cols = cols || [];\n      var columns = [];\n      var count = 1;\n      var index = 0;\n\n      while (index < cols.length) {\n        var col = cols[index++];\n\n        while (count < col.min) {\n          columns.push(new Column(worksheet, count++));\n        }\n\n        while (count <= col.max) {\n          columns.push(new Column(worksheet, count++, col));\n        }\n      }\n\n      return columns.length ? columns : null;\n    }\n  }]);\n\n  return Column;\n}();\n\nmodule.exports = Column;","map":{"version":3,"sources":["../../../lib/doc/column.js"],"names":["_","require","Enums","colCache","DEFAULT_COLUMN_WIDTH","Column","defn","header","key","width","style","hidden","outlineLevel","value","index","column","headers","undefined","other","s","options","iteratee","colNumber","row","v","cell","offset","name","columns","cols","col","min","max","isCustomWidth","collapsed","worksheet","count","module"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst _ = require('../utils/under-dash');\r\n\r\nconst Enums = require('./enums');\r\nconst colCache = require('../utils/col-cache');\r\n\r\nconst DEFAULT_COLUMN_WIDTH = 9;\r\n\r\n// Column defines the column properties for 1 column.\r\n// This includes header rows, widths, key, (style), etc.\r\n// Worksheet will condense the columns as appropriate during serialization\r\nclass Column {\r\n  constructor(worksheet, number, defn) {\r\n    this._worksheet = worksheet;\r\n    this._number = number;\r\n    if (defn !== false) {\r\n      // sometimes defn will follow\r\n      this.defn = defn;\r\n    }\r\n  }\r\n\r\n  get number() {\r\n    return this._number;\r\n  }\r\n\r\n  get worksheet() {\r\n    return this._worksheet;\r\n  }\r\n\r\n  get letter() {\r\n    return colCache.n2l(this._number);\r\n  }\r\n\r\n  get isCustomWidth() {\r\n    return this.width !== undefined && this.width !== DEFAULT_COLUMN_WIDTH;\r\n  }\r\n\r\n  get defn() {\r\n    return {\r\n      header: this._header,\r\n      key: this.key,\r\n      width: this.width,\r\n      style: this.style,\r\n      hidden: this.hidden,\r\n      outlineLevel: this.outlineLevel,\r\n    };\r\n  }\r\n\r\n  set defn(value) {\r\n    if (value) {\r\n      this.key = value.key;\r\n      this.width = value.width !== undefined ? value.width : DEFAULT_COLUMN_WIDTH;\r\n      this.outlineLevel = value.outlineLevel;\r\n      if (value.style) {\r\n        this.style = value.style;\r\n      } else {\r\n        this.style = {};\r\n      }\r\n\r\n      // headers must be set after style\r\n      this.header = value.header;\r\n      this._hidden = !!value.hidden;\r\n    } else {\r\n      delete this._header;\r\n      delete this._key;\r\n      delete this.width;\r\n      this.style = {};\r\n      this.outlineLevel = 0;\r\n    }\r\n  }\r\n\r\n  get headers() {\r\n    return this._header && this._header instanceof Array ? this._header : [this._header];\r\n  }\r\n\r\n  get header() {\r\n    return this._header;\r\n  }\r\n\r\n  set header(value) {\r\n    if (value !== undefined) {\r\n      this._header = value;\r\n      this.headers.forEach((text, index) => {\r\n        this._worksheet.getCell(index + 1, this.number).value = text;\r\n      });\r\n    } else {\r\n      this._header = undefined;\r\n    }\r\n  }\r\n\r\n  get key() {\r\n    return this._key;\r\n  }\r\n\r\n  set key(value) {\r\n    const column = this._key && this._worksheet.getColumnKey(this._key);\r\n    if (column === this) {\r\n      this._worksheet.deleteColumnKey(this._key);\r\n    }\r\n\r\n    this._key = value;\r\n    if (value) {\r\n      this._worksheet.setColumnKey(this._key, this);\r\n    }\r\n  }\r\n\r\n  get hidden() {\r\n    return !!this._hidden;\r\n  }\r\n\r\n  set hidden(value) {\r\n    this._hidden = value;\r\n  }\r\n\r\n  get outlineLevel() {\r\n    return this._outlineLevel || 0;\r\n  }\r\n\r\n  set outlineLevel(value) {\r\n    this._outlineLevel = value;\r\n  }\r\n\r\n  get collapsed() {\r\n    return !!(\r\n      this._outlineLevel && this._outlineLevel >= this._worksheet.properties.outlineLevelCol\r\n    );\r\n  }\r\n\r\n  toString() {\r\n    return JSON.stringify({\r\n      key: this.key,\r\n      width: this.width,\r\n      headers: this.headers.length ? this.headers : undefined,\r\n    });\r\n  }\r\n\r\n  equivalentTo(other) {\r\n    return (\r\n      this.width === other.width &&\r\n      this.hidden === other.hidden &&\r\n      this.outlineLevel === other.outlineLevel &&\r\n      _.isEqual(this.style, other.style)\r\n    );\r\n  }\r\n\r\n  get isDefault() {\r\n    if (this.isCustomWidth) {\r\n      return false;\r\n    }\r\n    if (this.hidden) {\r\n      return false;\r\n    }\r\n    if (this.outlineLevel) {\r\n      return false;\r\n    }\r\n    const s = this.style;\r\n    if (s && (s.font || s.numFmt || s.alignment || s.border || s.fill || s.protection)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  get headerCount() {\r\n    return this.headers.length;\r\n  }\r\n\r\n  eachCell(options, iteratee) {\r\n    const colNumber = this.number;\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = null;\r\n    }\r\n    this._worksheet.eachRow(options, (row, rowNumber) => {\r\n      iteratee(row.getCell(colNumber), rowNumber);\r\n    });\r\n  }\r\n\r\n  get values() {\r\n    const v = [];\r\n    this.eachCell((cell, rowNumber) => {\r\n      if (cell && cell.type !== Enums.ValueType.Null) {\r\n        v[rowNumber] = cell.value;\r\n      }\r\n    });\r\n    return v;\r\n  }\r\n\r\n  set values(v) {\r\n    if (!v) {\r\n      return;\r\n    }\r\n    const colNumber = this.number;\r\n    let offset = 0;\r\n    if (v.hasOwnProperty('0')) {\r\n      // assume contiguous array, start at row 1\r\n      offset = 1;\r\n    }\r\n    v.forEach((value, index) => {\r\n      this._worksheet.getCell(index + offset, colNumber).value = value;\r\n    });\r\n  }\r\n\r\n  // =========================================================================\r\n  // styles\r\n  _applyStyle(name, value) {\r\n    this.style[name] = value;\r\n    this.eachCell(cell => {\r\n      cell[name] = value;\r\n    });\r\n    return value;\r\n  }\r\n\r\n  get numFmt() {\r\n    return this.style.numFmt;\r\n  }\r\n\r\n  set numFmt(value) {\r\n    this._applyStyle('numFmt', value);\r\n  }\r\n\r\n  get font() {\r\n    return this.style.font;\r\n  }\r\n\r\n  set font(value) {\r\n    this._applyStyle('font', value);\r\n  }\r\n\r\n  get alignment() {\r\n    return this.style.alignment;\r\n  }\r\n\r\n  set alignment(value) {\r\n    this._applyStyle('alignment', value);\r\n  }\r\n\r\n  get protection() {\r\n    return this.style.protection;\r\n  }\r\n\r\n  set protection(value) {\r\n    this._applyStyle('protection', value);\r\n  }\r\n\r\n  get border() {\r\n    return this.style.border;\r\n  }\r\n\r\n  set border(value) {\r\n    this._applyStyle('border', value);\r\n  }\r\n\r\n  get fill() {\r\n    return this.style.fill;\r\n  }\r\n\r\n  set fill(value) {\r\n    this._applyStyle('fill', value);\r\n  }\r\n\r\n  // =============================================================================\r\n  // static functions\r\n\r\n  static toModel(columns) {\r\n    // Convert array of Column into compressed list cols\r\n    const cols = [];\r\n    let col = null;\r\n    if (columns) {\r\n      columns.forEach((column, index) => {\r\n        if (column.isDefault) {\r\n          if (col) {\r\n            col = null;\r\n          }\r\n        } else if (!col || !column.equivalentTo(col)) {\r\n          col = {\r\n            min: index + 1,\r\n            max: index + 1,\r\n            width: column.width !== undefined ? column.width : DEFAULT_COLUMN_WIDTH,\r\n            style: column.style,\r\n            isCustomWidth: column.isCustomWidth,\r\n            hidden: column.hidden,\r\n            outlineLevel: column.outlineLevel,\r\n            collapsed: column.collapsed,\r\n          };\r\n          cols.push(col);\r\n        } else {\r\n          col.max = index + 1;\r\n        }\r\n      });\r\n    }\r\n    return cols.length ? cols : undefined;\r\n  }\r\n\r\n  static fromModel(worksheet, cols) {\r\n    cols = cols || [];\r\n    const columns = [];\r\n    let count = 1;\r\n    let index = 0;\r\n    while (index < cols.length) {\r\n      const col = cols[index++];\r\n      while (count < col.min) {\r\n        columns.push(new Column(worksheet, count++));\r\n      }\r\n      while (count <= col.max) {\r\n        columns.push(new Column(worksheet, count++, col));\r\n      }\r\n    }\r\n    return columns.length ? columns : null;\r\n  }\r\n}\r\n\r\nmodule.exports = Column;\r\n"]},"metadata":{},"sourceType":"script"}