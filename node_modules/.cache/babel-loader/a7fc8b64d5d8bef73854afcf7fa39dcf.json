{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform');\n\nvar SharedStringXform = require('./shared-string-xform');\n\nvar SharedStringsXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(SharedStringsXform, _BaseXform);\n\n  var _super = _createSuper(SharedStringsXform);\n\n  function SharedStringsXform(model) {\n    var _this;\n\n    _classCallCheck(this, SharedStringsXform);\n\n    _this = _super.call(this);\n    _this.model = model || {\n      values: [],\n      count: 0\n    };\n    _this.hash = Object.create(null);\n    _this.rich = Object.create(null);\n    return _this;\n  }\n\n  _createClass(SharedStringsXform, [{\n    key: \"getString\",\n    value: function getString(index) {\n      return this.model.values[index];\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      return value.richText ? this.addRichText(value) : this.addText(value);\n    }\n  }, {\n    key: \"addText\",\n    value: function addText(value) {\n      var index = this.hash[value];\n\n      if (index === undefined) {\n        index = this.hash[value] = this.model.values.length;\n        this.model.values.push(value);\n      }\n\n      this.model.count++;\n      return index;\n    }\n  }, {\n    key: \"addRichText\",\n    value: function addRichText(value) {\n      // TODO: add WeakMap here\n      var xml = this.sharedStringXform.toXml(value);\n      var index = this.rich[xml];\n\n      if (index === undefined) {\n        index = this.rich[xml] = this.model.values.length;\n        this.model.values.push(value);\n      }\n\n      this.model.count++;\n      return index;\n    } // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n    // <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"<%=totalRefs%>\" uniqueCount=\"<%=count%>\">\n    //   <si><t><%=text%></t></si>\n    //   <si><r><rPr></rPr><t></t></r></si>\n    // </sst>\n\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      model = model || this._values;\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n      xmlStream.openNode('sst', {\n        xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n        count: model.count,\n        uniqueCount: model.values.length\n      });\n      var sx = this.sharedStringXform;\n      model.values.forEach(function (sharedString) {\n        sx.render(xmlStream, sharedString);\n      });\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case 'sst':\n          return true;\n\n        case 'si':\n          this.parser = this.sharedStringXform;\n          this.parser.parseOpen(node);\n          return true;\n\n        default:\n          throw new Error(\"Unexpected xml node in parseOpen: \".concat(JSON.stringify(node)));\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.model.values.push(this.parser.model);\n          this.model.count++;\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case 'sst':\n          return false;\n\n        default:\n          throw new Error(\"Unexpected xml node in parseClose: \".concat(name));\n      }\n    }\n  }, {\n    key: \"sharedStringXform\",\n    get: function get() {\n      return this._sharedStringXform || (this._sharedStringXform = new SharedStringXform());\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this.model.values;\n    }\n  }, {\n    key: \"uniqueCount\",\n    get: function get() {\n      return this.model.values.length;\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this.model.count;\n    }\n  }]);\n\n  return SharedStringsXform;\n}(BaseXform);\n\nmodule.exports = SharedStringsXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/shared-strings-xform.js"],"names":["XmlStream","require","BaseXform","SharedStringXform","SharedStringsXform","model","values","count","Object","index","value","xml","xmlStream","xmlns","uniqueCount","length","sx","node","JSON","text","name","module"],"mappings":"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","sourcesContent":["const XmlStream = require('../../../utils/xml-stream');\r\nconst BaseXform = require('../base-xform');\r\nconst SharedStringXform = require('./shared-string-xform');\r\n\r\nclass SharedStringsXform extends BaseXform {\r\n  constructor(model) {\r\n    super();\r\n\r\n    this.model = model || {\r\n      values: [],\r\n      count: 0,\r\n    };\r\n    this.hash = Object.create(null);\r\n    this.rich = Object.create(null);\r\n  }\r\n\r\n  get sharedStringXform() {\r\n    return this._sharedStringXform || (this._sharedStringXform = new SharedStringXform());\r\n  }\r\n\r\n  get values() {\r\n    return this.model.values;\r\n  }\r\n\r\n  get uniqueCount() {\r\n    return this.model.values.length;\r\n  }\r\n\r\n  get count() {\r\n    return this.model.count;\r\n  }\r\n\r\n  getString(index) {\r\n    return this.model.values[index];\r\n  }\r\n\r\n  add(value) {\r\n    return value.richText ? this.addRichText(value) : this.addText(value);\r\n  }\r\n\r\n  addText(value) {\r\n    let index = this.hash[value];\r\n    if (index === undefined) {\r\n      index = this.hash[value] = this.model.values.length;\r\n      this.model.values.push(value);\r\n    }\r\n    this.model.count++;\r\n    return index;\r\n  }\r\n\r\n  addRichText(value) {\r\n    // TODO: add WeakMap here\r\n    const xml = this.sharedStringXform.toXml(value);\r\n    let index = this.rich[xml];\r\n    if (index === undefined) {\r\n      index = this.rich[xml] = this.model.values.length;\r\n      this.model.values.push(value);\r\n    }\r\n    this.model.count++;\r\n    return index;\r\n  }\r\n\r\n  // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n  // <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"<%=totalRefs%>\" uniqueCount=\"<%=count%>\">\r\n  //   <si><t><%=text%></t></si>\r\n  //   <si><r><rPr></rPr><t></t></r></si>\r\n  // </sst>\r\n\r\n  render(xmlStream, model) {\r\n    model = model || this._values;\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('sst', {\r\n      xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n      count: model.count,\r\n      uniqueCount: model.values.length,\r\n    });\r\n\r\n    const sx = this.sharedStringXform;\r\n    model.values.forEach(sharedString => {\r\n      sx.render(xmlStream, sharedString);\r\n    });\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'sst':\r\n        return true;\r\n      case 'si':\r\n        this.parser = this.sharedStringXform;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        throw new Error(`Unexpected xml node in parseOpen: ${JSON.stringify(node)}`);\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.values.push(this.parser.model);\r\n        this.model.count++;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case 'sst':\r\n        return false;\r\n      default:\r\n        throw new Error(`Unexpected xml node in parseClose: ${name}`);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = SharedStringsXform;\r\n"]},"metadata":{},"sourceType":"script"}