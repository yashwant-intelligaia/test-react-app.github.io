{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar VmlTextboxXform = require('./vml-textbox-xform');\n\nvar VmlClientDataXform = require('./vml-client-data-xform');\n\nvar VmlShapeXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(VmlShapeXform, _BaseXform);\n\n  var _super = _createSuper(VmlShapeXform);\n\n  function VmlShapeXform() {\n    var _this;\n\n    _classCallCheck(this, VmlShapeXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'v:textbox': new VmlTextboxXform(),\n      'x:ClientData': new VmlClientDataXform()\n    };\n    return _this;\n  }\n\n  _createClass(VmlShapeXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model, index) {\n      xmlStream.openNode('v:shape', VmlShapeXform.V_SHAPE_ATTRIBUTES(model, index));\n      xmlStream.leafNode('v:fill', {\n        color2: 'infoBackground [80]'\n      });\n      xmlStream.leafNode('v:shadow', {\n        color: 'none [81]',\n        obscured: 't'\n      });\n      xmlStream.leafNode('v:path', {\n        'o:connecttype': 'none'\n      });\n      this.map['v:textbox'].render(xmlStream, model);\n      this.map['x:ClientData'].render(xmlStream, model);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case this.tag:\n          this.reset();\n          this.model = {\n            margins: {\n              insetmode: node.attributes['o:insetmode']\n            },\n            anchor: '',\n            editAs: '',\n            protection: {}\n          };\n          break;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n          }\n\n          break;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case this.tag:\n          this.model.margins.inset = this.map['v:textbox'].model && this.map['v:textbox'].model.inset;\n          this.model.protection = this.map['x:ClientData'].model && this.map['x:ClientData'].model.protection;\n          this.model.anchor = this.map['x:ClientData'].model && this.map['x:ClientData'].model.anchor;\n          this.model.editAs = this.map['x:ClientData'].model && this.map['x:ClientData'].model.editAs;\n          return false;\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'v:shape';\n    }\n  }]);\n\n  return VmlShapeXform;\n}(BaseXform);\n\nVmlShapeXform.V_SHAPE_ATTRIBUTES = function (model, index) {\n  return {\n    id: \"_x0000_s\".concat(1025 + index),\n    type: '#_x0000_t202',\n    style: 'position:absolute; margin-left:105.3pt;margin-top:10.5pt;width:97.8pt;height:59.1pt;z-index:1;visibility:hidden',\n    fillcolor: 'infoBackground [80]',\n    strokecolor: 'none [81]',\n    'o:insetmode': model.note.margins && model.note.margins.insetmode\n  };\n};\n\nmodule.exports = VmlShapeXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/comment/vml-shape-xform.js"],"names":["BaseXform","require","VmlTextboxXform","VmlClientDataXform","VmlShapeXform","xmlStream","model","index","color2","color","obscured","node","margins","insetmode","anchor","editAs","protection","text","name","id","type","style","fillcolor","strokecolor","module"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\r\nconst VmlTextboxXform = require('./vml-textbox-xform');\r\nconst VmlClientDataXform = require('./vml-client-data-xform');\r\n\r\nclass VmlShapeXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n    this.map = {\r\n      'v:textbox': new VmlTextboxXform(),\r\n      'x:ClientData': new VmlClientDataXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'v:shape';\r\n  }\r\n\r\n  render(xmlStream, model, index) {\r\n    xmlStream.openNode('v:shape', VmlShapeXform.V_SHAPE_ATTRIBUTES(model, index));\r\n\r\n    xmlStream.leafNode('v:fill', {color2: 'infoBackground [80]'});\r\n    xmlStream.leafNode('v:shadow', {color: 'none [81]', obscured: 't'});\r\n    xmlStream.leafNode('v:path', {'o:connecttype': 'none'});\r\n    this.map['v:textbox'].render(xmlStream, model);\r\n    this.map['x:ClientData'].render(xmlStream, model);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.reset();\r\n        this.model = {\r\n          margins: {\r\n            insetmode: node.attributes['o:insetmode'],\r\n          },\r\n          anchor: '',\r\n          editAs: '',\r\n          protection: {},\r\n        };\r\n        break;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n        }\r\n        break;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        this.model.margins.inset = this.map['v:textbox'].model && this.map['v:textbox'].model.inset;\r\n        this.model.protection =\r\n          this.map['x:ClientData'].model && this.map['x:ClientData'].model.protection;\r\n        this.model.anchor = this.map['x:ClientData'].model && this.map['x:ClientData'].model.anchor;\r\n        this.model.editAs = this.map['x:ClientData'].model && this.map['x:ClientData'].model.editAs;\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nVmlShapeXform.V_SHAPE_ATTRIBUTES = (model, index) => ({\r\n  id: `_x0000_s${1025 + index}`,\r\n  type: '#_x0000_t202',\r\n  style:\r\n    'position:absolute; margin-left:105.3pt;margin-top:10.5pt;width:97.8pt;height:59.1pt;z-index:1;visibility:hidden',\r\n  fillcolor: 'infoBackground [80]',\r\n  strokecolor: 'none [81]',\r\n  'o:insetmode': model.note.margins && model.note.margins.insetmode,\r\n});\r\n\r\nmodule.exports = VmlShapeXform;\r\n"]},"metadata":{},"sourceType":"script"}