{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar colCache = require('../utils/col-cache'); // used by worksheet to calculate sheet dimensions\n\n\nvar Range = /*#__PURE__*/function () {\n  function Range() {\n    _classCallCheck(this, Range);\n\n    this.decode(arguments);\n  }\n\n  _createClass(Range, [{\n    key: \"setTLBR\",\n    value: function setTLBR(t, l, b, r, s) {\n      if (arguments.length < 4) {\n        // setTLBR(tl, br, s)\n        var tl = colCache.decodeAddress(t);\n        var br = colCache.decodeAddress(l);\n        this.model = {\n          top: Math.min(tl.row, br.row),\n          left: Math.min(tl.col, br.col),\n          bottom: Math.max(tl.row, br.row),\n          right: Math.max(tl.col, br.col),\n          sheetName: b\n        };\n        this.setTLBR(tl.row, tl.col, br.row, br.col, s);\n      } else {\n        // setTLBR(t, l, b, r, s)\n        this.model = {\n          top: Math.min(t, b),\n          left: Math.min(l, r),\n          bottom: Math.max(t, b),\n          right: Math.max(l, r),\n          sheetName: s\n        };\n      }\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(argv) {\n      switch (argv.length) {\n        case 5:\n          // [t,l,b,r,s]\n          this.setTLBR(argv[0], argv[1], argv[2], argv[3], argv[4]);\n          break;\n\n        case 4:\n          // [t,l,b,r]\n          this.setTLBR(argv[0], argv[1], argv[2], argv[3]);\n          break;\n\n        case 3:\n          // [tl,br,s]\n          this.setTLBR(argv[0], argv[1], argv[2]);\n          break;\n\n        case 2:\n          // [tl,br]\n          this.setTLBR(argv[0], argv[1]);\n          break;\n\n        case 1:\n          {\n            var value = argv[0];\n\n            if (value instanceof Range) {\n              // copy constructor\n              this.model = {\n                top: value.model.top,\n                left: value.model.left,\n                bottom: value.model.bottom,\n                right: value.model.right,\n                sheetName: value.sheetName\n              };\n            } else if (value instanceof Array) {\n              // an arguments array\n              this.decode(value);\n            } else if (value.top && value.left && value.bottom && value.right) {\n              // a model\n              this.model = {\n                top: value.top,\n                left: value.left,\n                bottom: value.bottom,\n                right: value.right,\n                sheetName: value.sheetName\n              };\n            } else {\n              // [sheetName!]tl:br\n              var tlbr = colCache.decodeEx(value);\n\n              if (tlbr.top) {\n                this.model = {\n                  top: tlbr.top,\n                  left: tlbr.left,\n                  bottom: tlbr.bottom,\n                  right: tlbr.right,\n                  sheetName: tlbr.sheetName\n                };\n              } else {\n                this.model = {\n                  top: tlbr.row,\n                  left: tlbr.col,\n                  bottom: tlbr.row,\n                  right: tlbr.col,\n                  sheetName: tlbr.sheetName\n                };\n              }\n            }\n\n            break;\n          }\n\n        case 0:\n          this.model = {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0\n          };\n          break;\n\n        default:\n          throw new Error(\"Invalid number of arguments to _getDimensions() - \".concat(argv.length));\n      }\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(top, left, bottom, right) {\n      if (!this.model.top || top < this.top) this.top = top;\n      if (!this.model.left || left < this.left) this.left = left;\n      if (!this.model.bottom || bottom > this.bottom) this.bottom = bottom;\n      if (!this.model.right || right > this.right) this.right = right;\n    }\n  }, {\n    key: \"expandRow\",\n    value: function expandRow(row) {\n      if (row) {\n        var dimensions = row.dimensions,\n            number = row.number;\n\n        if (dimensions) {\n          this.expand(number, dimensions.min, number, dimensions.max);\n        }\n      }\n    }\n  }, {\n    key: \"expandToAddress\",\n    value: function expandToAddress(addressStr) {\n      var address = colCache.decodeEx(addressStr);\n      this.expand(address.row, address.col, address.row, address.col);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.range;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(other) {\n      if (other.sheetName && this.sheetName && other.sheetName !== this.sheetName) return false;\n      if (other.bottom < this.top) return false;\n      if (other.top > this.bottom) return false;\n      if (other.right < this.left) return false;\n      if (other.left > this.right) return false;\n      return true;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(addressStr) {\n      var address = colCache.decodeEx(addressStr);\n      return this.containsEx(address);\n    }\n  }, {\n    key: \"containsEx\",\n    value: function containsEx(address) {\n      if (address.sheetName && this.sheetName && address.sheetName !== this.sheetName) return false;\n      return address.row >= this.top && address.row <= this.bottom && address.col >= this.left && address.col <= this.right;\n    }\n  }, {\n    key: \"forEachAddress\",\n    value: function forEachAddress(cb) {\n      for (var col = this.left; col <= this.right; col++) {\n        for (var row = this.top; row <= this.bottom; row++) {\n          cb(colCache.encodeAddress(row, col), row, col);\n        }\n      }\n    }\n  }, {\n    key: \"top\",\n    get: function get() {\n      return this.model.top || 1;\n    },\n    set: function set(value) {\n      this.model.top = value;\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      return this.model.left || 1;\n    },\n    set: function set(value) {\n      this.model.left = value;\n    }\n  }, {\n    key: \"bottom\",\n    get: function get() {\n      return this.model.bottom || 1;\n    },\n    set: function set(value) {\n      this.model.bottom = value;\n    }\n  }, {\n    key: \"right\",\n    get: function get() {\n      return this.model.right || 1;\n    },\n    set: function set(value) {\n      this.model.right = value;\n    }\n  }, {\n    key: \"sheetName\",\n    get: function get() {\n      return this.model.sheetName;\n    },\n    set: function set(value) {\n      this.model.sheetName = value;\n    }\n  }, {\n    key: \"_serialisedSheetName\",\n    get: function get() {\n      var sheetName = this.model.sheetName;\n\n      if (sheetName) {\n        if (/^[a-zA-Z0-9]*$/.test(sheetName)) {\n          return \"\".concat(sheetName, \"!\");\n        }\n\n        return \"'\".concat(sheetName, \"'!\");\n      }\n\n      return '';\n    }\n  }, {\n    key: \"tl\",\n    get: function get() {\n      return colCache.n2l(this.left) + this.top;\n    }\n  }, {\n    key: \"$t$l\",\n    get: function get() {\n      return \"$\".concat(colCache.n2l(this.left), \"$\").concat(this.top);\n    }\n  }, {\n    key: \"br\",\n    get: function get() {\n      return colCache.n2l(this.right) + this.bottom;\n    }\n  }, {\n    key: \"$b$r\",\n    get: function get() {\n      return \"$\".concat(colCache.n2l(this.right), \"$\").concat(this.bottom);\n    }\n  }, {\n    key: \"range\",\n    get: function get() {\n      return \"\".concat(this._serialisedSheetName + this.tl, \":\").concat(this.br);\n    }\n  }, {\n    key: \"$range\",\n    get: function get() {\n      return \"\".concat(this._serialisedSheetName + this.$t$l, \":\").concat(this.$b$r);\n    }\n  }, {\n    key: \"shortRange\",\n    get: function get() {\n      return this.count > 1 ? this.range : this._serialisedSheetName + this.tl;\n    }\n  }, {\n    key: \"$shortRange\",\n    get: function get() {\n      return this.count > 1 ? this.$range : this._serialisedSheetName + this.$t$l;\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return (1 + this.bottom - this.top) * (1 + this.right - this.left);\n    }\n  }]);\n\n  return Range;\n}();\n\nmodule.exports = Range;","map":{"version":3,"sources":["../../../lib/doc/range.js"],"names":["colCache","require","Range","t","l","b","r","s","arguments","tl","br","top","Math","left","bottom","right","sheetName","argv","value","tlbr","row","dimensions","number","addressStr","address","other","cb","col","module"],"mappings":"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","sourcesContent":["const colCache = require('../utils/col-cache');\r\n\r\n// used by worksheet to calculate sheet dimensions\r\nclass Range {\r\n  constructor() {\r\n    this.decode(arguments);\r\n  }\r\n\r\n  setTLBR(t, l, b, r, s) {\r\n    if (arguments.length < 4) {\r\n      // setTLBR(tl, br, s)\r\n      const tl = colCache.decodeAddress(t);\r\n      const br = colCache.decodeAddress(l);\r\n      this.model = {\r\n        top: Math.min(tl.row, br.row),\r\n        left: Math.min(tl.col, br.col),\r\n        bottom: Math.max(tl.row, br.row),\r\n        right: Math.max(tl.col, br.col),\r\n        sheetName: b,\r\n      };\r\n\r\n      this.setTLBR(tl.row, tl.col, br.row, br.col, s);\r\n    } else {\r\n      // setTLBR(t, l, b, r, s)\r\n      this.model = {\r\n        top: Math.min(t, b),\r\n        left: Math.min(l, r),\r\n        bottom: Math.max(t, b),\r\n        right: Math.max(l, r),\r\n        sheetName: s,\r\n      };\r\n    }\r\n  }\r\n\r\n  decode(argv) {\r\n    switch (argv.length) {\r\n      case 5: // [t,l,b,r,s]\r\n        this.setTLBR(argv[0], argv[1], argv[2], argv[3], argv[4]);\r\n        break;\r\n      case 4: // [t,l,b,r]\r\n        this.setTLBR(argv[0], argv[1], argv[2], argv[3]);\r\n        break;\r\n\r\n      case 3: // [tl,br,s]\r\n        this.setTLBR(argv[0], argv[1], argv[2]);\r\n        break;\r\n      case 2: // [tl,br]\r\n        this.setTLBR(argv[0], argv[1]);\r\n        break;\r\n\r\n      case 1: {\r\n        const value = argv[0];\r\n        if (value instanceof Range) {\r\n          // copy constructor\r\n          this.model = {\r\n            top: value.model.top,\r\n            left: value.model.left,\r\n            bottom: value.model.bottom,\r\n            right: value.model.right,\r\n            sheetName: value.sheetName,\r\n          };\r\n        } else if (value instanceof Array) {\r\n          // an arguments array\r\n          this.decode(value);\r\n        } else if (value.top && value.left && value.bottom && value.right) {\r\n          // a model\r\n          this.model = {\r\n            top: value.top,\r\n            left: value.left,\r\n            bottom: value.bottom,\r\n            right: value.right,\r\n            sheetName: value.sheetName,\r\n          };\r\n        } else {\r\n          // [sheetName!]tl:br\r\n          const tlbr = colCache.decodeEx(value);\r\n          if (tlbr.top) {\r\n            this.model = {\r\n              top: tlbr.top,\r\n              left: tlbr.left,\r\n              bottom: tlbr.bottom,\r\n              right: tlbr.right,\r\n              sheetName: tlbr.sheetName,\r\n            };\r\n          } else {\r\n            this.model = {\r\n              top: tlbr.row,\r\n              left: tlbr.col,\r\n              bottom: tlbr.row,\r\n              right: tlbr.col,\r\n              sheetName: tlbr.sheetName,\r\n            };\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 0:\r\n        this.model = {\r\n          top: 0,\r\n          left: 0,\r\n          bottom: 0,\r\n          right: 0,\r\n        };\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`Invalid number of arguments to _getDimensions() - ${argv.length}`);\r\n    }\r\n  }\r\n\r\n  get top() {\r\n    return this.model.top || 1;\r\n  }\r\n\r\n  set top(value) {\r\n    this.model.top = value;\r\n  }\r\n\r\n  get left() {\r\n    return this.model.left || 1;\r\n  }\r\n\r\n  set left(value) {\r\n    this.model.left = value;\r\n  }\r\n\r\n  get bottom() {\r\n    return this.model.bottom || 1;\r\n  }\r\n\r\n  set bottom(value) {\r\n    this.model.bottom = value;\r\n  }\r\n\r\n  get right() {\r\n    return this.model.right || 1;\r\n  }\r\n\r\n  set right(value) {\r\n    this.model.right = value;\r\n  }\r\n\r\n  get sheetName() {\r\n    return this.model.sheetName;\r\n  }\r\n\r\n  set sheetName(value) {\r\n    this.model.sheetName = value;\r\n  }\r\n\r\n  get _serialisedSheetName() {\r\n    const {sheetName} = this.model;\r\n    if (sheetName) {\r\n      if (/^[a-zA-Z0-9]*$/.test(sheetName)) {\r\n        return `${sheetName}!`;\r\n      }\r\n      return `'${sheetName}'!`;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  expand(top, left, bottom, right) {\r\n    if (!this.model.top || top < this.top) this.top = top;\r\n    if (!this.model.left || left < this.left) this.left = left;\r\n    if (!this.model.bottom || bottom > this.bottom) this.bottom = bottom;\r\n    if (!this.model.right || right > this.right) this.right = right;\r\n  }\r\n\r\n  expandRow(row) {\r\n    if (row) {\r\n      const {dimensions, number} = row;\r\n      if (dimensions) {\r\n        this.expand(number, dimensions.min, number, dimensions.max);\r\n      }\r\n    }\r\n  }\r\n\r\n  expandToAddress(addressStr) {\r\n    const address = colCache.decodeEx(addressStr);\r\n    this.expand(address.row, address.col, address.row, address.col);\r\n  }\r\n\r\n  get tl() {\r\n    return colCache.n2l(this.left) + this.top;\r\n  }\r\n\r\n  get $t$l() {\r\n    return `$${colCache.n2l(this.left)}$${this.top}`;\r\n  }\r\n\r\n  get br() {\r\n    return colCache.n2l(this.right) + this.bottom;\r\n  }\r\n\r\n  get $b$r() {\r\n    return `$${colCache.n2l(this.right)}$${this.bottom}`;\r\n  }\r\n\r\n  get range() {\r\n    return `${this._serialisedSheetName + this.tl}:${this.br}`;\r\n  }\r\n\r\n  get $range() {\r\n    return `${this._serialisedSheetName + this.$t$l}:${this.$b$r}`;\r\n  }\r\n\r\n  get shortRange() {\r\n    return this.count > 1 ? this.range : this._serialisedSheetName + this.tl;\r\n  }\r\n\r\n  get $shortRange() {\r\n    return this.count > 1 ? this.$range : this._serialisedSheetName + this.$t$l;\r\n  }\r\n\r\n  get count() {\r\n    return (1 + this.bottom - this.top) * (1 + this.right - this.left);\r\n  }\r\n\r\n  toString() {\r\n    return this.range;\r\n  }\r\n\r\n  intersects(other) {\r\n    if (other.sheetName && this.sheetName && other.sheetName !== this.sheetName) return false;\r\n    if (other.bottom < this.top) return false;\r\n    if (other.top > this.bottom) return false;\r\n    if (other.right < this.left) return false;\r\n    if (other.left > this.right) return false;\r\n    return true;\r\n  }\r\n\r\n  contains(addressStr) {\r\n    const address = colCache.decodeEx(addressStr);\r\n    return this.containsEx(address);\r\n  }\r\n\r\n  containsEx(address) {\r\n    if (address.sheetName && this.sheetName && address.sheetName !== this.sheetName) return false;\r\n    return (\r\n      address.row >= this.top &&\r\n      address.row <= this.bottom &&\r\n      address.col >= this.left &&\r\n      address.col <= this.right\r\n    );\r\n  }\r\n\r\n  forEachAddress(cb) {\r\n    for (let col = this.left; col <= this.right; col++) {\r\n      for (let row = this.top; row <= this.bottom; row++) {\r\n        cb(colCache.encodeAddress(row, col), row, col);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Range;\r\n"]},"metadata":{},"sourceType":"script"}