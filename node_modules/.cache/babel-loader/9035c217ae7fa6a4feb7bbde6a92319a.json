{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar ColorXform = require('./color-xform');\n\nvar BooleanXform = require('../simple/boolean-xform');\n\nvar IntegerXform = require('../simple/integer-xform');\n\nvar StringXform = require('../simple/string-xform');\n\nvar UnderlineXform = require('./underline-xform');\n\nvar _ = require('../../../utils/under-dash');\n\nvar BaseXform = require('../base-xform'); // Font encapsulates translation from font model to xlsx\n\n\nvar FontXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(FontXform, _BaseXform);\n\n  var _super = _createSuper(FontXform);\n\n  function FontXform(options) {\n    var _this;\n\n    _classCallCheck(this, FontXform);\n\n    _this = _super.call(this);\n    _this.options = options || FontXform.OPTIONS;\n    _this.map = {\n      b: {\n        prop: 'bold',\n        xform: new BooleanXform({\n          tag: 'b',\n          attr: 'val'\n        })\n      },\n      i: {\n        prop: 'italic',\n        xform: new BooleanXform({\n          tag: 'i',\n          attr: 'val'\n        })\n      },\n      u: {\n        prop: 'underline',\n        xform: new UnderlineXform()\n      },\n      charset: {\n        prop: 'charset',\n        xform: new IntegerXform({\n          tag: 'charset',\n          attr: 'val'\n        })\n      },\n      color: {\n        prop: 'color',\n        xform: new ColorXform()\n      },\n      condense: {\n        prop: 'condense',\n        xform: new BooleanXform({\n          tag: 'condense',\n          attr: 'val'\n        })\n      },\n      extend: {\n        prop: 'extend',\n        xform: new BooleanXform({\n          tag: 'extend',\n          attr: 'val'\n        })\n      },\n      family: {\n        prop: 'family',\n        xform: new IntegerXform({\n          tag: 'family',\n          attr: 'val'\n        })\n      },\n      outline: {\n        prop: 'outline',\n        xform: new BooleanXform({\n          tag: 'outline',\n          attr: 'val'\n        })\n      },\n      vertAlign: {\n        prop: 'vertAlign',\n        xform: new StringXform({\n          tag: 'vertAlign',\n          attr: 'val'\n        })\n      },\n      scheme: {\n        prop: 'scheme',\n        xform: new StringXform({\n          tag: 'scheme',\n          attr: 'val'\n        })\n      },\n      shadow: {\n        prop: 'shadow',\n        xform: new BooleanXform({\n          tag: 'shadow',\n          attr: 'val'\n        })\n      },\n      strike: {\n        prop: 'strike',\n        xform: new BooleanXform({\n          tag: 'strike',\n          attr: 'val'\n        })\n      },\n      sz: {\n        prop: 'size',\n        xform: new IntegerXform({\n          tag: 'sz',\n          attr: 'val'\n        })\n      }\n    };\n    _this.map[_this.options.fontNameTag] = {\n      prop: 'name',\n      xform: new StringXform({\n        tag: _this.options.fontNameTag,\n        attr: 'val'\n      })\n    };\n    return _this;\n  }\n\n  _createClass(FontXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var map = this.map;\n      xmlStream.openNode(this.options.tagName);\n\n      _.each(this.map, function (defn, tag) {\n        map[tag].xform.render(xmlStream, model[defn.prop]);\n      });\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      if (this.map[node.name]) {\n        this.parser = this.map[node.name].xform;\n        return this.parser.parseOpen(node);\n      }\n\n      switch (node.name) {\n        case this.options.tagName:\n          this.model = {};\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser && !this.parser.parseClose(name)) {\n        var item = this.map[name];\n\n        if (this.parser.model) {\n          this.model[item.prop] = this.parser.model;\n        }\n\n        this.parser = undefined;\n        return true;\n      }\n\n      switch (name) {\n        case this.options.tagName:\n          return false;\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return this.options.tagName;\n    }\n  }]);\n\n  return FontXform;\n}(BaseXform);\n\nFontXform.OPTIONS = {\n  tagName: 'font',\n  fontNameTag: 'name'\n};\nmodule.exports = FontXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/font-xform.js"],"names":["ColorXform","require","BooleanXform","IntegerXform","StringXform","UnderlineXform","_","BaseXform","FontXform","options","b","prop","xform","tag","attr","i","u","charset","color","condense","extend","family","outline","vertAlign","scheme","shadow","strike","sz","xmlStream","model","map","defn","node","text","name","item","tagName","fontNameTag","module"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst ColorXform = require('./color-xform');\r\nconst BooleanXform = require('../simple/boolean-xform');\r\nconst IntegerXform = require('../simple/integer-xform');\r\nconst StringXform = require('../simple/string-xform');\r\nconst UnderlineXform = require('./underline-xform');\r\n\r\nconst _ = require('../../../utils/under-dash');\r\nconst BaseXform = require('../base-xform');\r\n\r\n// Font encapsulates translation from font model to xlsx\r\nclass FontXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = options || FontXform.OPTIONS;\r\n\r\n    this.map = {\r\n      b: {prop: 'bold', xform: new BooleanXform({tag: 'b', attr: 'val'})},\r\n      i: {prop: 'italic', xform: new BooleanXform({tag: 'i', attr: 'val'})},\r\n      u: {prop: 'underline', xform: new UnderlineXform()},\r\n      charset: {prop: 'charset', xform: new IntegerXform({tag: 'charset', attr: 'val'})},\r\n      color: {prop: 'color', xform: new ColorXform()},\r\n      condense: {prop: 'condense', xform: new BooleanXform({tag: 'condense', attr: 'val'})},\r\n      extend: {prop: 'extend', xform: new BooleanXform({tag: 'extend', attr: 'val'})},\r\n      family: {prop: 'family', xform: new IntegerXform({tag: 'family', attr: 'val'})},\r\n      outline: {prop: 'outline', xform: new BooleanXform({tag: 'outline', attr: 'val'})},\r\n      vertAlign: {prop: 'vertAlign', xform: new StringXform({tag: 'vertAlign', attr: 'val'})},\r\n      scheme: {prop: 'scheme', xform: new StringXform({tag: 'scheme', attr: 'val'})},\r\n      shadow: {prop: 'shadow', xform: new BooleanXform({tag: 'shadow', attr: 'val'})},\r\n      strike: {prop: 'strike', xform: new BooleanXform({tag: 'strike', attr: 'val'})},\r\n      sz: {prop: 'size', xform: new IntegerXform({tag: 'sz', attr: 'val'})},\r\n    };\r\n    this.map[this.options.fontNameTag] = {\r\n      prop: 'name',\r\n      xform: new StringXform({tag: this.options.fontNameTag, attr: 'val'}),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return this.options.tagName;\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    const {map} = this;\r\n\r\n    xmlStream.openNode(this.options.tagName);\r\n    _.each(this.map, (defn, tag) => {\r\n      map[tag].xform.render(xmlStream, model[defn.prop]);\r\n    });\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    if (this.map[node.name]) {\r\n      this.parser = this.map[node.name].xform;\r\n      return this.parser.parseOpen(node);\r\n    }\r\n    switch (node.name) {\r\n      case this.options.tagName:\r\n        this.model = {};\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser && !this.parser.parseClose(name)) {\r\n      const item = this.map[name];\r\n      if (this.parser.model) {\r\n        this.model[item.prop] = this.parser.model;\r\n      }\r\n      this.parser = undefined;\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.options.tagName:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nFontXform.OPTIONS = {\r\n  tagName: 'font',\r\n  fontNameTag: 'name',\r\n};\r\n\r\nmodule.exports = FontXform;\r\n"]},"metadata":{},"sourceType":"script"}