{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform'); // Color encapsulates translation from color model to/from xlsx\n\n\nvar ColorXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(ColorXform, _BaseXform);\n\n  var _super = _createSuper(ColorXform);\n\n  function ColorXform(name) {\n    var _this;\n\n    _classCallCheck(this, ColorXform);\n\n    _this = _super.call(this); // this.name controls the xm node name\n\n    _this.name = name || 'color';\n    return _this;\n  }\n\n  _createClass(ColorXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      if (model) {\n        xmlStream.openNode(this.name);\n\n        if (model.argb) {\n          xmlStream.addAttribute('rgb', model.argb);\n        } else if (model.theme !== undefined) {\n          xmlStream.addAttribute('theme', model.theme);\n\n          if (model.tint !== undefined) {\n            xmlStream.addAttribute('tint', model.tint);\n          }\n        } else if (model.indexed !== undefined) {\n          xmlStream.addAttribute('indexed', model.indexed);\n        } else {\n          xmlStream.addAttribute('auto', '1');\n        }\n\n        xmlStream.closeNode();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (node.name === this.name) {\n        if (node.attributes.rgb) {\n          this.model = {\n            argb: node.attributes.rgb\n          };\n        } else if (node.attributes.theme) {\n          this.model = {\n            theme: parseInt(node.attributes.theme, 10)\n          };\n\n          if (node.attributes.tint) {\n            this.model.tint = parseFloat(node.attributes.tint);\n          }\n        } else if (node.attributes.indexed) {\n          this.model = {\n            indexed: parseInt(node.attributes.indexed, 10)\n          };\n        } else {\n          this.model = undefined;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return this.name;\n    }\n  }]);\n\n  return ColorXform;\n}(BaseXform);\n\nmodule.exports = ColorXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/style/color-xform.js"],"names":["BaseXform","require","ColorXform","name","xmlStream","model","node","argb","rgb","theme","parseInt","parseFloat","indexed","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB,C,CAEA;;;IACMC,U;;;;;AACJ,WAAA,UAAA,CAAA,IAAA,EAAkB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AAChB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CADgB,IAChB,CAAA,CADgB,CAGhB;;AACA,IAAA,KAAA,CAAA,IAAA,GAAYC,IAAI,IAAhB,OAAA;AAJgB,WAAA,KAAA;AAKjB;;;;2BAMMC,S,EAAWC,K,EAAO;AACvB,UAAA,KAAA,EAAW;AACTD,QAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,IAAAA;;AACA,YAAIC,KAAK,CAAT,IAAA,EAAgB;AACdD,UAAAA,SAAS,CAATA,YAAAA,CAAAA,KAAAA,EAA8BC,KAAK,CAAnCD,IAAAA;AADF,SAAA,MAEO,IAAIC,KAAK,CAALA,KAAAA,KAAJ,SAAA,EAA+B;AACpCD,UAAAA,SAAS,CAATA,YAAAA,CAAAA,OAAAA,EAAgCC,KAAK,CAArCD,KAAAA;;AACA,cAAIC,KAAK,CAALA,IAAAA,KAAJ,SAAA,EAA8B;AAC5BD,YAAAA,SAAS,CAATA,YAAAA,CAAAA,MAAAA,EAA+BC,KAAK,CAApCD,IAAAA;AACD;AAJI,SAAA,MAKA,IAAIC,KAAK,CAALA,OAAAA,KAAJ,SAAA,EAAiC;AACtCD,UAAAA,SAAS,CAATA,YAAAA,CAAAA,SAAAA,EAAkCC,KAAK,CAAvCD,OAAAA;AADK,SAAA,MAEA;AACLA,UAAAA,SAAS,CAATA,YAAAA,CAAAA,MAAAA,EAAAA,GAAAA;AACD;;AACDA,QAAAA,SAAS,CAATA,SAAAA;AACA,eAAA,IAAA;AACD;;AACD,aAAA,KAAA;AACD;;;8BAESE,I,EAAM;AACd,UAAIA,IAAI,CAAJA,IAAAA,KAAc,KAAlB,IAAA,EAA6B;AAC3B,YAAIA,IAAI,CAAJA,UAAAA,CAAJ,GAAA,EAAyB;AACvB,eAAA,KAAA,GAAa;AAACC,YAAAA,IAAI,EAAED,IAAI,CAAJA,UAAAA,CAAgBE;AAAvB,WAAb;AADF,SAAA,MAEO,IAAIF,IAAI,CAAJA,UAAAA,CAAJ,KAAA,EAA2B;AAChC,eAAA,KAAA,GAAa;AAACG,YAAAA,KAAK,EAAEC,QAAQ,CAACJ,IAAI,CAAJA,UAAAA,CAAD,KAAA,EAAA,EAAA;AAAhB,WAAb;;AACA,cAAIA,IAAI,CAAJA,UAAAA,CAAJ,IAAA,EAA0B;AACxB,iBAAA,KAAA,CAAA,IAAA,GAAkBK,UAAU,CAACL,IAAI,CAAJA,UAAAA,CAA7B,IAA4B,CAA5B;AACD;AAJI,SAAA,MAKA,IAAIA,IAAI,CAAJA,UAAAA,CAAJ,OAAA,EAA6B;AAClC,eAAA,KAAA,GAAa;AAACM,YAAAA,OAAO,EAAEF,QAAQ,CAACJ,IAAI,CAAJA,UAAAA,CAAD,OAAA,EAAA,EAAA;AAAlB,WAAb;AADK,SAAA,MAEA;AACL,eAAA,KAAA,GAAA,SAAA;AACD;;AACD,eAAA,IAAA;AACD;;AACD,aAAA,KAAA;AACD;;;gCAEW,CAAE;;;iCAED;AACX,aAAA,KAAA;AACD;;;wBAhDS;AACR,aAAO,KAAP,IAAA;AACD;;;;EAVsBN,S;;AA2DzBa,MAAM,CAANA,OAAAA,GAAAA,UAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\n// Color encapsulates translation from color model to/from xlsx\r\nclass ColorXform extends BaseXform {\r\n  constructor(name) {\r\n    super();\r\n\r\n    // this.name controls the xm node name\r\n    this.name = name || 'color';\r\n  }\r\n\r\n  get tag() {\r\n    return this.name;\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (model) {\r\n      xmlStream.openNode(this.name);\r\n      if (model.argb) {\r\n        xmlStream.addAttribute('rgb', model.argb);\r\n      } else if (model.theme !== undefined) {\r\n        xmlStream.addAttribute('theme', model.theme);\r\n        if (model.tint !== undefined) {\r\n          xmlStream.addAttribute('tint', model.tint);\r\n        }\r\n      } else if (model.indexed !== undefined) {\r\n        xmlStream.addAttribute('indexed', model.indexed);\r\n      } else {\r\n        xmlStream.addAttribute('auto', '1');\r\n      }\r\n      xmlStream.closeNode();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (node.name === this.name) {\r\n      if (node.attributes.rgb) {\r\n        this.model = {argb: node.attributes.rgb};\r\n      } else if (node.attributes.theme) {\r\n        this.model = {theme: parseInt(node.attributes.theme, 10)};\r\n        if (node.attributes.tint) {\r\n          this.model.tint = parseFloat(node.attributes.tint);\r\n        }\r\n      } else if (node.attributes.indexed) {\r\n        this.model = {indexed: parseInt(node.attributes.indexed, 10)};\r\n      } else {\r\n        this.model = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = ColorXform;\r\n"]},"metadata":{},"sourceType":"script"}