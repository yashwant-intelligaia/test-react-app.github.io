{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Scanner = void 0;\n\nconst Token_1 = require(\"./Token\");\n\nconst ROW_DELIMITER = /((?:\\r\\n)|\\n|\\r)/;\n\nclass Scanner {\n  constructor(args) {\n    this.cursor = 0;\n    this.line = args.line;\n    this.lineLength = this.line.length;\n    this.parserOptions = args.parserOptions;\n    this.hasMoreData = args.hasMoreData;\n    this.cursor = args.cursor || 0;\n  }\n\n  get hasMoreCharacters() {\n    return this.lineLength > this.cursor;\n  }\n\n  get nextNonSpaceToken() {\n    const {\n      lineFromCursor\n    } = this;\n    const regex = this.parserOptions.NEXT_TOKEN_REGEXP;\n\n    if (lineFromCursor.search(regex) === -1) {\n      return null;\n    }\n\n    const match = regex.exec(lineFromCursor);\n\n    if (match == null) {\n      return null;\n    }\n\n    const token = match[1];\n    const startCursor = this.cursor + (match.index || 0);\n    return new Token_1.Token({\n      token,\n      startCursor,\n      endCursor: startCursor + token.length - 1\n    });\n  }\n\n  get nextCharacterToken() {\n    const {\n      cursor,\n      lineLength\n    } = this;\n\n    if (lineLength <= cursor) {\n      return null;\n    }\n\n    return new Token_1.Token({\n      token: this.line[cursor],\n      startCursor: cursor,\n      endCursor: cursor\n    });\n  }\n\n  get lineFromCursor() {\n    return this.line.substr(this.cursor);\n  }\n\n  advancePastLine() {\n    const match = ROW_DELIMITER.exec(this.lineFromCursor);\n\n    if (!match) {\n      if (this.hasMoreData) {\n        return null;\n      }\n\n      this.cursor = this.lineLength;\n      return this;\n    }\n\n    this.cursor += (match.index || 0) + match[0].length;\n    return this;\n  }\n\n  advanceTo(cursor) {\n    this.cursor = cursor;\n    return this;\n  }\n\n  advanceToToken(token) {\n    this.cursor = token.startCursor;\n    return this;\n  }\n\n  advancePastToken(token) {\n    this.cursor = token.endCursor + 1;\n    return this;\n  }\n\n  truncateToCursor() {\n    this.line = this.lineFromCursor;\n    this.lineLength = this.line.length;\n    this.cursor = 0;\n    return this;\n  }\n\n}\n\nexports.Scanner = Scanner;","map":{"version":3,"sources":["../../../src/parser/Scanner.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Scanner = void 0;\nconst Token_1 = require(\"./Token\");\nconst ROW_DELIMITER = /((?:\\r\\n)|\\n|\\r)/;\nclass Scanner {\n    constructor(args) {\n        this.cursor = 0;\n        this.line = args.line;\n        this.lineLength = this.line.length;\n        this.parserOptions = args.parserOptions;\n        this.hasMoreData = args.hasMoreData;\n        this.cursor = args.cursor || 0;\n    }\n    get hasMoreCharacters() {\n        return this.lineLength > this.cursor;\n    }\n    get nextNonSpaceToken() {\n        const { lineFromCursor } = this;\n        const regex = this.parserOptions.NEXT_TOKEN_REGEXP;\n        if (lineFromCursor.search(regex) === -1) {\n            return null;\n        }\n        const match = regex.exec(lineFromCursor);\n        if (match == null) {\n            return null;\n        }\n        const token = match[1];\n        const startCursor = this.cursor + (match.index || 0);\n        return new Token_1.Token({\n            token,\n            startCursor,\n            endCursor: startCursor + token.length - 1,\n        });\n    }\n    get nextCharacterToken() {\n        const { cursor, lineLength } = this;\n        if (lineLength <= cursor) {\n            return null;\n        }\n        return new Token_1.Token({\n            token: this.line[cursor],\n            startCursor: cursor,\n            endCursor: cursor,\n        });\n    }\n    get lineFromCursor() {\n        return this.line.substr(this.cursor);\n    }\n    advancePastLine() {\n        const match = ROW_DELIMITER.exec(this.lineFromCursor);\n        if (!match) {\n            if (this.hasMoreData) {\n                return null;\n            }\n            this.cursor = this.lineLength;\n            return this;\n        }\n        this.cursor += (match.index || 0) + match[0].length;\n        return this;\n    }\n    advanceTo(cursor) {\n        this.cursor = cursor;\n        return this;\n    }\n    advanceToToken(token) {\n        this.cursor = token.startCursor;\n        return this;\n    }\n    advancePastToken(token) {\n        this.cursor = token.endCursor + 1;\n        return this;\n    }\n    truncateToCursor() {\n        this.line = this.lineFromCursor;\n        this.lineLength = this.line.length;\n        this.cursor = 0;\n        return this;\n    }\n}\nexports.Scanner = Scanner;\n//# sourceMappingURL=Scanner.js.map"]},"metadata":{},"sourceType":"script"}