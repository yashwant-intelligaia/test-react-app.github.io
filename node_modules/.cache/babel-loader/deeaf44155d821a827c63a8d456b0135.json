{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform');\n\nvar StringXform = require('../simple/string-xform');\n\nvar AppHeadingPairsXform = require('./app-heading-pairs-xform');\n\nvar AppTitleOfPartsXform = require('./app-titles-of-parts-xform');\n\nvar AppXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(AppXform, _BaseXform);\n\n  var _super = _createSuper(AppXform);\n\n  function AppXform() {\n    var _this;\n\n    _classCallCheck(this, AppXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      Company: new StringXform({\n        tag: 'Company'\n      }),\n      Manager: new StringXform({\n        tag: 'Manager'\n      }),\n      HeadingPairs: new AppHeadingPairsXform(),\n      TitleOfParts: new AppTitleOfPartsXform()\n    };\n    return _this;\n  }\n\n  _createClass(AppXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n      xmlStream.openNode('Properties', AppXform.PROPERTY_ATTRIBUTES);\n      xmlStream.leafNode('Application', undefined, 'Microsoft Excel');\n      xmlStream.leafNode('DocSecurity', undefined, '0');\n      xmlStream.leafNode('ScaleCrop', undefined, 'false');\n      this.map.HeadingPairs.render(xmlStream, model.worksheets);\n      this.map.TitleOfParts.render(xmlStream, model.worksheets);\n      this.map.Company.render(xmlStream, model.company || '');\n      this.map.Manager.render(xmlStream, model.manager);\n      xmlStream.leafNode('LinksUpToDate', undefined, 'false');\n      xmlStream.leafNode('SharedDoc', undefined, 'false');\n      xmlStream.leafNode('HyperlinksChanged', undefined, 'false');\n      xmlStream.leafNode('AppVersion', undefined, '16.0300');\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case 'Properties':\n          return true;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n            return true;\n          } // there's a lot we don't bother to parse\n\n\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this.parser) {\n        this.parser.parseText(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case 'Properties':\n          this.model = {\n            worksheets: this.map.TitleOfParts.model,\n            company: this.map.Company.model,\n            manager: this.map.Manager.model\n          };\n          return false;\n\n        default:\n          return true;\n      }\n    }\n  }]);\n\n  return AppXform;\n}(BaseXform);\n\nAppXform.DateFormat = function (dt) {\n  return dt.toISOString().replace(/[.]\\d{3,6}/, '');\n};\n\nAppXform.DateAttrs = {\n  'xsi:type': 'dcterms:W3CDTF'\n};\nAppXform.PROPERTY_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties',\n  'xmlns:vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\n};\nmodule.exports = AppXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/core/app-xform.js"],"names":["XmlStream","require","BaseXform","StringXform","AppHeadingPairsXform","AppTitleOfPartsXform","AppXform","Company","tag","Manager","HeadingPairs","TitleOfParts","xmlStream","model","node","text","name","worksheets","company","manager","dt","xmlns","module"],"mappings":"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","sourcesContent":["const XmlStream = require('../../../utils/xml-stream');\r\nconst BaseXform = require('../base-xform');\r\nconst StringXform = require('../simple/string-xform');\r\n\r\nconst AppHeadingPairsXform = require('./app-heading-pairs-xform');\r\nconst AppTitleOfPartsXform = require('./app-titles-of-parts-xform');\r\n\r\nclass AppXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      Company: new StringXform({tag: 'Company'}),\r\n      Manager: new StringXform({tag: 'Manager'}),\r\n      HeadingPairs: new AppHeadingPairsXform(),\r\n      TitleOfParts: new AppTitleOfPartsXform(),\r\n    };\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('Properties', AppXform.PROPERTY_ATTRIBUTES);\r\n\r\n    xmlStream.leafNode('Application', undefined, 'Microsoft Excel');\r\n    xmlStream.leafNode('DocSecurity', undefined, '0');\r\n    xmlStream.leafNode('ScaleCrop', undefined, 'false');\r\n\r\n    this.map.HeadingPairs.render(xmlStream, model.worksheets);\r\n    this.map.TitleOfParts.render(xmlStream, model.worksheets);\r\n    this.map.Company.render(xmlStream, model.company || '');\r\n    this.map.Manager.render(xmlStream, model.manager);\r\n\r\n    xmlStream.leafNode('LinksUpToDate', undefined, 'false');\r\n    xmlStream.leafNode('SharedDoc', undefined, 'false');\r\n    xmlStream.leafNode('HyperlinksChanged', undefined, 'false');\r\n    xmlStream.leafNode('AppVersion', undefined, '16.0300');\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'Properties':\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        }\r\n\r\n        // there's a lot we don't bother to parse\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case 'Properties':\r\n        this.model = {\r\n          worksheets: this.map.TitleOfParts.model,\r\n          company: this.map.Company.model,\r\n          manager: this.map.Manager.model,\r\n        };\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nAppXform.DateFormat = function(dt) {\r\n  return dt.toISOString().replace(/[.]\\d{3,6}/, '');\r\n};\r\n\r\nAppXform.DateAttrs = {'xsi:type': 'dcterms:W3CDTF'};\r\n\r\nAppXform.PROPERTY_ATTRIBUTES = {\r\n  xmlns: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties',\r\n  'xmlns:vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',\r\n};\r\n\r\nmodule.exports = AppXform;\r\n"]},"metadata":{},"sourceType":"script"}