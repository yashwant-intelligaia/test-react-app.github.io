{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar colCache = require('../../../utils/col-cache');\n\nvar BaseXform = require('../base-xform');\n\nvar VIEW_STATES = {\n  frozen: 'frozen',\n  frozenSplit: 'frozen',\n  split: 'split'\n};\n\nvar SheetViewXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(SheetViewXform, _BaseXform);\n\n  var _super = _createSuper(SheetViewXform);\n\n  function SheetViewXform() {\n    _classCallCheck(this, SheetViewXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SheetViewXform, [{\n    key: \"prepare\",\n    value: function prepare(model) {\n      switch (model.state) {\n        case 'frozen':\n        case 'split':\n          break;\n\n        default:\n          model.state = 'normal';\n          break;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode('sheetView', {\n        workbookViewId: model.workbookViewId || 0\n      });\n\n      var add = function add(name, value, included) {\n        if (included) {\n          xmlStream.addAttribute(name, value);\n        }\n      };\n\n      add('rightToLeft', '1', model.rightToLeft === true);\n      add('tabSelected', '1', model.tabSelected);\n      add('showRuler', '0', model.showRuler === false);\n      add('showRowColHeaders', '0', model.showRowColHeaders === false);\n      add('showGridLines', '0', model.showGridLines === false);\n      add('zoomScale', model.zoomScale, model.zoomScale);\n      add('zoomScaleNormal', model.zoomScaleNormal, model.zoomScaleNormal);\n      add('view', model.style, model.style);\n      var topLeftCell;\n      var xSplit;\n      var ySplit;\n      var activePane;\n\n      switch (model.state) {\n        case 'frozen':\n          xSplit = model.xSplit || 0;\n          ySplit = model.ySplit || 0;\n          topLeftCell = model.topLeftCell || colCache.getAddress(ySplit + 1, xSplit + 1).address;\n          activePane = model.xSplit && model.ySplit && 'bottomRight' || model.xSplit && 'topRight' || 'bottomLeft';\n          xmlStream.leafNode('pane', {\n            xSplit: model.xSplit || undefined,\n            ySplit: model.ySplit || undefined,\n            topLeftCell: topLeftCell,\n            activePane: activePane,\n            state: 'frozen'\n          });\n          xmlStream.leafNode('selection', {\n            pane: activePane,\n            activeCell: model.activeCell,\n            sqref: model.activeCell\n          });\n          break;\n\n        case 'split':\n          if (model.activePane === 'topLeft') {\n            model.activePane = undefined;\n          }\n\n          xmlStream.leafNode('pane', {\n            xSplit: model.xSplit || undefined,\n            ySplit: model.ySplit || undefined,\n            topLeftCell: model.topLeftCell,\n            activePane: model.activePane\n          });\n          xmlStream.leafNode('selection', {\n            pane: model.activePane,\n            activeCell: model.activeCell,\n            sqref: model.activeCell\n          });\n          break;\n\n        case 'normal':\n          if (model.activeCell) {\n            xmlStream.leafNode('selection', {\n              activeCell: model.activeCell,\n              sqref: model.activeCell\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      switch (node.name) {\n        case 'sheetView':\n          this.sheetView = {\n            workbookViewId: parseInt(node.attributes.workbookViewId, 10),\n            rightToLeft: node.attributes.rightToLeft === '1',\n            tabSelected: node.attributes.tabSelected === '1',\n            showRuler: !(node.attributes.showRuler === '0'),\n            showRowColHeaders: !(node.attributes.showRowColHeaders === '0'),\n            showGridLines: !(node.attributes.showGridLines === '0'),\n            zoomScale: parseInt(node.attributes.zoomScale || '100', 10),\n            zoomScaleNormal: parseInt(node.attributes.zoomScaleNormal || '100', 10),\n            style: node.attributes.view\n          };\n          this.pane = undefined;\n          this.selections = {};\n          return true;\n\n        case 'pane':\n          this.pane = {\n            xSplit: parseInt(node.attributes.xSplit || '0', 10),\n            ySplit: parseInt(node.attributes.ySplit || '0', 10),\n            topLeftCell: node.attributes.topLeftCell,\n            activePane: node.attributes.activePane || 'topLeft',\n            state: node.attributes.state\n          };\n          return true;\n\n        case 'selection':\n          {\n            var name = node.attributes.pane || 'topLeft';\n            this.selections[name] = {\n              pane: name,\n              activeCell: node.attributes.activeCell\n            };\n            return true;\n          }\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      var model;\n      var selection;\n\n      switch (name) {\n        case 'sheetView':\n          if (this.sheetView && this.pane) {\n            model = this.model = {\n              workbookViewId: this.sheetView.workbookViewId,\n              rightToLeft: this.sheetView.rightToLeft,\n              state: VIEW_STATES[this.pane.state] || 'split',\n              // split is default\n              xSplit: this.pane.xSplit,\n              ySplit: this.pane.ySplit,\n              topLeftCell: this.pane.topLeftCell,\n              showRuler: this.sheetView.showRuler,\n              showRowColHeaders: this.sheetView.showRowColHeaders,\n              showGridLines: this.sheetView.showGridLines,\n              zoomScale: this.sheetView.zoomScale,\n              zoomScaleNormal: this.sheetView.zoomScaleNormal\n            };\n\n            if (this.model.state === 'split') {\n              model.activePane = this.pane.activePane;\n            }\n\n            selection = this.selections[this.pane.activePane];\n\n            if (selection && selection.activeCell) {\n              model.activeCell = selection.activeCell;\n            }\n\n            if (this.sheetView.style) {\n              model.style = this.sheetView.style;\n            }\n          } else {\n            model = this.model = {\n              workbookViewId: this.sheetView.workbookViewId,\n              rightToLeft: this.sheetView.rightToLeft,\n              state: 'normal',\n              showRuler: this.sheetView.showRuler,\n              showRowColHeaders: this.sheetView.showRowColHeaders,\n              showGridLines: this.sheetView.showGridLines,\n              zoomScale: this.sheetView.zoomScale,\n              zoomScaleNormal: this.sheetView.zoomScaleNormal\n            };\n            selection = this.selections.topLeft;\n\n            if (selection && selection.activeCell) {\n              model.activeCell = selection.activeCell;\n            }\n\n            if (this.sheetView.style) {\n              model.style = this.sheetView.style;\n            }\n          }\n\n          return false;\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile() {}\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'sheetView';\n    }\n  }]);\n\n  return SheetViewXform;\n}(BaseXform);\n\nmodule.exports = SheetViewXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/sheet-view-xform.js"],"names":["colCache","require","BaseXform","VIEW_STATES","frozen","frozenSplit","split","SheetViewXform","model","xmlStream","workbookViewId","add","xSplit","ySplit","topLeftCell","activePane","state","pane","activeCell","sqref","node","parseInt","rightToLeft","tabSelected","showRuler","showRowColHeaders","showGridLines","zoomScale","zoomScaleNormal","style","view","name","selection","module"],"mappings":"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","sourcesContent":["const colCache = require('../../../utils/col-cache');\r\nconst BaseXform = require('../base-xform');\r\n\r\nconst VIEW_STATES = {\r\n  frozen: 'frozen',\r\n  frozenSplit: 'frozen',\r\n  split: 'split',\r\n};\r\n\r\nclass SheetViewXform extends BaseXform {\r\n  get tag() {\r\n    return 'sheetView';\r\n  }\r\n\r\n  prepare(model) {\r\n    switch (model.state) {\r\n      case 'frozen':\r\n      case 'split':\r\n        break;\r\n      default:\r\n        model.state = 'normal';\r\n        break;\r\n    }\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('sheetView', {\r\n      workbookViewId: model.workbookViewId || 0,\r\n    });\r\n    const add = function(name, value, included) {\r\n      if (included) {\r\n        xmlStream.addAttribute(name, value);\r\n      }\r\n    };\r\n    add('rightToLeft', '1', model.rightToLeft === true);\r\n    add('tabSelected', '1', model.tabSelected);\r\n    add('showRuler', '0', model.showRuler === false);\r\n    add('showRowColHeaders', '0', model.showRowColHeaders === false);\r\n    add('showGridLines', '0', model.showGridLines === false);\r\n    add('zoomScale', model.zoomScale, model.zoomScale);\r\n    add('zoomScaleNormal', model.zoomScaleNormal, model.zoomScaleNormal);\r\n    add('view', model.style, model.style);\r\n\r\n    let topLeftCell;\r\n    let xSplit;\r\n    let ySplit;\r\n    let activePane;\r\n    switch (model.state) {\r\n      case 'frozen':\r\n        xSplit = model.xSplit || 0;\r\n        ySplit = model.ySplit || 0;\r\n        topLeftCell = model.topLeftCell || colCache.getAddress(ySplit + 1, xSplit + 1).address;\r\n        activePane =\r\n          (model.xSplit && model.ySplit && 'bottomRight') ||\r\n          (model.xSplit && 'topRight') ||\r\n          'bottomLeft';\r\n\r\n        xmlStream.leafNode('pane', {\r\n          xSplit: model.xSplit || undefined,\r\n          ySplit: model.ySplit || undefined,\r\n          topLeftCell,\r\n          activePane,\r\n          state: 'frozen',\r\n        });\r\n        xmlStream.leafNode('selection', {\r\n          pane: activePane,\r\n          activeCell: model.activeCell,\r\n          sqref: model.activeCell,\r\n        });\r\n        break;\r\n      case 'split':\r\n        if (model.activePane === 'topLeft') {\r\n          model.activePane = undefined;\r\n        }\r\n        xmlStream.leafNode('pane', {\r\n          xSplit: model.xSplit || undefined,\r\n          ySplit: model.ySplit || undefined,\r\n          topLeftCell: model.topLeftCell,\r\n          activePane: model.activePane,\r\n        });\r\n        xmlStream.leafNode('selection', {\r\n          pane: model.activePane,\r\n          activeCell: model.activeCell,\r\n          sqref: model.activeCell,\r\n        });\r\n        break;\r\n      case 'normal':\r\n        if (model.activeCell) {\r\n          xmlStream.leafNode('selection', {\r\n            activeCell: model.activeCell,\r\n            sqref: model.activeCell,\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case 'sheetView':\r\n        this.sheetView = {\r\n          workbookViewId: parseInt(node.attributes.workbookViewId, 10),\r\n          rightToLeft: node.attributes.rightToLeft === '1',\r\n          tabSelected: node.attributes.tabSelected === '1',\r\n          showRuler: !(node.attributes.showRuler === '0'),\r\n          showRowColHeaders: !(node.attributes.showRowColHeaders === '0'),\r\n          showGridLines: !(node.attributes.showGridLines === '0'),\r\n          zoomScale: parseInt(node.attributes.zoomScale || '100', 10),\r\n          zoomScaleNormal: parseInt(node.attributes.zoomScaleNormal || '100', 10),\r\n          style: node.attributes.view,\r\n        };\r\n        this.pane = undefined;\r\n        this.selections = {};\r\n        return true;\r\n\r\n      case 'pane':\r\n        this.pane = {\r\n          xSplit: parseInt(node.attributes.xSplit || '0', 10),\r\n          ySplit: parseInt(node.attributes.ySplit || '0', 10),\r\n          topLeftCell: node.attributes.topLeftCell,\r\n          activePane: node.attributes.activePane || 'topLeft',\r\n          state: node.attributes.state,\r\n        };\r\n        return true;\r\n\r\n      case 'selection': {\r\n        const name = node.attributes.pane || 'topLeft';\r\n        this.selections[name] = {\r\n          pane: name,\r\n          activeCell: node.attributes.activeCell,\r\n        };\r\n        return true;\r\n      }\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    let model;\r\n    let selection;\r\n    switch (name) {\r\n      case 'sheetView':\r\n        if (this.sheetView && this.pane) {\r\n          model = this.model = {\r\n            workbookViewId: this.sheetView.workbookViewId,\r\n            rightToLeft: this.sheetView.rightToLeft,\r\n            state: VIEW_STATES[this.pane.state] || 'split', // split is default\r\n            xSplit: this.pane.xSplit,\r\n            ySplit: this.pane.ySplit,\r\n            topLeftCell: this.pane.topLeftCell,\r\n            showRuler: this.sheetView.showRuler,\r\n            showRowColHeaders: this.sheetView.showRowColHeaders,\r\n            showGridLines: this.sheetView.showGridLines,\r\n            zoomScale: this.sheetView.zoomScale,\r\n            zoomScaleNormal: this.sheetView.zoomScaleNormal,\r\n          };\r\n          if (this.model.state === 'split') {\r\n            model.activePane = this.pane.activePane;\r\n          }\r\n          selection = this.selections[this.pane.activePane];\r\n          if (selection && selection.activeCell) {\r\n            model.activeCell = selection.activeCell;\r\n          }\r\n          if (this.sheetView.style) {\r\n            model.style = this.sheetView.style;\r\n          }\r\n        } else {\r\n          model = this.model = {\r\n            workbookViewId: this.sheetView.workbookViewId,\r\n            rightToLeft: this.sheetView.rightToLeft,\r\n            state: 'normal',\r\n            showRuler: this.sheetView.showRuler,\r\n            showRowColHeaders: this.sheetView.showRowColHeaders,\r\n            showGridLines: this.sheetView.showGridLines,\r\n            zoomScale: this.sheetView.zoomScale,\r\n            zoomScaleNormal: this.sheetView.zoomScaleNormal,\r\n          };\r\n          selection = this.selections.topLeft;\r\n          if (selection && selection.activeCell) {\r\n            model.activeCell = selection.activeCell;\r\n          }\r\n          if (this.sheetView.style) {\r\n            model.style = this.sheetView.style;\r\n          }\r\n        }\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  reconcile() {}\r\n}\r\n\r\nmodule.exports = SheetViewXform;\r\n"]},"metadata":{},"sourceType":"script"}