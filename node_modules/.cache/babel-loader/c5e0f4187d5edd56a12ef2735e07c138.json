{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RowTransformerValidator = void 0;\n\nconst lodash_isfunction_1 = __importDefault(require(\"lodash.isfunction\"));\n\nconst types_1 = require(\"../types\");\n\nclass RowTransformerValidator {\n  constructor() {\n    this._rowTransform = null;\n    this._rowValidator = null;\n  } // eslint-disable-next-line @typescript-eslint/no-shadow\n\n\n  static createTransform(transformFunction) {\n    if (types_1.isSyncTransform(transformFunction)) {\n      return (row, cb) => {\n        let transformed = null;\n\n        try {\n          transformed = transformFunction(row);\n        } catch (e) {\n          return cb(e);\n        }\n\n        return cb(null, transformed);\n      };\n    }\n\n    return transformFunction;\n  }\n\n  static createValidator(validateFunction) {\n    if (types_1.isSyncValidate(validateFunction)) {\n      return (row, cb) => {\n        cb(null, {\n          row,\n          isValid: validateFunction(row)\n        });\n      };\n    }\n\n    return (row, cb) => {\n      validateFunction(row, (err, isValid, reason) => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isValid) {\n          return cb(null, {\n            row,\n            isValid,\n            reason\n          });\n        }\n\n        return cb(null, {\n          row,\n          isValid: false,\n          reason\n        });\n      });\n    };\n  }\n\n  set rowTransform(transformFunction) {\n    if (!lodash_isfunction_1.default(transformFunction)) {\n      throw new TypeError('The transform should be a function');\n    }\n\n    this._rowTransform = RowTransformerValidator.createTransform(transformFunction);\n  }\n\n  set rowValidator(validateFunction) {\n    if (!lodash_isfunction_1.default(validateFunction)) {\n      throw new TypeError('The validate should be a function');\n    }\n\n    this._rowValidator = RowTransformerValidator.createValidator(validateFunction);\n  }\n\n  transformAndValidate(row, cb) {\n    return this.callTransformer(row, (transformErr, transformedRow) => {\n      if (transformErr) {\n        return cb(transformErr);\n      }\n\n      if (!transformedRow) {\n        return cb(null, {\n          row: null,\n          isValid: true\n        });\n      }\n\n      return this.callValidator(transformedRow, (validateErr, validationResult) => {\n        if (validateErr) {\n          return cb(validateErr);\n        }\n\n        if (validationResult && !validationResult.isValid) {\n          return cb(null, {\n            row: transformedRow,\n            isValid: false,\n            reason: validationResult.reason\n          });\n        }\n\n        return cb(null, {\n          row: transformedRow,\n          isValid: true\n        });\n      });\n    });\n  }\n\n  callTransformer(row, cb) {\n    if (!this._rowTransform) {\n      return cb(null, row);\n    }\n\n    return this._rowTransform(row, cb);\n  }\n\n  callValidator(row, cb) {\n    if (!this._rowValidator) {\n      return cb(null, {\n        row,\n        isValid: true\n      });\n    }\n\n    return this._rowValidator(row, cb);\n  }\n\n}\n\nexports.RowTransformerValidator = RowTransformerValidator;","map":{"version":3,"sources":["../../../src/transforms/RowTransformerValidator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RowTransformerValidator = void 0;\nconst lodash_isfunction_1 = __importDefault(require(\"lodash.isfunction\"));\nconst types_1 = require(\"../types\");\nclass RowTransformerValidator {\n    constructor() {\n        this._rowTransform = null;\n        this._rowValidator = null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    static createTransform(transformFunction) {\n        if (types_1.isSyncTransform(transformFunction)) {\n            return (row, cb) => {\n                let transformed = null;\n                try {\n                    transformed = transformFunction(row);\n                }\n                catch (e) {\n                    return cb(e);\n                }\n                return cb(null, transformed);\n            };\n        }\n        return transformFunction;\n    }\n    static createValidator(validateFunction) {\n        if (types_1.isSyncValidate(validateFunction)) {\n            return (row, cb) => {\n                cb(null, { row, isValid: validateFunction(row) });\n            };\n        }\n        return (row, cb) => {\n            validateFunction(row, (err, isValid, reason) => {\n                if (err) {\n                    return cb(err);\n                }\n                if (isValid) {\n                    return cb(null, { row, isValid, reason });\n                }\n                return cb(null, { row, isValid: false, reason });\n            });\n        };\n    }\n    set rowTransform(transformFunction) {\n        if (!lodash_isfunction_1.default(transformFunction)) {\n            throw new TypeError('The transform should be a function');\n        }\n        this._rowTransform = RowTransformerValidator.createTransform(transformFunction);\n    }\n    set rowValidator(validateFunction) {\n        if (!lodash_isfunction_1.default(validateFunction)) {\n            throw new TypeError('The validate should be a function');\n        }\n        this._rowValidator = RowTransformerValidator.createValidator(validateFunction);\n    }\n    transformAndValidate(row, cb) {\n        return this.callTransformer(row, (transformErr, transformedRow) => {\n            if (transformErr) {\n                return cb(transformErr);\n            }\n            if (!transformedRow) {\n                return cb(null, { row: null, isValid: true });\n            }\n            return this.callValidator(transformedRow, (validateErr, validationResult) => {\n                if (validateErr) {\n                    return cb(validateErr);\n                }\n                if (validationResult && !validationResult.isValid) {\n                    return cb(null, { row: transformedRow, isValid: false, reason: validationResult.reason });\n                }\n                return cb(null, { row: transformedRow, isValid: true });\n            });\n        });\n    }\n    callTransformer(row, cb) {\n        if (!this._rowTransform) {\n            return cb(null, row);\n        }\n        return this._rowTransform(row, cb);\n    }\n    callValidator(row, cb) {\n        if (!this._rowValidator) {\n            return cb(null, { row, isValid: true });\n        }\n        return this._rowValidator(row, cb);\n    }\n}\nexports.RowTransformerValidator = RowTransformerValidator;\n//# sourceMappingURL=RowTransformerValidator.js.map"]},"metadata":{},"sourceType":"script"}