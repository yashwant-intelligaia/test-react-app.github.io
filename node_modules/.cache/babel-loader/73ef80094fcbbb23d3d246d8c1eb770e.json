{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/yashwant-intelligaia/Documents/Official/TestTasks/my-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar fs = require('fs');\n\nvar fastCsv = require('fast-csv');\n\nvar customParseFormat = require('dayjs/plugin/customParseFormat');\n\nvar utc = require('dayjs/plugin/utc');\n\nvar dayjs = require('dayjs').extend(customParseFormat).extend(utc);\n\nvar StreamBuf = require('../utils/stream-buf');\n\nvar _require = require('../utils/utils'),\n    exists = _require.fs.exists;\n/* eslint-disable quote-props */\n\n\nvar SpecialValues = {\n  true: true,\n  false: false,\n  '#N/A': {\n    error: '#N/A'\n  },\n  '#REF!': {\n    error: '#REF!'\n  },\n  '#NAME?': {\n    error: '#NAME?'\n  },\n  '#DIV/0!': {\n    error: '#DIV/0!'\n  },\n  '#NULL!': {\n    error: '#NULL!'\n  },\n  '#VALUE!': {\n    error: '#VALUE!'\n  },\n  '#NUM!': {\n    error: '#NUM!'\n  }\n};\n/* eslint-ensable quote-props */\n\nvar CSV = /*#__PURE__*/function () {\n  function CSV(workbook) {\n    _classCallCheck(this, CSV);\n\n    this.workbook = workbook;\n    this.worksheet = null;\n  }\n\n  _createClass(CSV, [{\n    key: \"readFile\",\n    value: function () {\n      var _readFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filename, options) {\n        var stream, worksheet;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                _context.next = 3;\n                return exists(filename);\n\n              case 3:\n                if (_context.sent) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"File not found: \".concat(filename));\n\n              case 5:\n                stream = fs.createReadStream(filename);\n                _context.next = 8;\n                return this.read(stream, options);\n\n              case 8:\n                worksheet = _context.sent;\n                stream.close();\n                return _context.abrupt(\"return\", worksheet);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function readFile(_x, _x2) {\n        return _readFile.apply(this, arguments);\n      }\n\n      return readFile;\n    }()\n  }, {\n    key: \"read\",\n    value: function read(stream, options) {\n      var _this = this;\n\n      options = options || {};\n      return new Promise(function (resolve, reject) {\n        var worksheet = _this.workbook.addWorksheet(options.sheetName);\n\n        var dateFormats = options.dateFormats || ['YYYY-MM-DD[T]HH:mm:ssZ', 'YYYY-MM-DD[T]HH:mm:ss', 'MM-DD-YYYY', 'YYYY-MM-DD'];\n\n        var map = options.map || function (datum) {\n          if (datum === '') {\n            return null;\n          }\n\n          var datumNumber = Number(datum);\n\n          if (!Number.isNaN(datumNumber) && datumNumber !== Infinity) {\n            return datumNumber;\n          }\n\n          var dt = dateFormats.reduce(function (matchingDate, currentDateFormat) {\n            if (matchingDate) {\n              return matchingDate;\n            }\n\n            var dayjsObj = dayjs(datum, currentDateFormat, true);\n\n            if (dayjsObj.isValid()) {\n              return dayjsObj;\n            }\n\n            return null;\n          }, null);\n\n          if (dt) {\n            return new Date(dt.valueOf());\n          }\n\n          var special = SpecialValues[datum];\n\n          if (special !== undefined) {\n            return special;\n          }\n\n          return datum;\n        };\n\n        var csvStream = fastCsv.parse(options.parserOptions).on('data', function (data) {\n          worksheet.addRow(data.map(map));\n        }).on('end', function () {\n          csvStream.emit('worksheet', worksheet);\n        });\n        csvStream.on('worksheet', resolve).on('error', reject);\n        stream.pipe(csvStream);\n      });\n    }\n    /**\r\n     * @deprecated since version 4.0. You should use `CSV#read` instead. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md\r\n     */\n\n  }, {\n    key: \"createInputStream\",\n    value: function createInputStream() {\n      throw new Error('`CSV#createInputStream` is deprecated. You should use `CSV#read` instead. This method will be removed in version 5.0. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md');\n    }\n  }, {\n    key: \"write\",\n    value: function write(stream, options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        options = options || {}; // const encoding = options.encoding || 'utf8';\n        // const separator = options.separator || ',';\n        // const quoteChar = options.quoteChar || '\\'';\n\n        var worksheet = _this2.workbook.getWorksheet(options.sheetName || options.sheetId);\n\n        var csvStream = fastCsv.format(options.formatterOptions);\n        stream.on('finish', function () {\n          resolve();\n        });\n        csvStream.on('error', reject);\n        csvStream.pipe(stream);\n        var _options = options,\n            dateFormat = _options.dateFormat,\n            dateUTC = _options.dateUTC;\n\n        var map = options.map || function (value) {\n          if (value) {\n            if (value.text || value.hyperlink) {\n              return value.hyperlink || value.text || '';\n            }\n\n            if (value.formula || value.result) {\n              return value.result || '';\n            }\n\n            if (value instanceof Date) {\n              if (dateFormat) {\n                return dateUTC ? dayjs.utc(value).format(dateFormat) : dayjs(value).format(dateFormat);\n              }\n\n              return dateUTC ? dayjs.utc(value).format() : dayjs(value).format();\n            }\n\n            if (value.error) {\n              return value.error;\n            }\n\n            if (_typeof(value) === 'object') {\n              return JSON.stringify(value);\n            }\n          }\n\n          return value;\n        };\n\n        var includeEmptyRows = options.includeEmptyRows === undefined || options.includeEmptyRows;\n        var lastRow = 1;\n\n        if (worksheet) {\n          worksheet.eachRow(function (row, rowNumber) {\n            if (includeEmptyRows) {\n              while (lastRow++ < rowNumber - 1) {\n                csvStream.write([]);\n              }\n            }\n\n            var values = row.values;\n            values.shift();\n            csvStream.write(values.map(map));\n            lastRow = rowNumber;\n          });\n        }\n\n        csvStream.end();\n      });\n    }\n  }, {\n    key: \"writeFile\",\n    value: function writeFile(filename, options) {\n      options = options || {};\n      var streamOptions = {\n        encoding: options.encoding || 'utf8'\n      };\n      var stream = fs.createWriteStream(filename, streamOptions);\n      return this.write(stream, options);\n    }\n  }, {\n    key: \"writeBuffer\",\n    value: function () {\n      var _writeBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n        var stream;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                stream = new StreamBuf();\n                _context2.next = 3;\n                return this.write(stream, options);\n\n              case 3:\n                return _context2.abrupt(\"return\", stream.read());\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function writeBuffer(_x3) {\n        return _writeBuffer.apply(this, arguments);\n      }\n\n      return writeBuffer;\n    }()\n  }]);\n\n  return CSV;\n}();\n\nmodule.exports = CSV;","map":{"version":3,"sources":["../../../lib/csv/csv.js"],"names":["fs","require","fastCsv","customParseFormat","utc","dayjs","StreamBuf","exists","SpecialValues","true","false","error","CSV","filename","options","stream","worksheet","dateFormats","map","datum","datumNumber","Number","dt","dayjsObj","special","csvStream","data","resolve","dateFormat","dateUTC","value","JSON","includeEmptyRows","lastRow","rowNumber","values","row","streamOptions","encoding","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAlB,IAAkB,CAAlB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAvB,UAAuB,CAAvB;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAjC,gCAAiC,CAAjC;;AACA,IAAMG,GAAG,GAAGH,OAAO,CAAnB,kBAAmB,CAAnB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAPA,OAAO,CAAPA,CAAAA,MAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,CAAd,GAAcA,CAAd;;AACA,IAAMK,SAAS,GAAGL,OAAO,CAAzB,qBAAyB,CAAzB;;eAIIA,OAAO,CAAA,gBAAA,C;IADJM,M,YAALP,E,CAAKO,M;AAGP;;;AACA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EADgB,IAAA;AAEpBC,EAAAA,KAAK,EAFe,KAAA;AAGpB,UAAQ;AAACC,IAAAA,KAAK,EAAE;AAAR,GAHY;AAIpB,WAAS;AAACA,IAAAA,KAAK,EAAE;AAAR,GAJW;AAKpB,YAAU;AAACA,IAAAA,KAAK,EAAE;AAAR,GALU;AAMpB,aAAW;AAACA,IAAAA,KAAK,EAAE;AAAR,GANS;AAOpB,YAAU;AAACA,IAAAA,KAAK,EAAE;AAAR,GAPU;AAQpB,aAAW;AAACA,IAAAA,KAAK,EAAE;AAAR,GARS;AASpB,WAAS;AAACA,IAAAA,KAAK,EAAE;AAAR;AATW,CAAtB;AAWA;;IAEMC,G;AACJ,WAAA,GAAA,CAAA,QAAA,EAAsB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,GAAA,CAAA;;AACpB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,SAAA,GAAA,IAAA;AACD;;;;;gGAEcC,Q,EAAUC,O;;;;;;AACvBA,gBAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;;uBACYP,MAAM,CAAA,QAAA,C;;;;;;;;sBACV,IAAA,KAAA,CAAA,mBAAA,MAAA,CAAA,QAAA,CAAA,C;;;AAEFQ,gBAAAA,M,GAASf,EAAE,CAAFA,gBAAAA,CAAAA,QAAAA,CAATe;;uBACkB,KAAA,IAAA,CAAA,MAAA,EAAA,OAAA,C;;;AAAlBC,gBAAAA,S,gBAAAA;AACND,gBAAAA,MAAM,CAANA,KAAAA;iDACOC,S;;;;;;;;;;;;;;;;;;yBAGJD,M,EAAQD,O,EAAS;AAAA,UAAA,KAAA,GAAA,IAAA;;AACpBA,MAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;AAEA,aAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC,YAAME,SAAS,GAAG,KAAI,CAAJ,QAAA,CAAA,YAAA,CAA2BF,OAAO,CAApD,SAAkB,CAAlB;;AAEA,YAAMG,WAAW,GAAGH,OAAO,CAAPA,WAAAA,IAAuB,CAAA,wBAAA,EAAA,uBAAA,EAAA,YAAA,EAA3C,YAA2C,CAA3C;;AAMA,YAAMI,GAAG,GACPJ,OAAO,CAAPA,GAAAA,IACA,UAAA,KAAA,EAAgB;AACd,cAAIK,KAAK,KAAT,EAAA,EAAkB;AAChB,mBAAA,IAAA;AACD;;AACD,cAAMC,WAAW,GAAGC,MAAM,CAA1B,KAA0B,CAA1B;;AACA,cAAI,CAACA,MAAM,CAANA,KAAAA,CAAD,WAACA,CAAD,IAA8BD,WAAW,KAA7C,QAAA,EAA4D;AAC1D,mBAAA,WAAA;AACD;;AACD,cAAME,EAAE,GAAG,WAAW,CAAX,MAAA,CAAmB,UAAA,YAAA,EAAA,iBAAA,EAAqC;AACjE,gBAAA,YAAA,EAAkB;AAChB,qBAAA,YAAA;AACD;;AACD,gBAAMC,QAAQ,GAAGlB,KAAK,CAAA,KAAA,EAAA,iBAAA,EAAtB,IAAsB,CAAtB;;AACA,gBAAIkB,QAAQ,CAAZ,OAAIA,EAAJ,EAAwB;AACtB,qBAAA,QAAA;AACD;;AACD,mBAAA,IAAA;AARS,WAAA,EAAX,IAAW,CAAX;;AAUA,cAAA,EAAA,EAAQ;AACN,mBAAO,IAAA,IAAA,CAASD,EAAE,CAAlB,OAAgBA,EAAT,CAAP;AACD;;AACD,cAAME,OAAO,GAAGhB,aAAa,CAA7B,KAA6B,CAA7B;;AACA,cAAIgB,OAAO,KAAX,SAAA,EAA2B;AACzB,mBAAA,OAAA;AACD;;AACD,iBAAA,KAAA;AA3BJ,SAAA;;AA8BA,YAAMC,SAAS,GAAG,OAAO,CAAP,KAAA,CACTX,OAAO,CADE,aAAA,EAAA,EAAA,CAAA,MAAA,EAEJ,UAAA,IAAA,EAAQ;AAClBE,UAAAA,SAAS,CAATA,MAAAA,CAAiBU,IAAI,CAAJA,GAAAA,CAAjBV,GAAiBU,CAAjBV;AAHc,SAAA,EAAA,EAAA,CAAA,KAAA,EAKL,YAAM;AACfS,UAAAA,SAAS,CAATA,IAAAA,CAAAA,WAAAA,EAAAA,SAAAA;AANJ,SAAkB,CAAlB;AASAA,QAAAA,SAAS,CAATA,EAAAA,CAAAA,WAAAA,EAAAA,OAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA;AAEAV,QAAAA,MAAM,CAANA,IAAAA,CAAAA,SAAAA;AAlDF,OAAO,CAAP;AAoDD;AAED;;;;;;wCAGoB;AAClB,YAAM,IAAA,KAAA,CAAN,wNAAM,CAAN;AAGD;;;0BAEKA,M,EAAQD,O,EAAS;AAAA,UAAA,MAAA,GAAA,IAAA;;AACrB,aAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtCA,QAAAA,OAAO,GAAGA,OAAO,IADqB,EACtCA,CADsC,CAEtC;AACA;AACA;;AAEA,YAAME,SAAS,GAAG,MAAI,CAAJ,QAAA,CAAA,YAAA,CAA2BF,OAAO,CAAPA,SAAAA,IAAqBA,OAAO,CAAzE,OAAkB,CAAlB;;AAEA,YAAMW,SAAS,GAAGvB,OAAO,CAAPA,MAAAA,CAAeY,OAAO,CAAxC,gBAAkBZ,CAAlB;AACAa,QAAAA,MAAM,CAANA,EAAAA,CAAAA,QAAAA,EAAoB,YAAM;AACxBY,UAAAA,OAAO;AADTZ,SAAAA;AAGAU,QAAAA,SAAS,CAATA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA;AACAA,QAAAA,SAAS,CAATA,IAAAA,CAAAA,MAAAA;AAbsC,YAAA,QAAA,GAAA,OAAA;AAAA,YAe/BG,UAf+B,GAAA,QAAA,CAAA,UAAA;AAAA,YAenBC,OAfmB,GAAA,QAAA,CAAA,OAAA;;AAgBtC,YAAMX,GAAG,GACPJ,OAAO,CAAPA,GAAAA,IACC,UAAA,KAAA,EAAS;AACR,cAAA,KAAA,EAAW;AACT,gBAAIgB,KAAK,CAALA,IAAAA,IAAcA,KAAK,CAAvB,SAAA,EAAmC;AACjC,qBAAOA,KAAK,CAALA,SAAAA,IAAmBA,KAAK,CAAxBA,IAAAA,IAAP,EAAA;AACD;;AACD,gBAAIA,KAAK,CAALA,OAAAA,IAAiBA,KAAK,CAA1B,MAAA,EAAmC;AACjC,qBAAOA,KAAK,CAALA,MAAAA,IAAP,EAAA;AACD;;AACD,gBAAIA,KAAK,YAAT,IAAA,EAA2B;AACzB,kBAAA,UAAA,EAAgB;AACd,uBAAOD,OAAO,GACVxB,KAAK,CAALA,GAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CADU,UACVA,CADU,GAEVA,KAAK,CAALA,KAAK,CAALA,CAAAA,MAAAA,CAFJ,UAEIA,CAFJ;AAGD;;AACD,qBAAOwB,OAAO,GAAGxB,KAAK,CAALA,GAAAA,CAAAA,KAAAA,EAAH,MAAGA,EAAH,GAA+BA,KAAK,CAALA,KAAK,CAALA,CAA7C,MAA6CA,EAA7C;AACD;;AACD,gBAAIyB,KAAK,CAAT,KAAA,EAAiB;AACf,qBAAOA,KAAK,CAAZ,KAAA;AACD;;AACD,gBAAI,OAAA,CAAA,KAAA,CAAA,KAAJ,QAAA,EAA+B;AAC7B,qBAAOC,IAAI,CAAJA,SAAAA,CAAP,KAAOA,CAAP;AACD;AACF;;AACD,iBAAA,KAAA;AAzBJ,SAAA;;AA4BA,YAAMC,gBAAgB,GAAGlB,OAAO,CAAPA,gBAAAA,KAAAA,SAAAA,IAA0CA,OAAO,CAA1E,gBAAA;AACA,YAAImB,OAAO,GAAX,CAAA;;AACA,YAAA,SAAA,EAAe;AACbjB,UAAAA,SAAS,CAATA,OAAAA,CAAkB,UAAA,GAAA,EAAA,SAAA,EAAoB;AACpC,gBAAA,gBAAA,EAAsB;AACpB,qBAAOiB,OAAO,KAAKC,SAAS,GAA5B,CAAA,EAAkC;AAChCT,gBAAAA,SAAS,CAATA,KAAAA,CAAAA,EAAAA;AACD;AACF;;AALmC,gBAM7BU,MAN6B,GAMnBC,GANmB,CAAA,MAAA;AAOpCD,YAAAA,MAAM,CAANA,KAAAA;AACAV,YAAAA,SAAS,CAATA,KAAAA,CAAgBU,MAAM,CAANA,GAAAA,CAAhBV,GAAgBU,CAAhBV;AACAQ,YAAAA,OAAO,GAAPA,SAAAA;AATFjB,WAAAA;AAWD;;AACDS,QAAAA,SAAS,CAATA,GAAAA;AA3DF,OAAO,CAAP;AA6DD;;;8BAESZ,Q,EAAUC,O,EAAS;AAC3BA,MAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;AAEA,UAAMuB,aAAa,GAAG;AACpBC,QAAAA,QAAQ,EAAExB,OAAO,CAAPA,QAAAA,IAAoB;AADV,OAAtB;AAGA,UAAMC,MAAM,GAAGf,EAAE,CAAFA,iBAAAA,CAAAA,QAAAA,EAAf,aAAeA,CAAf;AAEA,aAAO,KAAA,KAAA,CAAA,MAAA,EAAP,OAAO,CAAP;AACD;;;;oGAEiBc,O;;;;;;AACVC,gBAAAA,M,GAAS,IAAA,SAAA,EAATA;;uBACA,KAAA,KAAA,CAAA,MAAA,EAAA,OAAA,C;;;kDACCA,MAAM,CAANA,IAAAA,E;;;;;;;;;;;;;;;;;;;;;AAIXwB,MAAM,CAANA,OAAAA,GAAAA,GAAAA","sourcesContent":["const fs = require('fs');\r\nconst fastCsv = require('fast-csv');\r\nconst customParseFormat = require('dayjs/plugin/customParseFormat');\r\nconst utc = require('dayjs/plugin/utc');\r\nconst dayjs = require('dayjs').extend(customParseFormat).extend(utc);\r\nconst StreamBuf = require('../utils/stream-buf');\r\n\r\nconst {\r\n  fs: {exists},\r\n} = require('../utils/utils');\r\n\r\n/* eslint-disable quote-props */\r\nconst SpecialValues = {\r\n  true: true,\r\n  false: false,\r\n  '#N/A': {error: '#N/A'},\r\n  '#REF!': {error: '#REF!'},\r\n  '#NAME?': {error: '#NAME?'},\r\n  '#DIV/0!': {error: '#DIV/0!'},\r\n  '#NULL!': {error: '#NULL!'},\r\n  '#VALUE!': {error: '#VALUE!'},\r\n  '#NUM!': {error: '#NUM!'},\r\n};\r\n/* eslint-ensable quote-props */\r\n\r\nclass CSV {\r\n  constructor(workbook) {\r\n    this.workbook = workbook;\r\n    this.worksheet = null;\r\n  }\r\n\r\n  async readFile(filename, options) {\r\n    options = options || {};\r\n    if (!(await exists(filename))) {\r\n      throw new Error(`File not found: ${filename}`);\r\n    }\r\n    const stream = fs.createReadStream(filename);\r\n    const worksheet = await this.read(stream, options);\r\n    stream.close();\r\n    return worksheet;\r\n  }\r\n\r\n  read(stream, options) {\r\n    options = options || {};\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const worksheet = this.workbook.addWorksheet(options.sheetName);\r\n\r\n      const dateFormats = options.dateFormats || [\r\n        'YYYY-MM-DD[T]HH:mm:ssZ',\r\n        'YYYY-MM-DD[T]HH:mm:ss',\r\n        'MM-DD-YYYY',\r\n        'YYYY-MM-DD',\r\n      ];\r\n      const map =\r\n        options.map ||\r\n        function(datum) {\r\n          if (datum === '') {\r\n            return null;\r\n          }\r\n          const datumNumber = Number(datum);\r\n          if (!Number.isNaN(datumNumber) && datumNumber !== Infinity) {\r\n            return datumNumber;\r\n          }\r\n          const dt = dateFormats.reduce((matchingDate, currentDateFormat) => {\r\n            if (matchingDate) {\r\n              return matchingDate;\r\n            }\r\n            const dayjsObj = dayjs(datum, currentDateFormat, true);\r\n            if (dayjsObj.isValid()) {\r\n              return dayjsObj;\r\n            }\r\n            return null;\r\n          }, null);\r\n          if (dt) {\r\n            return new Date(dt.valueOf());\r\n          }\r\n          const special = SpecialValues[datum];\r\n          if (special !== undefined) {\r\n            return special;\r\n          }\r\n          return datum;\r\n        };\r\n\r\n      const csvStream = fastCsv\r\n        .parse(options.parserOptions)\r\n        .on('data', data => {\r\n          worksheet.addRow(data.map(map));\r\n        })\r\n        .on('end', () => {\r\n          csvStream.emit('worksheet', worksheet);\r\n        });\r\n\r\n      csvStream.on('worksheet', resolve).on('error', reject);\r\n\r\n      stream.pipe(csvStream);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @deprecated since version 4.0. You should use `CSV#read` instead. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md\r\n   */\r\n  createInputStream() {\r\n    throw new Error(\r\n      '`CSV#createInputStream` is deprecated. You should use `CSV#read` instead. This method will be removed in version 5.0. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md'\r\n    );\r\n  }\r\n\r\n  write(stream, options) {\r\n    return new Promise((resolve, reject) => {\r\n      options = options || {};\r\n      // const encoding = options.encoding || 'utf8';\r\n      // const separator = options.separator || ',';\r\n      // const quoteChar = options.quoteChar || '\\'';\r\n\r\n      const worksheet = this.workbook.getWorksheet(options.sheetName || options.sheetId);\r\n\r\n      const csvStream = fastCsv.format(options.formatterOptions);\r\n      stream.on('finish', () => {\r\n        resolve();\r\n      });\r\n      csvStream.on('error', reject);\r\n      csvStream.pipe(stream);\r\n\r\n      const {dateFormat, dateUTC} = options;\r\n      const map =\r\n        options.map ||\r\n        (value => {\r\n          if (value) {\r\n            if (value.text || value.hyperlink) {\r\n              return value.hyperlink || value.text || '';\r\n            }\r\n            if (value.formula || value.result) {\r\n              return value.result || '';\r\n            }\r\n            if (value instanceof Date) {\r\n              if (dateFormat) {\r\n                return dateUTC\r\n                  ? dayjs.utc(value).format(dateFormat)\r\n                  : dayjs(value).format(dateFormat);\r\n              }\r\n              return dateUTC ? dayjs.utc(value).format() : dayjs(value).format();\r\n            }\r\n            if (value.error) {\r\n              return value.error;\r\n            }\r\n            if (typeof value === 'object') {\r\n              return JSON.stringify(value);\r\n            }\r\n          }\r\n          return value;\r\n        });\r\n\r\n      const includeEmptyRows = options.includeEmptyRows === undefined || options.includeEmptyRows;\r\n      let lastRow = 1;\r\n      if (worksheet) {\r\n        worksheet.eachRow((row, rowNumber) => {\r\n          if (includeEmptyRows) {\r\n            while (lastRow++ < rowNumber - 1) {\r\n              csvStream.write([]);\r\n            }\r\n          }\r\n          const {values} = row;\r\n          values.shift();\r\n          csvStream.write(values.map(map));\r\n          lastRow = rowNumber;\r\n        });\r\n      }\r\n      csvStream.end();\r\n    });\r\n  }\r\n\r\n  writeFile(filename, options) {\r\n    options = options || {};\r\n\r\n    const streamOptions = {\r\n      encoding: options.encoding || 'utf8',\r\n    };\r\n    const stream = fs.createWriteStream(filename, streamOptions);\r\n\r\n    return this.write(stream, options);\r\n  }\r\n\r\n  async writeBuffer(options) {\r\n    const stream = new StreamBuf();\r\n    await this.write(stream, options);\r\n    return stream.read();\r\n  }\r\n}\r\n\r\nmodule.exports = CSV;\r\n"]},"metadata":{},"sourceType":"script"}