{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/* eslint-disable max-classes-per-file */\n\n\nvar colCache = require('../utils/col-cache');\n\nvar Column = /*#__PURE__*/function () {\n  // wrapper around column model, allowing access and manipulation\n  function Column(table, column, index) {\n    _classCallCheck(this, Column);\n\n    this.table = table;\n    this.column = column;\n    this.index = index;\n  }\n\n  _createClass(Column, [{\n    key: \"_set\",\n    value: function _set(name, value) {\n      this.table.cacheState();\n      this.column[name] = value;\n    }\n    /* eslint-disable lines-between-class-members */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.column.name;\n    },\n    set: function set(value) {\n      this._set('name', value);\n    }\n  }, {\n    key: \"filterButton\",\n    get: function get() {\n      return this.column.filterButton;\n    },\n    set: function set(value) {\n      this.column.filterButton = value;\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return this.column.style;\n    },\n    set: function set(value) {\n      this.column.style = value;\n    }\n  }, {\n    key: \"totalsRowLabel\",\n    get: function get() {\n      return this.column.totalsRowLabel;\n    },\n    set: function set(value) {\n      this._set('totalsRowLabel', value);\n    }\n  }, {\n    key: \"totalsRowFunction\",\n    get: function get() {\n      return this.column.totalsRowFunction;\n    },\n    set: function set(value) {\n      this._set('totalsRowFunction', value);\n    }\n  }, {\n    key: \"totalsRowResult\",\n    get: function get() {\n      return this.column.totalsRowResult;\n    },\n    set: function set(value) {\n      this._set('totalsRowResult', value);\n    }\n  }, {\n    key: \"totalsRowFormula\",\n    get: function get() {\n      return this.column.totalsRowFormula;\n    },\n    set: function set(value) {\n      this._set('totalsRowFormula', value);\n    }\n    /* eslint-enable lines-between-class-members */\n\n  }]);\n\n  return Column;\n}();\n\nvar Table = /*#__PURE__*/function () {\n  function Table(worksheet, table) {\n    _classCallCheck(this, Table);\n\n    this.worksheet = worksheet;\n\n    if (table) {\n      this.table = table; // check things are ok first\n\n      this.validate();\n      this.store();\n    }\n  }\n\n  _createClass(Table, [{\n    key: \"getFormula\",\n    value: function getFormula(column) {\n      // get the correct formula to apply to the totals row\n      switch (column.totalsRowFunction) {\n        case 'none':\n          return null;\n\n        case 'average':\n          return \"SUBTOTAL(101,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n        case 'countNums':\n          return \"SUBTOTAL(102,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n        case 'count':\n          return \"SUBTOTAL(103,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n        case 'max':\n          return \"SUBTOTAL(104,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n        case 'min':\n          return \"SUBTOTAL(105,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n        case 'stdDev':\n          return \"SUBTOTAL(106,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n        case 'var':\n          return \"SUBTOTAL(107,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n        case 'sum':\n          return \"SUBTOTAL(109,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n        case 'custom':\n          return column.totalsRowFormula;\n\n        default:\n          throw new Error(\"Invalid Totals Row Function: \".concat(column.totalsRowFunction));\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var _this = this;\n\n      var table = this.table; // set defaults and check is valid\n\n      var assign = function assign(o, name, dflt) {\n        if (o[name] === undefined) {\n          o[name] = dflt;\n        }\n      };\n\n      assign(table, 'headerRow', true);\n      assign(table, 'totalsRow', false);\n      assign(table, 'style', {});\n      assign(table.style, 'theme', 'TableStyleMedium2');\n      assign(table.style, 'showFirstColumn', false);\n      assign(table.style, 'showLastColumn', false);\n      assign(table.style, 'showRowStripes', false);\n      assign(table.style, 'showColumnStripes', false);\n\n      var assert = function assert(test, message) {\n        if (!test) {\n          throw new Error(message);\n        }\n      };\n\n      assert(table.ref, 'Table must have ref');\n      assert(table.columns, 'Table must have column definitions');\n      assert(table.rows, 'Table must have row definitions');\n      table.tl = colCache.decodeAddress(table.ref);\n      var _table$tl = table.tl,\n          row = _table$tl.row,\n          col = _table$tl.col;\n      assert(row > 0, 'Table must be on valid row');\n      assert(col > 0, 'Table must be on valid col');\n      var width = this.width,\n          filterHeight = this.filterHeight,\n          tableHeight = this.tableHeight; // autoFilterRef is a range that includes optional headers only\n\n      table.autoFilterRef = colCache.encode(row, col, row + filterHeight - 1, col + width - 1); // tableRef is a range that includes optional headers and totals\n\n      table.tableRef = colCache.encode(row, col, row + tableHeight - 1, col + width - 1);\n      table.columns.forEach(function (column, i) {\n        assert(column.name, \"Column \".concat(i, \" must have a name\"));\n\n        if (i === 0) {\n          assign(column, 'totalsRowLabel', 'Total');\n        } else {\n          assign(column, 'totalsRowFunction', 'none');\n          column.totalsRowFormula = _this.getFormula(column);\n        }\n      });\n    }\n  }, {\n    key: \"store\",\n    value: function store() {\n      var _this2 = this; // where the table needs to store table data, headers, footers in\n      // the sheet...\n\n\n      var assignStyle = function assignStyle(cell, style) {\n        if (style) {\n          Object.keys(style).forEach(function (key) {\n            cell[key] = style[key];\n          });\n        }\n      };\n\n      var worksheet = this.worksheet,\n          table = this.table;\n      var _table$tl2 = table.tl,\n          row = _table$tl2.row,\n          col = _table$tl2.col;\n      var count = 0;\n\n      if (table.headerRow) {\n        var r = worksheet.getRow(row + count++);\n        table.columns.forEach(function (column, j) {\n          var style = column.style,\n              name = column.name;\n          var cell = r.getCell(col + j);\n          cell.value = name;\n          assignStyle(cell, style);\n        });\n      }\n\n      table.rows.forEach(function (data) {\n        var r = worksheet.getRow(row + count++);\n        data.forEach(function (value, j) {\n          var cell = r.getCell(col + j);\n          cell.value = value;\n          assignStyle(cell, table.columns[j].style);\n        });\n      });\n\n      if (table.totalsRow) {\n        var _r = worksheet.getRow(row + count++);\n\n        table.columns.forEach(function (column, j) {\n          var cell = _r.getCell(col + j);\n\n          if (j === 0) {\n            cell.value = column.totalsRowLabel;\n          } else {\n            var formula = _this2.getFormula(column);\n\n            if (formula) {\n              cell.value = {\n                formula: column.totalsRowFormula,\n                result: column.totalsRowResult\n              };\n            } else {\n              cell.value = null;\n            }\n          }\n\n          assignStyle(cell, column.style);\n        });\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load(worksheet) {\n      var _this3 = this; // where the table will read necessary features from a loaded sheet\n\n\n      var table = this.table;\n      var _table$tl3 = table.tl,\n          row = _table$tl3.row,\n          col = _table$tl3.col;\n      var count = 0;\n\n      if (table.headerRow) {\n        var r = worksheet.getRow(row + count++);\n        table.columns.forEach(function (column, j) {\n          var cell = r.getCell(col + j);\n          cell.value = column.name;\n        });\n      }\n\n      table.rows.forEach(function (data) {\n        var r = worksheet.getRow(row + count++);\n        data.forEach(function (value, j) {\n          var cell = r.getCell(col + j);\n          cell.value = value;\n        });\n      });\n\n      if (table.totalsRow) {\n        var _r2 = worksheet.getRow(row + count++);\n\n        table.columns.forEach(function (column, j) {\n          var cell = _r2.getCell(col + j);\n\n          if (j === 0) {\n            cell.value = column.totalsRowLabel;\n          } else {\n            var formula = _this3.getFormula(column);\n\n            if (formula) {\n              cell.value = {\n                formula: column.totalsRowFormula,\n                result: column.totalsRowResult\n              };\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"cacheState\",\n    // ================================================================\n    // TODO: Mutating methods\n    value: function cacheState() {\n      if (!this._cache) {\n        this._cache = {\n          ref: this.ref,\n          width: this.width,\n          tableHeight: this.tableHeight\n        };\n      }\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      // changes may have been made that might have on-sheet effects\n      if (!this._cache) {\n        return;\n      } // check things are ok first\n\n\n      this.validate();\n      var ref = colCache.decodeAddress(this._cache.ref);\n\n      if (this.ref !== this._cache.ref) {\n        // wipe out whole table footprint at previous location\n        for (var i = 0; i < this._cache.tableHeight; i++) {\n          var row = this.worksheet.getRow(ref.row + i);\n\n          for (var j = 0; j < this._cache.width; j++) {\n            var cell = row.getCell(ref.col + j);\n            cell.value = null;\n          }\n        }\n      } else {\n        // clear out below table if it has shrunk\n        for (var _i = this.tableHeight; _i < this._cache.tableHeight; _i++) {\n          var _row = this.worksheet.getRow(ref.row + _i);\n\n          for (var _j = 0; _j < this._cache.width; _j++) {\n            var _cell = _row.getCell(ref.col + _j);\n\n            _cell.value = null;\n          }\n        } // clear out to right of table if it has lost columns\n\n\n        for (var _i2 = 0; _i2 < this.tableHeight; _i2++) {\n          var _row2 = this.worksheet.getRow(ref.row + _i2);\n\n          for (var _j2 = this.width; _j2 < this._cache.width; _j2++) {\n            var _cell2 = _row2.getCell(ref.col + _j2);\n\n            _cell2.value = null;\n          }\n        }\n      }\n\n      this.store();\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow(values, rowNumber) {\n      // Add a row of data, either insert at rowNumber or append\n      this.cacheState();\n\n      if (rowNumber === undefined) {\n        this.table.rows.push(values);\n      } else {\n        this.table.rows.splice(rowNumber, 0, values);\n      }\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(rowIndex) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1; // Remove a rows of data\n\n      this.cacheState();\n      this.table.rows.splice(rowIndex, count);\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(colIndex) {\n      var column = this.table.columns[colIndex];\n      return new Column(this, column, colIndex);\n    }\n  }, {\n    key: \"addColumn\",\n    value: function addColumn(column, values, colIndex) {\n      // Add a new column, including column defn and values\n      // Inserts at colNumber or adds to the right\n      this.cacheState();\n\n      if (colIndex === undefined) {\n        this.table.columns.push(column);\n        this.table.rows.forEach(function (row, i) {\n          row.push(values[i]);\n        });\n      } else {\n        this.table.columns.splice(colIndex, 0, column);\n        this.table.rows.forEach(function (row, i) {\n          row.splice(colIndex, 0, values[i]);\n        });\n      }\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(colIndex) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1; // Remove a column with data\n\n      this.cacheState();\n      this.table.columns.splice(colIndex, count);\n      this.table.rows.forEach(function (row) {\n        row.splice(colIndex, count);\n      });\n    }\n  }, {\n    key: \"_assign\",\n    value: function _assign(target, prop, value) {\n      this.cacheState();\n      target[prop] = value;\n    }\n    /* eslint-disable lines-between-class-members */\n\n  }, {\n    key: \"width\",\n    get: function get() {\n      // width of the table\n      return this.table.columns.length;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      // height of the table data\n      return this.table.rows.length;\n    }\n  }, {\n    key: \"filterHeight\",\n    get: function get() {\n      // height of the table data plus optional header row\n      return this.height + (this.table.headerRow ? 1 : 0);\n    }\n  }, {\n    key: \"tableHeight\",\n    get: function get() {\n      // full height of the table on the sheet\n      return this.filterHeight + (this.table.totalsRow ? 1 : 0);\n    }\n  }, {\n    key: \"model\",\n    get: function get() {\n      return this.table;\n    },\n    set: function set(value) {\n      this.table = value;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return this.table.ref;\n    },\n    set: function set(value) {\n      this._assign(this.table, 'ref', value);\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.table.name;\n    },\n    set: function set(value) {\n      this.table.name = value;\n    }\n  }, {\n    key: \"displayName\",\n    get: function get() {\n      return this.table.displyName || this.table.name;\n    }\n  }, {\n    key: \"displayNamename\",\n    set: function set(value) {\n      this.table.displayName = value;\n    }\n  }, {\n    key: \"headerRow\",\n    get: function get() {\n      return this.table.headerRow;\n    },\n    set: function set(value) {\n      this._assign(this.table, 'headerRow', value);\n    }\n  }, {\n    key: \"totalsRow\",\n    get: function get() {\n      return this.table.totalsRow;\n    },\n    set: function set(value) {\n      this._assign(this.table, 'totalsRow', value);\n    }\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.table.style.name;\n    },\n    set: function set(value) {\n      this.table.style.name = value;\n    }\n  }, {\n    key: \"showFirstColumn\",\n    get: function get() {\n      return this.table.style.showFirstColumn;\n    },\n    set: function set(value) {\n      this.table.style.showFirstColumn = value;\n    }\n  }, {\n    key: \"showLastColumn\",\n    get: function get() {\n      return this.table.style.showLastColumn;\n    },\n    set: function set(value) {\n      this.table.style.showLastColumn = value;\n    }\n  }, {\n    key: \"showRowStripes\",\n    get: function get() {\n      return this.table.style.showRowStripes;\n    },\n    set: function set(value) {\n      this.table.style.showRowStripes = value;\n    }\n  }, {\n    key: \"showColumnStripes\",\n    get: function get() {\n      return this.table.style.showColumnStripes;\n    },\n    set: function set(value) {\n      this.table.style.showColumnStripes = value;\n    }\n    /* eslint-enable lines-between-class-members */\n\n  }]);\n\n  return Table;\n}();\n\nmodule.exports = Table;","map":{"version":3,"sources":["../../../lib/doc/table.js"],"names":["colCache","require","Column","name","value","Table","column","table","assign","o","assert","row","col","width","filterHeight","tableHeight","i","assignStyle","Object","cell","style","worksheet","count","r","data","j","formula","result","totalsRowResult","ref","values","rowNumber","rowIndex","colIndex","target","prop","module"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\r\nconst colCache = require('../utils/col-cache');\r\n\r\nclass Column {\r\n  // wrapper around column model, allowing access and manipulation\r\n  constructor(table, column, index) {\r\n    this.table = table;\r\n    this.column = column;\r\n    this.index = index;\r\n  }\r\n\r\n  _set(name, value) {\r\n    this.table.cacheState();\r\n    this.column[name] = value;\r\n  }\r\n\r\n  /* eslint-disable lines-between-class-members */\r\n  get name() {\r\n    return this.column.name;\r\n  }\r\n  set name(value) {\r\n    this._set('name', value);\r\n  }\r\n\r\n  get filterButton() {\r\n    return this.column.filterButton;\r\n  }\r\n  set filterButton(value) {\r\n    this.column.filterButton = value;\r\n  }\r\n\r\n  get style() {\r\n    return this.column.style;\r\n  }\r\n  set style(value) {\r\n    this.column.style = value;\r\n  }\r\n\r\n  get totalsRowLabel() {\r\n    return this.column.totalsRowLabel;\r\n  }\r\n  set totalsRowLabel(value) {\r\n    this._set('totalsRowLabel', value);\r\n  }\r\n\r\n  get totalsRowFunction() {\r\n    return this.column.totalsRowFunction;\r\n  }\r\n  set totalsRowFunction(value) {\r\n    this._set('totalsRowFunction', value);\r\n  }\r\n\r\n  get totalsRowResult() {\r\n    return this.column.totalsRowResult;\r\n  }\r\n  set totalsRowResult(value) {\r\n    this._set('totalsRowResult', value);\r\n  }\r\n\r\n  get totalsRowFormula() {\r\n    return this.column.totalsRowFormula;\r\n  }\r\n  set totalsRowFormula(value) {\r\n    this._set('totalsRowFormula', value);\r\n  }\r\n  /* eslint-enable lines-between-class-members */\r\n}\r\n\r\nclass Table {\r\n  constructor(worksheet, table) {\r\n    this.worksheet = worksheet;\r\n    if (table) {\r\n      this.table = table;\r\n      // check things are ok first\r\n      this.validate();\r\n\r\n      this.store();\r\n    }\r\n  }\r\n\r\n  getFormula(column) {\r\n    // get the correct formula to apply to the totals row\r\n    switch (column.totalsRowFunction) {\r\n      case 'none':\r\n        return null;\r\n      case 'average':\r\n        return `SUBTOTAL(101,${this.table.name}[${column.name}])`;\r\n      case 'countNums':\r\n        return `SUBTOTAL(102,${this.table.name}[${column.name}])`;\r\n      case 'count':\r\n        return `SUBTOTAL(103,${this.table.name}[${column.name}])`;\r\n      case 'max':\r\n        return `SUBTOTAL(104,${this.table.name}[${column.name}])`;\r\n      case 'min':\r\n        return `SUBTOTAL(105,${this.table.name}[${column.name}])`;\r\n      case 'stdDev':\r\n        return `SUBTOTAL(106,${this.table.name}[${column.name}])`;\r\n      case 'var':\r\n        return `SUBTOTAL(107,${this.table.name}[${column.name}])`;\r\n      case 'sum':\r\n        return `SUBTOTAL(109,${this.table.name}[${column.name}])`;\r\n      case 'custom':\r\n        return column.totalsRowFormula;\r\n      default:\r\n        throw new Error(`Invalid Totals Row Function: ${column.totalsRowFunction}`);\r\n    }\r\n  }\r\n\r\n  get width() {\r\n    // width of the table\r\n    return this.table.columns.length;\r\n  }\r\n\r\n  get height() {\r\n    // height of the table data\r\n    return this.table.rows.length;\r\n  }\r\n\r\n  get filterHeight() {\r\n    // height of the table data plus optional header row\r\n    return this.height + (this.table.headerRow ? 1 : 0);\r\n  }\r\n\r\n  get tableHeight() {\r\n    // full height of the table on the sheet\r\n    return this.filterHeight + (this.table.totalsRow ? 1 : 0);\r\n  }\r\n\r\n  validate() {\r\n    const {table} = this;\r\n    // set defaults and check is valid\r\n    const assign = (o, name, dflt) => {\r\n      if (o[name] === undefined) {\r\n        o[name] = dflt;\r\n      }\r\n    };\r\n    assign(table, 'headerRow', true);\r\n    assign(table, 'totalsRow', false);\r\n\r\n    assign(table, 'style', {});\r\n    assign(table.style, 'theme', 'TableStyleMedium2');\r\n    assign(table.style, 'showFirstColumn', false);\r\n    assign(table.style, 'showLastColumn', false);\r\n    assign(table.style, 'showRowStripes', false);\r\n    assign(table.style, 'showColumnStripes', false);\r\n\r\n    const assert = (test, message) => {\r\n      if (!test) {\r\n        throw new Error(message);\r\n      }\r\n    };\r\n    assert(table.ref, 'Table must have ref');\r\n    assert(table.columns, 'Table must have column definitions');\r\n    assert(table.rows, 'Table must have row definitions');\r\n\r\n    table.tl = colCache.decodeAddress(table.ref);\r\n    const {row, col} = table.tl;\r\n    assert(row > 0, 'Table must be on valid row');\r\n    assert(col > 0, 'Table must be on valid col');\r\n\r\n    const {width, filterHeight, tableHeight} = this;\r\n\r\n    // autoFilterRef is a range that includes optional headers only\r\n    table.autoFilterRef = colCache.encode(row, col, row + filterHeight - 1, col + width - 1);\r\n\r\n    // tableRef is a range that includes optional headers and totals\r\n    table.tableRef = colCache.encode(row, col, row + tableHeight - 1, col + width - 1);\r\n\r\n    table.columns.forEach((column, i) => {\r\n      assert(column.name, `Column ${i} must have a name`);\r\n      if (i === 0) {\r\n        assign(column, 'totalsRowLabel', 'Total');\r\n      } else {\r\n        assign(column, 'totalsRowFunction', 'none');\r\n        column.totalsRowFormula = this.getFormula(column);\r\n      }\r\n    });\r\n  }\r\n\r\n  store() {\r\n    // where the table needs to store table data, headers, footers in\r\n    // the sheet...\r\n    const assignStyle = (cell, style) => {\r\n      if (style) {\r\n        Object.keys(style).forEach(key => {\r\n          cell[key] = style[key];\r\n        });\r\n      }\r\n    };\r\n\r\n    const {worksheet, table} = this;\r\n    const {row, col} = table.tl;\r\n    let count = 0;\r\n    if (table.headerRow) {\r\n      const r = worksheet.getRow(row + count++);\r\n      table.columns.forEach((column, j) => {\r\n        const {style, name} = column;\r\n        const cell = r.getCell(col + j);\r\n        cell.value = name;\r\n        assignStyle(cell, style);\r\n      });\r\n    }\r\n    table.rows.forEach(data => {\r\n      const r = worksheet.getRow(row + count++);\r\n      data.forEach((value, j) => {\r\n        const cell = r.getCell(col + j);\r\n        cell.value = value;\r\n\r\n        assignStyle(cell, table.columns[j].style);\r\n      });\r\n    });\r\n\r\n    if (table.totalsRow) {\r\n      const r = worksheet.getRow(row + count++);\r\n      table.columns.forEach((column, j) => {\r\n        const cell = r.getCell(col + j);\r\n        if (j === 0) {\r\n          cell.value = column.totalsRowLabel;\r\n        } else {\r\n          const formula = this.getFormula(column);\r\n          if (formula) {\r\n            cell.value = {\r\n              formula: column.totalsRowFormula,\r\n              result: column.totalsRowResult,\r\n            };\r\n          } else {\r\n            cell.value = null;\r\n          }\r\n        }\r\n\r\n        assignStyle(cell, column.style);\r\n      });\r\n    }\r\n  }\r\n\r\n  load(worksheet) {\r\n    // where the table will read necessary features from a loaded sheet\r\n    const {table} = this;\r\n    const {row, col} = table.tl;\r\n    let count = 0;\r\n    if (table.headerRow) {\r\n      const r = worksheet.getRow(row + count++);\r\n      table.columns.forEach((column, j) => {\r\n        const cell = r.getCell(col + j);\r\n        cell.value = column.name;\r\n      });\r\n    }\r\n    table.rows.forEach(data => {\r\n      const r = worksheet.getRow(row + count++);\r\n      data.forEach((value, j) => {\r\n        const cell = r.getCell(col + j);\r\n        cell.value = value;\r\n      });\r\n    });\r\n\r\n    if (table.totalsRow) {\r\n      const r = worksheet.getRow(row + count++);\r\n      table.columns.forEach((column, j) => {\r\n        const cell = r.getCell(col + j);\r\n        if (j === 0) {\r\n          cell.value = column.totalsRowLabel;\r\n        } else {\r\n          const formula = this.getFormula(column);\r\n          if (formula) {\r\n            cell.value = {\r\n              formula: column.totalsRowFormula,\r\n              result: column.totalsRowResult,\r\n            };\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  get model() {\r\n    return this.table;\r\n  }\r\n\r\n  set model(value) {\r\n    this.table = value;\r\n  }\r\n\r\n  // ================================================================\r\n  // TODO: Mutating methods\r\n  cacheState() {\r\n    if (!this._cache) {\r\n      this._cache = {\r\n        ref: this.ref,\r\n        width: this.width,\r\n        tableHeight: this.tableHeight,\r\n      };\r\n    }\r\n  }\r\n\r\n  commit() {\r\n    // changes may have been made that might have on-sheet effects\r\n    if (!this._cache) {\r\n      return;\r\n    }\r\n\r\n    // check things are ok first\r\n    this.validate();\r\n\r\n    const ref = colCache.decodeAddress(this._cache.ref);\r\n    if (this.ref !== this._cache.ref) {\r\n      // wipe out whole table footprint at previous location\r\n      for (let i = 0; i < this._cache.tableHeight; i++) {\r\n        const row = this.worksheet.getRow(ref.row + i);\r\n        for (let j = 0; j < this._cache.width; j++) {\r\n          const cell = row.getCell(ref.col + j);\r\n          cell.value = null;\r\n        }\r\n      }\r\n    } else {\r\n      // clear out below table if it has shrunk\r\n      for (let i = this.tableHeight; i < this._cache.tableHeight; i++) {\r\n        const row = this.worksheet.getRow(ref.row + i);\r\n        for (let j = 0; j < this._cache.width; j++) {\r\n          const cell = row.getCell(ref.col + j);\r\n          cell.value = null;\r\n        }\r\n      }\r\n\r\n      // clear out to right of table if it has lost columns\r\n      for (let i = 0; i < this.tableHeight; i++) {\r\n        const row = this.worksheet.getRow(ref.row + i);\r\n        for (let j = this.width; j < this._cache.width; j++) {\r\n          const cell = row.getCell(ref.col + j);\r\n          cell.value = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.store();\r\n  }\r\n\r\n  addRow(values, rowNumber) {\r\n    // Add a row of data, either insert at rowNumber or append\r\n    this.cacheState();\r\n\r\n    if (rowNumber === undefined) {\r\n      this.table.rows.push(values);\r\n    } else {\r\n      this.table.rows.splice(rowNumber, 0, values);\r\n    }\r\n  }\r\n\r\n  removeRows(rowIndex, count = 1) {\r\n    // Remove a rows of data\r\n    this.cacheState();\r\n    this.table.rows.splice(rowIndex, count);\r\n  }\r\n\r\n  getColumn(colIndex) {\r\n    const column = this.table.columns[colIndex];\r\n    return new Column(this, column, colIndex);\r\n  }\r\n\r\n  addColumn(column, values, colIndex) {\r\n    // Add a new column, including column defn and values\r\n    // Inserts at colNumber or adds to the right\r\n    this.cacheState();\r\n\r\n    if (colIndex === undefined) {\r\n      this.table.columns.push(column);\r\n      this.table.rows.forEach((row, i) => {\r\n        row.push(values[i]);\r\n      });\r\n    } else {\r\n      this.table.columns.splice(colIndex, 0, column);\r\n      this.table.rows.forEach((row, i) => {\r\n        row.splice(colIndex, 0, values[i]);\r\n      });\r\n    }\r\n  }\r\n\r\n  removeColumns(colIndex, count = 1) {\r\n    // Remove a column with data\r\n    this.cacheState();\r\n\r\n    this.table.columns.splice(colIndex, count);\r\n    this.table.rows.forEach(row => {\r\n      row.splice(colIndex, count);\r\n    });\r\n  }\r\n\r\n  _assign(target, prop, value) {\r\n    this.cacheState();\r\n    target[prop] = value;\r\n  }\r\n\r\n  /* eslint-disable lines-between-class-members */\r\n  get ref() {\r\n    return this.table.ref;\r\n  }\r\n  set ref(value) {\r\n    this._assign(this.table, 'ref', value);\r\n  }\r\n\r\n  get name() {\r\n    return this.table.name;\r\n  }\r\n  set name(value) {\r\n    this.table.name = value;\r\n  }\r\n\r\n  get displayName() {\r\n    return this.table.displyName || this.table.name;\r\n  }\r\n  set displayNamename(value) {\r\n    this.table.displayName = value;\r\n  }\r\n\r\n  get headerRow() {\r\n    return this.table.headerRow;\r\n  }\r\n  set headerRow(value) {\r\n    this._assign(this.table, 'headerRow', value);\r\n  }\r\n\r\n  get totalsRow() {\r\n    return this.table.totalsRow;\r\n  }\r\n  set totalsRow(value) {\r\n    this._assign(this.table, 'totalsRow', value);\r\n  }\r\n\r\n  get theme() {\r\n    return this.table.style.name;\r\n  }\r\n  set theme(value) {\r\n    this.table.style.name = value;\r\n  }\r\n\r\n  get showFirstColumn() {\r\n    return this.table.style.showFirstColumn;\r\n  }\r\n  set showFirstColumn(value) {\r\n    this.table.style.showFirstColumn = value;\r\n  }\r\n\r\n  get showLastColumn() {\r\n    return this.table.style.showLastColumn;\r\n  }\r\n  set showLastColumn(value) {\r\n    this.table.style.showLastColumn = value;\r\n  }\r\n\r\n  get showRowStripes() {\r\n    return this.table.style.showRowStripes;\r\n  }\r\n  set showRowStripes(value) {\r\n    this.table.style.showRowStripes = value;\r\n  }\r\n\r\n  get showColumnStripes() {\r\n    return this.table.style.showColumnStripes;\r\n  }\r\n  set showColumnStripes(value) {\r\n    this.table.style.showColumnStripes = value;\r\n  }\r\n  /* eslint-enable lines-between-class-members */\r\n}\r\n\r\nmodule.exports = Table;\r\n"]},"metadata":{},"sourceType":"script"}