{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('./base-xform');\n\nvar XmlStream = require('../../utils/xml-stream'); // const model = {\n//   tag: 'name',\n//   $: {attr: 'value'},\n//   c: [\n//     { tag: 'child' }\n//   ],\n//   t: 'some text'\n// };\n\n\nfunction build(xmlStream, model) {\n  xmlStream.openNode(model.tag, model.$);\n\n  if (model.c) {\n    model.c.forEach(function (child) {\n      build(xmlStream, child);\n    });\n  }\n\n  if (model.t) {\n    xmlStream.writeText(model.t);\n  }\n\n  xmlStream.closeNode();\n}\n\nvar StaticXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(StaticXform, _BaseXform);\n\n  var _super = _createSuper(StaticXform);\n\n  function StaticXform(model) {\n    var _this;\n\n    _classCallCheck(this, StaticXform);\n\n    _this = _super.call(this); // This class is an optimisation for static (unimportant and unchanging) xml\n    // It is stateless - apart from its static model and so can be used as a singleton\n    // Being stateless - it will only track entry to and exit from it's root xml tag during parsing and nothing else\n    // Known issues:\n    //    since stateless - parseOpen always returns true. Parent xform must know when to start using this xform\n    //    if the root tag is recursive, the parsing will behave unpredictably\n\n    _this._model = model;\n    return _this;\n  }\n\n  _createClass(StaticXform, [{\n    key: \"render\",\n    value: function render(xmlStream) {\n      if (!this._xml) {\n        var stream = new XmlStream();\n        build(stream, this._model);\n        this._xml = stream.xml;\n      }\n\n      xmlStream.writeXml(this._xml);\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen() {\n      return true;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      switch (name) {\n        case this._model.tag:\n          return false;\n\n        default:\n          return true;\n      }\n    }\n  }]);\n\n  return StaticXform;\n}(BaseXform);\n\nmodule.exports = StaticXform;","map":{"version":3,"sources":["../../../../lib/xlsx/xform/static-xform.js"],"names":["BaseXform","require","XmlStream","xmlStream","model","build","StaticXform","stream","name","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,cAAyB,CAAzB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAzB,wBAAyB,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAA,KAAA,CAAA,SAAA,EAAA,KAAA,EAAiC;AAC/BE,EAAAA,SAAS,CAATA,QAAAA,CAAmBC,KAAK,CAAxBD,GAAAA,EAA8BC,KAAK,CAAnCD,CAAAA;;AACA,MAAIC,KAAK,CAAT,CAAA,EAAa;AACXA,IAAAA,KAAK,CAALA,CAAAA,CAAAA,OAAAA,CAAgB,UAAA,KAAA,EAAS;AACvBC,MAAAA,KAAK,CAAA,SAAA,EAALA,KAAK,CAALA;AADFD,KAAAA;AAGD;;AACD,MAAIA,KAAK,CAAT,CAAA,EAAa;AACXD,IAAAA,SAAS,CAATA,SAAAA,CAAoBC,KAAK,CAAzBD,CAAAA;AACD;;AACDA,EAAAA,SAAS,CAATA,SAAAA;AACD;;IAEKG,W;;;;;AACJ,WAAA,WAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;AACjB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CADiB,IACjB,CAAA,CADiB,CAGjB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAA,KAAA,CAAA,MAAA,GAAA,KAAA;AATiB,WAAA,KAAA;AAUlB;;;;2BAEMH,S,EAAW;AAChB,UAAI,CAAC,KAAL,IAAA,EAAgB;AACd,YAAMI,MAAM,GAAG,IAAf,SAAe,EAAf;AACAF,QAAAA,KAAK,CAAA,MAAA,EAAS,KAAdA,MAAK,CAALA;AACA,aAAA,IAAA,GAAYE,MAAM,CAAlB,GAAA;AACD;;AACDJ,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,IAAAA;AACD;;;gCAEW;AACV,aAAA,IAAA;AACD;;;gCAEW,CAAE;;;+BAEHK,I,EAAM;AACf,cAAA,IAAA;AACE,aAAK,KAAA,MAAA,CAAL,GAAA;AACE,iBAAA,KAAA;;AACF;AACE,iBAAA,IAAA;AAJJ;AAMD;;;;EAnCuBR,S;;AAsC1BS,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["const BaseXform = require('./base-xform');\r\nconst XmlStream = require('../../utils/xml-stream');\r\n\r\n// const model = {\r\n//   tag: 'name',\r\n//   $: {attr: 'value'},\r\n//   c: [\r\n//     { tag: 'child' }\r\n//   ],\r\n//   t: 'some text'\r\n// };\r\n\r\nfunction build(xmlStream, model) {\r\n  xmlStream.openNode(model.tag, model.$);\r\n  if (model.c) {\r\n    model.c.forEach(child => {\r\n      build(xmlStream, child);\r\n    });\r\n  }\r\n  if (model.t) {\r\n    xmlStream.writeText(model.t);\r\n  }\r\n  xmlStream.closeNode();\r\n}\r\n\r\nclass StaticXform extends BaseXform {\r\n  constructor(model) {\r\n    super();\r\n\r\n    // This class is an optimisation for static (unimportant and unchanging) xml\r\n    // It is stateless - apart from its static model and so can be used as a singleton\r\n    // Being stateless - it will only track entry to and exit from it's root xml tag during parsing and nothing else\r\n    // Known issues:\r\n    //    since stateless - parseOpen always returns true. Parent xform must know when to start using this xform\r\n    //    if the root tag is recursive, the parsing will behave unpredictably\r\n    this._model = model;\r\n  }\r\n\r\n  render(xmlStream) {\r\n    if (!this._xml) {\r\n      const stream = new XmlStream();\r\n      build(stream, this._model);\r\n      this._xml = stream.xml;\r\n    }\r\n    xmlStream.writeXml(this._xml);\r\n  }\r\n\r\n  parseOpen() {\r\n    return true;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case this._model.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = StaticXform;\r\n"]},"metadata":{},"sourceType":"script"}