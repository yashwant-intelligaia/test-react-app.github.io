{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/yashwant-intelligaia/Documents/Official/TestTasks/my-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}\n\nvar fs = require('fs');\n\nvar JSZip = require('jszip');\n\nvar _require = require('readable-stream'),\n    PassThrough = _require.PassThrough;\n\nvar ZipStream = require('../utils/zip-stream');\n\nvar StreamBuf = require('../utils/stream-buf');\n\nvar utils = require('../utils/utils');\n\nvar XmlStream = require('../utils/xml-stream');\n\nvar _require2 = require('../utils/browser-buffer-decode'),\n    bufferToString = _require2.bufferToString;\n\nvar StylesXform = require('./xform/style/styles-xform');\n\nvar CoreXform = require('./xform/core/core-xform');\n\nvar SharedStringsXform = require('./xform/strings/shared-strings-xform');\n\nvar RelationshipsXform = require('./xform/core/relationships-xform');\n\nvar ContentTypesXform = require('./xform/core/content-types-xform');\n\nvar AppXform = require('./xform/core/app-xform');\n\nvar WorkbookXform = require('./xform/book/workbook-xform');\n\nvar WorksheetXform = require('./xform/sheet/worksheet-xform');\n\nvar DrawingXform = require('./xform/drawing/drawing-xform');\n\nvar TableXform = require('./xform/table/table-xform');\n\nvar CommentsXform = require('./xform/comment/comments-xform');\n\nvar VmlNotesXform = require('./xform/comment/vml-notes-xform');\n\nvar theme1Xml = require('./xml/theme1.js');\n\nfunction fsReadFileAsync(filename, options) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(filename, options, function (error, data) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nvar XLSX = /*#__PURE__*/function () {\n  function XLSX(workbook) {\n    _classCallCheck(this, XLSX);\n\n    this.workbook = workbook;\n  } // ===============================================================================\n  // Workbook\n  // =========================================================================\n  // Read\n\n\n  _createClass(XLSX, [{\n    key: \"readFile\",\n    value: function () {\n      var _readFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filename, options) {\n        var stream, workbook;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return utils.fs.exists(filename);\n\n              case 2:\n                if (_context.sent) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"File not found: \".concat(filename));\n\n              case 4:\n                stream = fs.createReadStream(filename);\n                _context.prev = 5;\n                _context.next = 8;\n                return this.read(stream, options);\n\n              case 8:\n                workbook = _context.sent;\n                stream.close();\n                return _context.abrupt(\"return\", workbook);\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](5);\n                stream.close();\n                throw _context.t0;\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 13]]);\n      }));\n\n      function readFile(_x, _x2) {\n        return _readFile.apply(this, arguments);\n      }\n\n      return readFile;\n    }()\n  }, {\n    key: \"parseRels\",\n    value: function parseRels(stream) {\n      var xform = new RelationshipsXform();\n      return xform.parseStream(stream);\n    }\n  }, {\n    key: \"parseWorkbook\",\n    value: function parseWorkbook(stream) {\n      var xform = new WorkbookXform();\n      return xform.parseStream(stream);\n    }\n  }, {\n    key: \"parseSharedStrings\",\n    value: function parseSharedStrings(stream) {\n      var xform = new SharedStringsXform();\n      return xform.parseStream(stream);\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model, options) {\n      var workbookXform = new WorkbookXform();\n      var worksheetXform = new WorksheetXform(options);\n      var drawingXform = new DrawingXform();\n      var tableXform = new TableXform();\n      workbookXform.reconcile(model); // reconcile drawings with their rels\n\n      var drawingOptions = {\n        media: model.media,\n        mediaIndex: model.mediaIndex\n      };\n      Object.keys(model.drawings).forEach(function (name) {\n        var drawing = model.drawings[name];\n        var drawingRel = model.drawingRels[name];\n\n        if (drawingRel) {\n          drawingOptions.rels = drawingRel.reduce(function (o, rel) {\n            o[rel.Id] = rel;\n            return o;\n          }, {});\n          (drawing.anchors || []).forEach(function (anchor) {\n            var hyperlinks = anchor.picture && anchor.picture.hyperlinks;\n\n            if (hyperlinks && drawingOptions.rels[hyperlinks.rId]) {\n              hyperlinks.hyperlink = drawingOptions.rels[hyperlinks.rId].Target;\n              delete hyperlinks.rId;\n            }\n          });\n          drawingXform.reconcile(drawing, drawingOptions);\n        }\n      }); // reconcile tables with the default styles\n\n      var tableOptions = {\n        styles: model.styles\n      };\n      Object.values(model.tables).forEach(function (table) {\n        tableXform.reconcile(table, tableOptions);\n      });\n      var sheetOptions = {\n        styles: model.styles,\n        sharedStrings: model.sharedStrings,\n        media: model.media,\n        mediaIndex: model.mediaIndex,\n        date1904: model.properties && model.properties.date1904,\n        drawings: model.drawings,\n        comments: model.comments,\n        tables: model.tables,\n        vmlDrawings: model.vmlDrawings\n      };\n      model.worksheets.forEach(function (worksheet) {\n        worksheet.relationships = model.worksheetRels[worksheet.sheetNo];\n        worksheetXform.reconcile(worksheet, sheetOptions);\n      }); // delete unnecessary parts\n\n      delete model.worksheetHash;\n      delete model.worksheetRels;\n      delete model.globalRels;\n      delete model.sharedStrings;\n      delete model.workbookRels;\n      delete model.sheetDefs;\n      delete model.styles;\n      delete model.mediaIndex;\n      delete model.drawings;\n      delete model.drawingRels;\n      delete model.vmlDrawings;\n    }\n  }, {\n    key: \"_processWorksheetEntry\",\n    value: function () {\n      var _processWorksheetEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream, model, sheetNo, options, path) {\n        var xform, worksheet;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                xform = new WorksheetXform(options);\n                _context2.next = 3;\n                return xform.parseStream(stream);\n\n              case 3:\n                worksheet = _context2.sent;\n                worksheet.sheetNo = sheetNo;\n                model.worksheetHash[path] = worksheet;\n                model.worksheets.push(worksheet);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function _processWorksheetEntry(_x3, _x4, _x5, _x6, _x7) {\n        return _processWorksheetEntry2.apply(this, arguments);\n      }\n\n      return _processWorksheetEntry;\n    }()\n  }, {\n    key: \"_processCommentEntry\",\n    value: function () {\n      var _processCommentEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(stream, model, name) {\n        var xform, comments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                xform = new CommentsXform();\n                _context3.next = 3;\n                return xform.parseStream(stream);\n\n              case 3:\n                comments = _context3.sent;\n                model.comments[\"../\".concat(name, \".xml\")] = comments;\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function _processCommentEntry(_x8, _x9, _x10) {\n        return _processCommentEntry2.apply(this, arguments);\n      }\n\n      return _processCommentEntry;\n    }()\n  }, {\n    key: \"_processTableEntry\",\n    value: function () {\n      var _processTableEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(stream, model, name) {\n        var xform, table;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                xform = new TableXform();\n                _context4.next = 3;\n                return xform.parseStream(stream);\n\n              case 3:\n                table = _context4.sent;\n                model.tables[\"../tables/\".concat(name, \".xml\")] = table;\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function _processTableEntry(_x11, _x12, _x13) {\n        return _processTableEntry2.apply(this, arguments);\n      }\n\n      return _processTableEntry;\n    }()\n  }, {\n    key: \"_processWorksheetRelsEntry\",\n    value: function () {\n      var _processWorksheetRelsEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(stream, model, sheetNo) {\n        var xform, relationships;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                xform = new RelationshipsXform();\n                _context5.next = 3;\n                return xform.parseStream(stream);\n\n              case 3:\n                relationships = _context5.sent;\n                model.worksheetRels[sheetNo] = relationships;\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function _processWorksheetRelsEntry(_x14, _x15, _x16) {\n        return _processWorksheetRelsEntry2.apply(this, arguments);\n      }\n\n      return _processWorksheetRelsEntry;\n    }()\n  }, {\n    key: \"_processMediaEntry\",\n    value: function () {\n      var _processMediaEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(entry, model, filename) {\n        var lastDot, extension, name;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                lastDot = filename.lastIndexOf('.'); // if we can't determine extension, ignore it\n\n                if (!(lastDot >= 1)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                extension = filename.substr(lastDot + 1);\n                name = filename.substr(0, lastDot);\n                _context6.next = 6;\n                return new Promise(function (resolve, reject) {\n                  var streamBuf = new StreamBuf();\n                  streamBuf.on('finish', function () {\n                    model.mediaIndex[filename] = model.media.length;\n                    model.mediaIndex[name] = model.media.length;\n                    var medium = {\n                      type: 'image',\n                      name: name,\n                      extension: extension,\n                      buffer: streamBuf.toBuffer()\n                    };\n                    model.media.push(medium);\n                    resolve();\n                  });\n                  entry.on('error', function (error) {\n                    reject(error);\n                  });\n                  entry.pipe(streamBuf);\n                });\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function _processMediaEntry(_x17, _x18, _x19) {\n        return _processMediaEntry2.apply(this, arguments);\n      }\n\n      return _processMediaEntry;\n    }()\n  }, {\n    key: \"_processDrawingEntry\",\n    value: function () {\n      var _processDrawingEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(entry, model, name) {\n        var xform, drawing;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                xform = new DrawingXform();\n                _context7.next = 3;\n                return xform.parseStream(entry);\n\n              case 3:\n                drawing = _context7.sent;\n                model.drawings[name] = drawing;\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function _processDrawingEntry(_x20, _x21, _x22) {\n        return _processDrawingEntry2.apply(this, arguments);\n      }\n\n      return _processDrawingEntry;\n    }()\n  }, {\n    key: \"_processDrawingRelsEntry\",\n    value: function () {\n      var _processDrawingRelsEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(entry, model, name) {\n        var xform, relationships;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                xform = new RelationshipsXform();\n                _context8.next = 3;\n                return xform.parseStream(entry);\n\n              case 3:\n                relationships = _context8.sent;\n                model.drawingRels[name] = relationships;\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function _processDrawingRelsEntry(_x23, _x24, _x25) {\n        return _processDrawingRelsEntry2.apply(this, arguments);\n      }\n\n      return _processDrawingRelsEntry;\n    }()\n  }, {\n    key: \"_processVmlDrawingEntry\",\n    value: function () {\n      var _processVmlDrawingEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(entry, model, name) {\n        var xform, vmlDrawing;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                xform = new VmlNotesXform();\n                _context9.next = 3;\n                return xform.parseStream(entry);\n\n              case 3:\n                vmlDrawing = _context9.sent;\n                model.vmlDrawings[\"../drawings/\".concat(name, \".vml\")] = vmlDrawing;\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function _processVmlDrawingEntry(_x26, _x27, _x28) {\n        return _processVmlDrawingEntry2.apply(this, arguments);\n      }\n\n      return _processVmlDrawingEntry;\n    }()\n  }, {\n    key: \"_processThemeEntry\",\n    value: function () {\n      var _processThemeEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(entry, model, name) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return new Promise(function (resolve, reject) {\n                  // TODO: stream entry into buffer and store the xml in the model.themes[]\n                  var stream = new StreamBuf();\n                  entry.on('error', reject);\n                  stream.on('error', reject);\n                  stream.on('finish', function () {\n                    model.themes[name] = stream.read().toString();\n                    resolve();\n                  });\n                  entry.pipe(stream);\n                });\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function _processThemeEntry(_x29, _x30, _x31) {\n        return _processThemeEntry2.apply(this, arguments);\n      }\n\n      return _processThemeEntry;\n    }()\n    /**\r\n     * @deprecated since version 4.0. You should use `#read` instead. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md\r\n     */\n\n  }, {\n    key: \"createInputStream\",\n    value: function createInputStream() {\n      throw new Error('`XLSX#createInputStream` is deprecated. You should use `XLSX#read` instead. This method will be removed in version 5.0. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md');\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(stream, options) {\n        var chunks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                // TODO: Remove once node v8 is deprecated\n                // Detect and upgrade old streams\n                if (!stream[Symbol.asyncIterator] && stream.pipe) {\n                  stream = stream.pipe(new PassThrough());\n                }\n\n                chunks = [];\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context11.prev = 4;\n                _iterator = _asyncIterator(stream);\n\n              case 6:\n                _context11.next = 8;\n                return _iterator.next();\n\n              case 8:\n                _step = _context11.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context11.next = 12;\n                return _step.value;\n\n              case 12:\n                _value = _context11.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context11.next = 19;\n                  break;\n                }\n\n                chunk = _value;\n                chunks.push(chunk);\n\n              case 16:\n                _iteratorNormalCompletion = true;\n                _context11.next = 6;\n                break;\n\n              case 19:\n                _context11.next = 25;\n                break;\n\n              case 21:\n                _context11.prev = 21;\n                _context11.t0 = _context11[\"catch\"](4);\n                _didIteratorError = true;\n                _iteratorError = _context11.t0;\n\n              case 25:\n                _context11.prev = 25;\n                _context11.prev = 26;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context11.next = 30;\n                  break;\n                }\n\n                _context11.next = 30;\n                return _iterator.return();\n\n              case 30:\n                _context11.prev = 30;\n\n                if (!_didIteratorError) {\n                  _context11.next = 33;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 33:\n                return _context11.finish(30);\n\n              case 34:\n                return _context11.finish(25);\n\n              case 35:\n                return _context11.abrupt(\"return\", this.load(Buffer.concat(chunks), options));\n\n              case 36:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[4, 21, 25, 35], [26,, 30, 34]]);\n      }));\n\n      function read(_x32, _x33) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(data, options) {\n        var buffer, model, zip, _i, _Object$values, entry, entryName, stream, content, chunkSize, i, workbook, appXform, appProperties, coreXform, coreProperties, match;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (options && options.base64) {\n                  buffer = Buffer.from(data.toString(), 'base64');\n                } else {\n                  buffer = data;\n                }\n\n                model = {\n                  worksheets: [],\n                  worksheetHash: {},\n                  worksheetRels: [],\n                  themes: {},\n                  media: [],\n                  mediaIndex: {},\n                  drawings: {},\n                  drawingRels: {},\n                  comments: {},\n                  tables: {},\n                  vmlDrawings: {}\n                };\n                _context12.next = 4;\n                return JSZip.loadAsync(buffer);\n\n              case 4:\n                zip = _context12.sent;\n                _i = 0, _Object$values = Object.values(zip.files);\n\n              case 6:\n                if (!(_i < _Object$values.length)) {\n                  _context12.next = 126;\n                  break;\n                }\n\n                entry = _Object$values[_i];\n\n                if (entry.dir) {\n                  _context12.next = 123;\n                  break;\n                }\n\n                entryName = entry.name;\n\n                if (entryName[0] === '/') {\n                  entryName = entryName.substr(1);\n                }\n\n                stream = void 0;\n\n                if (!(entryName.match(/xl\\/media\\//) || // themes are not parsed as stream\n                entryName.match(/xl\\/theme\\/([a-zA-Z0-9]+)[.]xml/))) {\n                  _context12.next = 21;\n                  break;\n                }\n\n                stream = new PassThrough();\n                _context12.t0 = stream;\n                _context12.next = 17;\n                return entry.async('nodebuffer');\n\n              case 17:\n                _context12.t1 = _context12.sent;\n\n                _context12.t0.write.call(_context12.t0, _context12.t1);\n\n                _context12.next = 36;\n                break;\n\n              case 21:\n                // use object mode to avoid buffer-string convention\n                stream = new PassThrough({\n                  writableObjectMode: true,\n                  readableObjectMode: true\n                });\n                content = void 0; // https://www.npmjs.com/package/process\n\n                if (!process.browser) {\n                  _context12.next = 31;\n                  break;\n                }\n\n                _context12.t2 = bufferToString;\n                _context12.next = 27;\n                return entry.async('nodebuffer');\n\n              case 27:\n                _context12.t3 = _context12.sent;\n                content = (0, _context12.t2)(_context12.t3);\n                _context12.next = 34;\n                break;\n\n              case 31:\n                _context12.next = 33;\n                return entry.async('string');\n\n              case 33:\n                content = _context12.sent;\n\n              case 34:\n                chunkSize = 16 * 1024;\n\n                for (i = 0; i < content.length; i += chunkSize) {\n                  stream.write(content.substring(i, i + chunkSize));\n                }\n\n              case 36:\n                stream.end();\n                _context12.t4 = entryName;\n                _context12.next = _context12.t4 === '_rels/.rels' ? 40 : _context12.t4 === 'xl/workbook.xml' ? 44 : _context12.t4 === 'xl/_rels/workbook.xml.rels' ? 53 : _context12.t4 === 'xl/sharedStrings.xml' ? 57 : _context12.t4 === 'xl/styles.xml' ? 61 : _context12.t4 === 'docProps/app.xml' ? 65 : _context12.t4 === 'docProps/core.xml' ? 72 : 78;\n                break;\n\n              case 40:\n                _context12.next = 42;\n                return this.parseRels(stream);\n\n              case 42:\n                model.globalRels = _context12.sent;\n                return _context12.abrupt(\"break\", 123);\n\n              case 44:\n                _context12.next = 46;\n                return this.parseWorkbook(stream);\n\n              case 46:\n                workbook = _context12.sent;\n                model.sheets = workbook.sheets;\n                model.definedNames = workbook.definedNames;\n                model.views = workbook.views;\n                model.properties = workbook.properties;\n                model.calcProperties = workbook.calcProperties;\n                return _context12.abrupt(\"break\", 123);\n\n              case 53:\n                _context12.next = 55;\n                return this.parseRels(stream);\n\n              case 55:\n                model.workbookRels = _context12.sent;\n                return _context12.abrupt(\"break\", 123);\n\n              case 57:\n                model.sharedStrings = new SharedStringsXform();\n                _context12.next = 60;\n                return model.sharedStrings.parseStream(stream);\n\n              case 60:\n                return _context12.abrupt(\"break\", 123);\n\n              case 61:\n                model.styles = new StylesXform();\n                _context12.next = 64;\n                return model.styles.parseStream(stream);\n\n              case 64:\n                return _context12.abrupt(\"break\", 123);\n\n              case 65:\n                appXform = new AppXform();\n                _context12.next = 68;\n                return appXform.parseStream(stream);\n\n              case 68:\n                appProperties = _context12.sent;\n                model.company = appProperties.company;\n                model.manager = appProperties.manager;\n                return _context12.abrupt(\"break\", 123);\n\n              case 72:\n                coreXform = new CoreXform();\n                _context12.next = 75;\n                return coreXform.parseStream(stream);\n\n              case 75:\n                coreProperties = _context12.sent;\n                Object.assign(model, coreProperties);\n                return _context12.abrupt(\"break\", 123);\n\n              case 78:\n                match = entryName.match(/xl\\/worksheets\\/sheet(\\d+)[.]xml/);\n\n                if (!match) {\n                  _context12.next = 83;\n                  break;\n                }\n\n                _context12.next = 82;\n                return this._processWorksheetEntry(stream, model, match[1], options, entryName);\n\n              case 82:\n                return _context12.abrupt(\"break\", 123);\n\n              case 83:\n                match = entryName.match(/xl\\/worksheets\\/_rels\\/sheet(\\d+)[.]xml.rels/);\n\n                if (!match) {\n                  _context12.next = 88;\n                  break;\n                }\n\n                _context12.next = 87;\n                return this._processWorksheetRelsEntry(stream, model, match[1]);\n\n              case 87:\n                return _context12.abrupt(\"break\", 123);\n\n              case 88:\n                match = entryName.match(/xl\\/theme\\/([a-zA-Z0-9]+)[.]xml/);\n\n                if (!match) {\n                  _context12.next = 93;\n                  break;\n                }\n\n                _context12.next = 92;\n                return this._processThemeEntry(stream, model, match[1]);\n\n              case 92:\n                return _context12.abrupt(\"break\", 123);\n\n              case 93:\n                match = entryName.match(/xl\\/media\\/([a-zA-Z0-9]+[.][a-zA-Z0-9]{3,4})$/);\n\n                if (!match) {\n                  _context12.next = 98;\n                  break;\n                }\n\n                _context12.next = 97;\n                return this._processMediaEntry(stream, model, match[1]);\n\n              case 97:\n                return _context12.abrupt(\"break\", 123);\n\n              case 98:\n                match = entryName.match(/xl\\/drawings\\/([a-zA-Z0-9]+)[.]xml/);\n\n                if (!match) {\n                  _context12.next = 103;\n                  break;\n                }\n\n                _context12.next = 102;\n                return this._processDrawingEntry(stream, model, match[1]);\n\n              case 102:\n                return _context12.abrupt(\"break\", 123);\n\n              case 103:\n                match = entryName.match(/xl\\/(comments\\d+)[.]xml/);\n\n                if (!match) {\n                  _context12.next = 108;\n                  break;\n                }\n\n                _context12.next = 107;\n                return this._processCommentEntry(stream, model, match[1]);\n\n              case 107:\n                return _context12.abrupt(\"break\", 123);\n\n              case 108:\n                match = entryName.match(/xl\\/tables\\/(table\\d+)[.]xml/);\n\n                if (!match) {\n                  _context12.next = 113;\n                  break;\n                }\n\n                _context12.next = 112;\n                return this._processTableEntry(stream, model, match[1]);\n\n              case 112:\n                return _context12.abrupt(\"break\", 123);\n\n              case 113:\n                match = entryName.match(/xl\\/drawings\\/_rels\\/([a-zA-Z0-9]+)[.]xml[.]rels/);\n\n                if (!match) {\n                  _context12.next = 118;\n                  break;\n                }\n\n                _context12.next = 117;\n                return this._processDrawingRelsEntry(stream, model, match[1]);\n\n              case 117:\n                return _context12.abrupt(\"break\", 123);\n\n              case 118:\n                match = entryName.match(/xl\\/drawings\\/(vmlDrawing\\d+)[.]vml/);\n\n                if (!match) {\n                  _context12.next = 123;\n                  break;\n                }\n\n                _context12.next = 122;\n                return this._processVmlDrawingEntry(stream, model, match[1]);\n\n              case 122:\n                return _context12.abrupt(\"break\", 123);\n\n              case 123:\n                _i++;\n                _context12.next = 6;\n                break;\n\n              case 126:\n                this.reconcile(model, options); // apply model\n\n                this.workbook.model = model;\n                return _context12.abrupt(\"return\", this.workbook);\n\n              case 129:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function load(_x34, _x35) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }() // =========================================================================\n    // Write\n\n  }, {\n    key: \"addMedia\",\n    value: function () {\n      var _addMedia = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(zip, model) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return Promise.all(model.media.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(medium) {\n                    var filename, data, dataimg64, content;\n                    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n                      while (1) {\n                        switch (_context13.prev = _context13.next) {\n                          case 0:\n                            if (!(medium.type === 'image')) {\n                              _context13.next = 13;\n                              break;\n                            }\n\n                            filename = \"xl/media/\".concat(medium.name, \".\").concat(medium.extension);\n\n                            if (!medium.filename) {\n                              _context13.next = 7;\n                              break;\n                            }\n\n                            _context13.next = 5;\n                            return fsReadFileAsync(medium.filename);\n\n                          case 5:\n                            data = _context13.sent;\n                            return _context13.abrupt(\"return\", zip.append(data, {\n                              name: filename\n                            }));\n\n                          case 7:\n                            if (!medium.buffer) {\n                              _context13.next = 9;\n                              break;\n                            }\n\n                            return _context13.abrupt(\"return\", zip.append(medium.buffer, {\n                              name: filename\n                            }));\n\n                          case 9:\n                            if (!medium.base64) {\n                              _context13.next = 13;\n                              break;\n                            }\n\n                            dataimg64 = medium.base64;\n                            content = dataimg64.substring(dataimg64.indexOf(',') + 1);\n                            return _context13.abrupt(\"return\", zip.append(content, {\n                              name: filename,\n                              base64: true\n                            }));\n\n                          case 13:\n                            throw new Error('Unsupported media');\n\n                          case 14:\n                          case \"end\":\n                            return _context13.stop();\n                        }\n                      }\n                    }, _callee13);\n                  }));\n\n                  return function (_x38) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n\n      function addMedia(_x36, _x37) {\n        return _addMedia.apply(this, arguments);\n      }\n\n      return addMedia;\n    }()\n  }, {\n    key: \"addDrawings\",\n    value: function addDrawings(zip, model) {\n      var drawingXform = new DrawingXform();\n      var relsXform = new RelationshipsXform();\n      model.worksheets.forEach(function (worksheet) {\n        var drawing = worksheet.drawing;\n\n        if (drawing) {\n          drawingXform.prepare(drawing, {});\n          var xml = drawingXform.toXml(drawing);\n          zip.append(xml, {\n            name: \"xl/drawings/\".concat(drawing.name, \".xml\")\n          });\n          xml = relsXform.toXml(drawing.rels);\n          zip.append(xml, {\n            name: \"xl/drawings/_rels/\".concat(drawing.name, \".xml.rels\")\n          });\n        }\n      });\n    }\n  }, {\n    key: \"addTables\",\n    value: function addTables(zip, model) {\n      var tableXform = new TableXform();\n      model.worksheets.forEach(function (worksheet) {\n        var tables = worksheet.tables;\n        tables.forEach(function (table) {\n          tableXform.prepare(table, {});\n          var tableXml = tableXform.toXml(table);\n          zip.append(tableXml, {\n            name: \"xl/tables/\".concat(table.target)\n          });\n        });\n      });\n    }\n  }, {\n    key: \"addContentTypes\",\n    value: function () {\n      var _addContentTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(zip, model) {\n        var xform, xml;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                xform = new ContentTypesXform();\n                xml = xform.toXml(model);\n                zip.append(xml, {\n                  name: '[Content_Types].xml'\n                });\n\n              case 3:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      }));\n\n      function addContentTypes(_x39, _x40) {\n        return _addContentTypes.apply(this, arguments);\n      }\n\n      return addContentTypes;\n    }()\n  }, {\n    key: \"addApp\",\n    value: function () {\n      var _addApp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(zip, model) {\n        var xform, xml;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                xform = new AppXform();\n                xml = xform.toXml(model);\n                zip.append(xml, {\n                  name: 'docProps/app.xml'\n                });\n\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16);\n      }));\n\n      function addApp(_x41, _x42) {\n        return _addApp.apply(this, arguments);\n      }\n\n      return addApp;\n    }()\n  }, {\n    key: \"addCore\",\n    value: function () {\n      var _addCore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(zip, model) {\n        var coreXform;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                coreXform = new CoreXform();\n                zip.append(coreXform.toXml(model), {\n                  name: 'docProps/core.xml'\n                });\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n\n      function addCore(_x43, _x44) {\n        return _addCore.apply(this, arguments);\n      }\n\n      return addCore;\n    }()\n  }, {\n    key: \"addThemes\",\n    value: function () {\n      var _addThemes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(zip, model) {\n        var themes;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                themes = model.themes || {\n                  theme1: theme1Xml\n                };\n                Object.keys(themes).forEach(function (name) {\n                  var xml = themes[name];\n                  var path = \"xl/theme/\".concat(name, \".xml\");\n                  zip.append(xml, {\n                    name: path\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      function addThemes(_x45, _x46) {\n        return _addThemes.apply(this, arguments);\n      }\n\n      return addThemes;\n    }()\n  }, {\n    key: \"addOfficeRels\",\n    value: function () {\n      var _addOfficeRels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(zip) {\n        var xform, xml;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                xform = new RelationshipsXform();\n                xml = xform.toXml([{\n                  Id: 'rId1',\n                  Type: XLSX.RelType.OfficeDocument,\n                  Target: 'xl/workbook.xml'\n                }, {\n                  Id: 'rId2',\n                  Type: XLSX.RelType.CoreProperties,\n                  Target: 'docProps/core.xml'\n                }, {\n                  Id: 'rId3',\n                  Type: XLSX.RelType.ExtenderProperties,\n                  Target: 'docProps/app.xml'\n                }]);\n                zip.append(xml, {\n                  name: '_rels/.rels'\n                });\n\n              case 3:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      function addOfficeRels(_x47) {\n        return _addOfficeRels.apply(this, arguments);\n      }\n\n      return addOfficeRels;\n    }()\n  }, {\n    key: \"addWorkbookRels\",\n    value: function () {\n      var _addWorkbookRels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(zip, model) {\n        var count, relationships, xform, xml;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                count = 1;\n                relationships = [{\n                  Id: \"rId\".concat(count++),\n                  Type: XLSX.RelType.Styles,\n                  Target: 'styles.xml'\n                }, {\n                  Id: \"rId\".concat(count++),\n                  Type: XLSX.RelType.Theme,\n                  Target: 'theme/theme1.xml'\n                }];\n\n                if (model.sharedStrings.count) {\n                  relationships.push({\n                    Id: \"rId\".concat(count++),\n                    Type: XLSX.RelType.SharedStrings,\n                    Target: 'sharedStrings.xml'\n                  });\n                }\n\n                model.worksheets.forEach(function (worksheet) {\n                  worksheet.rId = \"rId\".concat(count++);\n                  relationships.push({\n                    Id: worksheet.rId,\n                    Type: XLSX.RelType.Worksheet,\n                    Target: \"worksheets/sheet\".concat(worksheet.id, \".xml\")\n                  });\n                });\n                xform = new RelationshipsXform();\n                xml = xform.toXml(relationships);\n                zip.append(xml, {\n                  name: 'xl/_rels/workbook.xml.rels'\n                });\n\n              case 7:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      }));\n\n      function addWorkbookRels(_x48, _x49) {\n        return _addWorkbookRels.apply(this, arguments);\n      }\n\n      return addWorkbookRels;\n    }()\n  }, {\n    key: \"addSharedStrings\",\n    value: function () {\n      var _addSharedStrings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(zip, model) {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                if (model.sharedStrings && model.sharedStrings.count) {\n                  zip.append(model.sharedStrings.xml, {\n                    name: 'xl/sharedStrings.xml'\n                  });\n                }\n\n              case 1:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21);\n      }));\n\n      function addSharedStrings(_x50, _x51) {\n        return _addSharedStrings.apply(this, arguments);\n      }\n\n      return addSharedStrings;\n    }()\n  }, {\n    key: \"addStyles\",\n    value: function () {\n      var _addStyles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(zip, model) {\n        var xml;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                xml = model.styles.xml;\n\n                if (xml) {\n                  zip.append(xml, {\n                    name: 'xl/styles.xml'\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22);\n      }));\n\n      function addStyles(_x52, _x53) {\n        return _addStyles.apply(this, arguments);\n      }\n\n      return addStyles;\n    }()\n  }, {\n    key: \"addWorkbook\",\n    value: function () {\n      var _addWorkbook = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(zip, model) {\n        var xform;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                xform = new WorkbookXform();\n                zip.append(xform.toXml(model), {\n                  name: 'xl/workbook.xml'\n                });\n\n              case 2:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23);\n      }));\n\n      function addWorkbook(_x54, _x55) {\n        return _addWorkbook.apply(this, arguments);\n      }\n\n      return addWorkbook;\n    }()\n  }, {\n    key: \"addWorksheets\",\n    value: function () {\n      var _addWorksheets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(zip, model) {\n        var worksheetXform, relationshipsXform, commentsXform, vmlNotesXform;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                // preparation phase\n                worksheetXform = new WorksheetXform();\n                relationshipsXform = new RelationshipsXform();\n                commentsXform = new CommentsXform();\n                vmlNotesXform = new VmlNotesXform(); // write sheets\n\n                model.worksheets.forEach(function (worksheet) {\n                  var xmlStream = new XmlStream();\n                  worksheetXform.render(xmlStream, worksheet);\n                  zip.append(xmlStream.xml, {\n                    name: \"xl/worksheets/sheet\".concat(worksheet.id, \".xml\")\n                  });\n\n                  if (worksheet.rels && worksheet.rels.length) {\n                    xmlStream = new XmlStream();\n                    relationshipsXform.render(xmlStream, worksheet.rels);\n                    zip.append(xmlStream.xml, {\n                      name: \"xl/worksheets/_rels/sheet\".concat(worksheet.id, \".xml.rels\")\n                    });\n                  }\n\n                  if (worksheet.comments.length > 0) {\n                    xmlStream = new XmlStream();\n                    commentsXform.render(xmlStream, worksheet);\n                    zip.append(xmlStream.xml, {\n                      name: \"xl/comments\".concat(worksheet.id, \".xml\")\n                    });\n                    xmlStream = new XmlStream();\n                    vmlNotesXform.render(xmlStream, worksheet);\n                    zip.append(xmlStream.xml, {\n                      name: \"xl/drawings/vmlDrawing\".concat(worksheet.id, \".vml\")\n                    });\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n\n      function addWorksheets(_x56, _x57) {\n        return _addWorksheets.apply(this, arguments);\n      }\n\n      return addWorksheets;\n    }()\n  }, {\n    key: \"_finalize\",\n    value: function _finalize(zip) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        zip.on('finish', function () {\n          resolve(_this);\n        });\n        zip.on('error', reject);\n        zip.finalize();\n      });\n    }\n  }, {\n    key: \"prepareModel\",\n    value: function prepareModel(model, options) {\n      // ensure following properties have sane values\n      model.creator = model.creator || 'ExcelJS';\n      model.lastModifiedBy = model.lastModifiedBy || 'ExcelJS';\n      model.created = model.created || new Date();\n      model.modified = model.modified || new Date();\n      model.useSharedStrings = options.useSharedStrings !== undefined ? options.useSharedStrings : true;\n      model.useStyles = options.useStyles !== undefined ? options.useStyles : true; // Manage the shared strings\n\n      model.sharedStrings = new SharedStringsXform(); // add a style manager to handle cell formats, fonts, etc.\n\n      model.styles = model.useStyles ? new StylesXform(true) : new StylesXform.Mock(); // prepare all of the things before the render\n\n      var workbookXform = new WorkbookXform();\n      var worksheetXform = new WorksheetXform();\n      workbookXform.prepare(model);\n      var worksheetOptions = {\n        sharedStrings: model.sharedStrings,\n        styles: model.styles,\n        date1904: model.properties.date1904,\n        drawingsCount: 0,\n        media: model.media\n      };\n      worksheetOptions.drawings = model.drawings = [];\n      worksheetOptions.commentRefs = model.commentRefs = [];\n      var tableCount = 0;\n      model.tables = [];\n      model.worksheets.forEach(function (worksheet) {\n        // assign unique filenames to tables\n        worksheet.tables.forEach(function (table) {\n          tableCount++;\n          table.target = \"table\".concat(tableCount, \".xml\");\n          table.id = tableCount;\n          model.tables.push(table);\n        });\n        worksheetXform.prepare(worksheet, worksheetOptions);\n      }); // TODO: workbook drawing list\n    }\n  }, {\n    key: \"write\",\n    value: function () {\n      var _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(stream, options) {\n        var model, zip;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                options = options || {};\n                model = this.workbook.model;\n                zip = new ZipStream.ZipWriter(options.zip);\n                zip.pipe(stream);\n                this.prepareModel(model, options); // render\n\n                _context25.next = 7;\n                return this.addContentTypes(zip, model);\n\n              case 7:\n                _context25.next = 9;\n                return this.addOfficeRels(zip, model);\n\n              case 9:\n                _context25.next = 11;\n                return this.addWorkbookRels(zip, model);\n\n              case 11:\n                _context25.next = 13;\n                return this.addWorksheets(zip, model);\n\n              case 13:\n                _context25.next = 15;\n                return this.addSharedStrings(zip, model);\n\n              case 15:\n                _context25.next = 17;\n                return this.addDrawings(zip, model);\n\n              case 17:\n                _context25.next = 19;\n                return this.addTables(zip, model);\n\n              case 19:\n                _context25.next = 21;\n                return Promise.all([this.addThemes(zip, model), this.addStyles(zip, model)]);\n\n              case 21:\n                _context25.next = 23;\n                return this.addMedia(zip, model);\n\n              case 23:\n                _context25.next = 25;\n                return Promise.all([this.addApp(zip, model), this.addCore(zip, model)]);\n\n              case 25:\n                _context25.next = 27;\n                return this.addWorkbook(zip, model);\n\n              case 27:\n                return _context25.abrupt(\"return\", this._finalize(zip));\n\n              case 28:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function write(_x58, _x59) {\n        return _write.apply(this, arguments);\n      }\n\n      return write;\n    }()\n  }, {\n    key: \"writeFile\",\n    value: function writeFile(filename, options) {\n      var _this2 = this;\n\n      var stream = fs.createWriteStream(filename);\n      return new Promise(function (resolve, reject) {\n        stream.on('finish', function () {\n          resolve();\n        });\n        stream.on('error', function (error) {\n          reject(error);\n        });\n\n        _this2.write(stream, options).then(function () {\n          stream.end();\n        });\n      });\n    }\n  }, {\n    key: \"writeBuffer\",\n    value: function () {\n      var _writeBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(options) {\n        var stream;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                stream = new StreamBuf();\n                _context26.next = 3;\n                return this.write(stream, options);\n\n              case 3:\n                return _context26.abrupt(\"return\", stream.read());\n\n              case 4:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function writeBuffer(_x60) {\n        return _writeBuffer.apply(this, arguments);\n      }\n\n      return writeBuffer;\n    }()\n  }]);\n\n  return XLSX;\n}();\n\nXLSX.RelType = require('./rel-type');\nmodule.exports = XLSX;","map":{"version":3,"sources":["../../../lib/xlsx/xlsx.js"],"names":["fs","require","JSZip","PassThrough","ZipStream","StreamBuf","utils","XmlStream","bufferToString","StylesXform","CoreXform","SharedStringsXform","RelationshipsXform","ContentTypesXform","AppXform","WorkbookXform","WorksheetXform","DrawingXform","TableXform","CommentsXform","VmlNotesXform","theme1Xml","reject","resolve","XLSX","filename","options","stream","workbook","xform","model","workbookXform","worksheetXform","drawingXform","tableXform","drawingOptions","media","mediaIndex","Object","drawing","drawingRel","o","rel","hyperlinks","anchor","tableOptions","styles","sheetOptions","sharedStrings","date1904","drawings","comments","tables","vmlDrawings","worksheet","sheetNo","path","name","table","relationships","entry","lastDot","extension","streamBuf","medium","type","buffer","vmlDrawing","Symbol","chunks","chunk","Buffer","data","worksheets","worksheetHash","worksheetRels","themes","drawingRels","zip","dir","entryName","write","writableObjectMode","readableObjectMode","content","process","browser","chunkSize","i","globalRels","workbookRels","appXform","appProperties","coreXform","coreProperties","match","fsReadFileAsync","dataimg64","base64","relsXform","xml","tableXml","theme1","Id","Type","Target","count","relationshipsXform","commentsXform","vmlNotesXform","xmlStream","worksheetOptions","drawingsCount","tableCount","Promise","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAlB,IAAkB,CAAlB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAArB,OAAqB,CAArB;;eACsBA,OAAO,CAAA,iBAAA,C;IAAtBE,W,YAAAA,W;;AACP,IAAMC,SAAS,GAAGH,OAAO,CAAzB,qBAAyB,CAAzB;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAzB,qBAAyB,CAAzB;;AAEA,IAAMK,KAAK,GAAGL,OAAO,CAArB,gBAAqB,CAArB;;AACA,IAAMM,SAAS,GAAGN,OAAO,CAAzB,qBAAyB,CAAzB;;gBACyBA,OAAO,CAAA,gCAAA,C;IAAzBO,c,aAAAA,c;;AAEP,IAAMC,WAAW,GAAGR,OAAO,CAA3B,4BAA2B,CAA3B;;AAEA,IAAMS,SAAS,GAAGT,OAAO,CAAzB,yBAAyB,CAAzB;;AACA,IAAMU,kBAAkB,GAAGV,OAAO,CAAlC,sCAAkC,CAAlC;;AACA,IAAMW,kBAAkB,GAAGX,OAAO,CAAlC,kCAAkC,CAAlC;;AACA,IAAMY,iBAAiB,GAAGZ,OAAO,CAAjC,kCAAiC,CAAjC;;AACA,IAAMa,QAAQ,GAAGb,OAAO,CAAxB,wBAAwB,CAAxB;;AACA,IAAMc,aAAa,GAAGd,OAAO,CAA7B,6BAA6B,CAA7B;;AACA,IAAMe,cAAc,GAAGf,OAAO,CAA9B,+BAA8B,CAA9B;;AACA,IAAMgB,YAAY,GAAGhB,OAAO,CAA5B,+BAA4B,CAA5B;;AACA,IAAMiB,UAAU,GAAGjB,OAAO,CAA1B,2BAA0B,CAA1B;;AACA,IAAMkB,aAAa,GAAGlB,OAAO,CAA7B,gCAA6B,CAA7B;;AACA,IAAMmB,aAAa,GAAGnB,OAAO,CAA7B,iCAA6B,CAA7B;;AAEA,IAAMoB,SAAS,GAAGpB,OAAO,CAAzB,iBAAyB,CAAzB;;AAEA,SAAA,eAAA,CAAA,QAAA,EAAA,OAAA,EAA4C;AAC1C,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtCD,IAAAA,EAAE,CAAFA,QAAAA,CAAAA,QAAAA,EAAAA,OAAAA,EAA+B,UAAA,KAAA,EAAA,IAAA,EAAiB;AAC9C,UAAA,KAAA,EAAW;AACTsB,QAAAA,MAAM,CAANA,KAAM,CAANA;AADF,OAAA,MAEO;AACLC,QAAAA,OAAO,CAAPA,IAAO,CAAPA;AACD;AALHvB,KAAAA;AADF,GAAO,CAAP;AASD;;IAEKwB,I;AACJ,WAAA,IAAA,CAAA,QAAA,EAAsB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA;;AACpB,SAAA,QAAA,GAAA,QAAA;IAGF;AACA;AACA;AACA;;;;;;gGAEeC,Q,EAAUC,O;;;;;;;uBACXpB,KAAK,CAALA,EAAAA,CAAAA,MAAAA,CAAAA,QAAAA,C;;;;;;;;sBACJ,IAAA,KAAA,CAAA,mBAAA,MAAA,CAAA,QAAA,CAAA,C;;;AAEFqB,gBAAAA,M,GAAS3B,EAAE,CAAFA,gBAAAA,CAAAA,QAAAA,CAAT2B;;;uBAEmB,KAAA,IAAA,CAAA,MAAA,EAAA,OAAA,C;;;AAAjBC,gBAAAA,Q,gBAAAA;AACND,gBAAAA,MAAM,CAANA,KAAAA;iDACOC,Q;;;;;AAEPD,gBAAAA,MAAM,CAANA,KAAAA;;;;;;;;;;;;;;;;;;;8BAKMA,M,EAAQ;AAChB,UAAME,KAAK,GAAG,IAAd,kBAAc,EAAd;AACA,aAAOA,KAAK,CAALA,WAAAA,CAAP,MAAOA,CAAP;AACD;;;kCAEaF,M,EAAQ;AACpB,UAAME,KAAK,GAAG,IAAd,aAAc,EAAd;AACA,aAAOA,KAAK,CAALA,WAAAA,CAAP,MAAOA,CAAP;AACD;;;uCAEkBF,M,EAAQ;AACzB,UAAME,KAAK,GAAG,IAAd,kBAAc,EAAd;AACA,aAAOA,KAAK,CAALA,WAAAA,CAAP,MAAOA,CAAP;AACD;;;8BAESC,K,EAAOJ,O,EAAS;AACxB,UAAMK,aAAa,GAAG,IAAtB,aAAsB,EAAtB;AACA,UAAMC,cAAc,GAAG,IAAA,cAAA,CAAvB,OAAuB,CAAvB;AACA,UAAMC,YAAY,GAAG,IAArB,YAAqB,EAArB;AACA,UAAMC,UAAU,GAAG,IAAnB,UAAmB,EAAnB;AAEAH,MAAAA,aAAa,CAAbA,SAAAA,CANwB,KAMxBA,EANwB,CAQxB;;AACA,UAAMI,cAAc,GAAG;AACrBC,QAAAA,KAAK,EAAEN,KAAK,CADS,KAAA;AAErBO,QAAAA,UAAU,EAAEP,KAAK,CAACO;AAFG,OAAvB;AAIAC,MAAAA,MAAM,CAANA,IAAAA,CAAYR,KAAK,CAAjBQ,QAAAA,EAAAA,OAAAA,CAAoC,UAAA,IAAA,EAAQ;AAC1C,YAAMC,OAAO,GAAGT,KAAK,CAALA,QAAAA,CAAhB,IAAgBA,CAAhB;AACA,YAAMU,UAAU,GAAGV,KAAK,CAALA,WAAAA,CAAnB,IAAmBA,CAAnB;;AACA,YAAA,UAAA,EAAgB;AACdK,UAAAA,cAAc,CAAdA,IAAAA,GAAsB,UAAU,CAAV,MAAA,CAAkB,UAAA,CAAA,EAAA,GAAA,EAAY;AAClDM,YAAAA,CAAC,CAACC,GAAG,CAALD,EAAC,CAADA,GAAAA,GAAAA;AACA,mBAAA,CAAA;AAFoB,WAAA,EAAtBN,EAAsB,CAAtBA;AAIA,WAACI,OAAO,CAAPA,OAAAA,IAAD,EAAA,EAAA,OAAA,CAAgC,UAAA,MAAA,EAAU;AACxC,gBAAMI,UAAU,GAAGC,MAAM,CAANA,OAAAA,IAAkBA,MAAM,CAANA,OAAAA,CAArC,UAAA;;AACA,gBAAID,UAAU,IAAIR,cAAc,CAAdA,IAAAA,CAAoBQ,UAAU,CAAhD,GAAkBR,CAAlB,EAAuD;AACrDQ,cAAAA,UAAU,CAAVA,SAAAA,GAAuBR,cAAc,CAAdA,IAAAA,CAAoBQ,UAAU,CAA9BR,GAAAA,EAAvBQ,MAAAA;AACA,qBAAOA,UAAU,CAAjB,GAAA;AACD;AALH,WAAA;AAOAV,UAAAA,YAAY,CAAZA,SAAAA,CAAAA,OAAAA,EAAAA,cAAAA;AACD;AA7BqB,OAaxBK,EAbwB,CAgCxB;;AACA,UAAMO,YAAY,GAAG;AACnBC,QAAAA,MAAM,EAAEhB,KAAK,CAACgB;AADK,OAArB;AAGAR,MAAAA,MAAM,CAANA,MAAAA,CAAcR,KAAK,CAAnBQ,MAAAA,EAAAA,OAAAA,CAAoC,UAAA,KAAA,EAAS;AAC3CJ,QAAAA,UAAU,CAAVA,SAAAA,CAAAA,KAAAA,EAAAA,YAAAA;AADFI,OAAAA;AAIA,UAAMS,YAAY,GAAG;AACnBD,QAAAA,MAAM,EAAEhB,KAAK,CADM,MAAA;AAEnBkB,QAAAA,aAAa,EAAElB,KAAK,CAFD,aAAA;AAGnBM,QAAAA,KAAK,EAAEN,KAAK,CAHO,KAAA;AAInBO,QAAAA,UAAU,EAAEP,KAAK,CAJE,UAAA;AAKnBmB,QAAAA,QAAQ,EAAEnB,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAALA,UAAAA,CALX,QAAA;AAMnBoB,QAAAA,QAAQ,EAAEpB,KAAK,CANI,QAAA;AAOnBqB,QAAAA,QAAQ,EAAErB,KAAK,CAPI,QAAA;AAQnBsB,QAAAA,MAAM,EAAEtB,KAAK,CARM,MAAA;AASnBuB,QAAAA,WAAW,EAAEvB,KAAK,CAACuB;AATA,OAArB;AAWAvB,MAAAA,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAyB,UAAA,SAAA,EAAa;AACpCwB,QAAAA,SAAS,CAATA,aAAAA,GAA0BxB,KAAK,CAALA,aAAAA,CAAoBwB,SAAS,CAAvDA,OAA0BxB,CAA1BwB;AACAtB,QAAAA,cAAc,CAAdA,SAAAA,CAAAA,SAAAA,EAAAA,YAAAA;AArDsB,OAmDxBF,EAnDwB,CAwDxB;;AACA,aAAOA,KAAK,CAAZ,aAAA;AACA,aAAOA,KAAK,CAAZ,aAAA;AACA,aAAOA,KAAK,CAAZ,UAAA;AACA,aAAOA,KAAK,CAAZ,aAAA;AACA,aAAOA,KAAK,CAAZ,YAAA;AACA,aAAOA,KAAK,CAAZ,SAAA;AACA,aAAOA,KAAK,CAAZ,MAAA;AACA,aAAOA,KAAK,CAAZ,UAAA;AACA,aAAOA,KAAK,CAAZ,QAAA;AACA,aAAOA,KAAK,CAAZ,WAAA;AACA,aAAOA,KAAK,CAAZ,WAAA;AACD;;;;+GAE4BH,M,EAAQG,K,EAAOyB,O,EAAS7B,O,EAAS8B,I;;;;;;AACtD3B,gBAAAA,K,GAAQ,IAAA,cAAA,CAAA,OAAA,CAARA;;uBACkBA,KAAK,CAALA,WAAAA,CAAAA,MAAAA,C;;;AAAlByB,gBAAAA,S,iBAAAA;AACNA,gBAAAA,SAAS,CAATA,OAAAA,GAAAA,OAAAA;AACAxB,gBAAAA,KAAK,CAALA,aAAAA,CAAAA,IAAAA,IAAAA,SAAAA;AACAA,gBAAAA,KAAK,CAALA,UAAAA,CAAAA,IAAAA,CAAAA,SAAAA;;;;;;;;;;;;;;;;;;;6GAGyBH,M,EAAQG,K,EAAO2B,I;;;;;;AAClC5B,gBAAAA,K,GAAQ,IAAA,aAAA,EAARA;;uBACiBA,KAAK,CAALA,WAAAA,CAAAA,MAAAA,C;;;AAAjBsB,gBAAAA,Q,iBAAAA;AACNrB,gBAAAA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,MAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,QAAAA;;;;;;;;;;;;;;;;;;;2GAGuBH,M,EAAQG,K,EAAO2B,I;;;;;;AAChC5B,gBAAAA,K,GAAQ,IAAA,UAAA,EAARA;;uBACcA,KAAK,CAALA,WAAAA,CAAAA,MAAAA,C;;;AAAd6B,gBAAAA,K,iBAAAA;AACN5B,gBAAAA,KAAK,CAALA,MAAAA,CAAAA,aAAAA,MAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,KAAAA;;;;;;;;;;;;;;;;;;;mHAG+BH,M,EAAQG,K,EAAOyB,O;;;;;;AACxC1B,gBAAAA,K,GAAQ,IAAA,kBAAA,EAARA;;uBACsBA,KAAK,CAALA,WAAAA,CAAAA,MAAAA,C;;;AAAtB8B,gBAAAA,a,iBAAAA;AACN7B,gBAAAA,KAAK,CAALA,aAAAA,CAAAA,OAAAA,IAAAA,aAAAA;;;;;;;;;;;;;;;;;;;2GAGuB8B,K,EAAO9B,K,EAAOL,Q;;;;;;AAC/BoC,gBAAAA,O,GAAUpC,QAAQ,CAARA,WAAAA,CAAAA,GAAAA,CAAVoC,C,CACN;;sBACIA,OAAO,IAAI,C;;;;;AACPC,gBAAAA,S,GAAYrC,QAAQ,CAARA,MAAAA,CAAgBoC,OAAO,GAAvBpC,CAAAA,CAAZqC;AACAL,gBAAAA,I,GAAOhC,QAAQ,CAARA,MAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAPgC;;uBACA,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACrC,sBAAMM,SAAS,GAAG,IAAlB,SAAkB,EAAlB;AACAA,kBAAAA,SAAS,CAATA,EAAAA,CAAAA,QAAAA,EAAuB,YAAM;AAC3BjC,oBAAAA,KAAK,CAALA,UAAAA,CAAAA,QAAAA,IAA6BA,KAAK,CAALA,KAAAA,CAA7BA,MAAAA;AACAA,oBAAAA,KAAK,CAALA,UAAAA,CAAAA,IAAAA,IAAyBA,KAAK,CAALA,KAAAA,CAAzBA,MAAAA;AACA,wBAAMkC,MAAM,GAAG;AACbC,sBAAAA,IAAI,EADS,OAAA;AAEbR,sBAAAA,IAAI,EAFS,IAAA;AAGbK,sBAAAA,SAAS,EAHI,SAAA;AAIbI,sBAAAA,MAAM,EAAEH,SAAS,CAATA,QAAAA;AAJK,qBAAf;AAMAjC,oBAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AACAP,oBAAAA,OAAO;AAVTwC,mBAAAA;AAYAH,kBAAAA,KAAK,CAALA,EAAAA,CAAAA,OAAAA,EAAkB,UAAA,KAAA,EAAS;AACzBtC,oBAAAA,MAAM,CAANA,KAAM,CAANA;AADFsC,mBAAAA;AAGAA,kBAAAA,KAAK,CAALA,IAAAA,CAAAA,SAAAA;AAjBI,iBAAA,C;;;;;;;;;;;;;;;;;;;6GAsBiBA,K,EAAO9B,K,EAAO2B,I;;;;;;AACjC5B,gBAAAA,K,GAAQ,IAAA,YAAA,EAARA;;uBACgBA,KAAK,CAALA,WAAAA,CAAAA,KAAAA,C;;;AAAhBU,gBAAAA,O,iBAAAA;AACNT,gBAAAA,KAAK,CAALA,QAAAA,CAAAA,IAAAA,IAAAA,OAAAA;;;;;;;;;;;;;;;;;;;iHAG6B8B,K,EAAO9B,K,EAAO2B,I;;;;;;AACrC5B,gBAAAA,K,GAAQ,IAAA,kBAAA,EAARA;;uBACsBA,KAAK,CAALA,WAAAA,CAAAA,KAAAA,C;;;AAAtB8B,gBAAAA,a,iBAAAA;AACN7B,gBAAAA,KAAK,CAALA,WAAAA,CAAAA,IAAAA,IAAAA,aAAAA;;;;;;;;;;;;;;;;;;;gHAG4B8B,K,EAAO9B,K,EAAO2B,I;;;;;;AACpC5B,gBAAAA,K,GAAQ,IAAA,aAAA,EAARA;;uBACmBA,KAAK,CAALA,WAAAA,CAAAA,KAAAA,C;;;AAAnBsC,gBAAAA,U,iBAAAA;AACNrC,gBAAAA,KAAK,CAALA,WAAAA,CAAAA,eAAAA,MAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,UAAAA;;;;;;;;;;;;;;;;;;;4GAGuB8B,K,EAAO9B,K,EAAO2B,I;;;;;;uBAC/B,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACrC;AACA,sBAAM9B,MAAM,GAAG,IAAf,SAAe,EAAf;AACAiC,kBAAAA,KAAK,CAALA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA;AACAjC,kBAAAA,MAAM,CAANA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA;AACAA,kBAAAA,MAAM,CAANA,EAAAA,CAAAA,QAAAA,EAAoB,YAAM;AACxBG,oBAAAA,KAAK,CAALA,MAAAA,CAAAA,IAAAA,IAAqBH,MAAM,CAANA,IAAAA,GAArBG,QAAqBH,EAArBG;AACAP,oBAAAA,OAAO;AAFTI,mBAAAA;AAIAiC,kBAAAA,KAAK,CAALA,IAAAA,CAAAA,MAAAA;AATI,iBAAA,C;;;;;;;;;;;;;;;;AAaR;;;;;;wCAGoB;AAClB,YAAM,IAAA,KAAA,CAAN,0NAAM,CAAN;AAGD;;;;8FAEUjC,M,EAAQD,O;;;;;;;AACjB;AACA;AACA,oBAAI,CAACC,MAAM,CAACyC,MAAM,CAAd,aAAO,CAAP,IAAiCzC,MAAM,CAA3C,IAAA,EAAkD;AAChDA,kBAAAA,MAAM,GAAGA,MAAM,CAANA,IAAAA,CAAY,IAArBA,WAAqB,EAAZA,CAATA;AACD;;AACK0C,gBAAAA,M,GAAS,EAATA;;;;2CACoB1C,M;;;;;;;;;;;;;;;;;;;;AAAT2C,gBAAAA,K,SAAAA;AACfD,gBAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAEK,KAAA,IAAA,CAAUE,MAAM,CAANA,MAAAA,CAAV,MAAUA,CAAV,EAAA,OAAA,C;;;;;;;;;;;;;;;;;;;8FAGEC,I,EAAM9C,O;;;;;;;AAEf,oBAAIA,OAAO,IAAIA,OAAO,CAAtB,MAAA,EAA+B;AAC7BwC,kBAAAA,MAAM,GAAGK,MAAM,CAANA,IAAAA,CAAYC,IAAI,CAAhBD,QAAYC,EAAZD,EAATL,QAASK,CAATL;AADF,iBAAA,MAEO;AACLA,kBAAAA,MAAM,GAANA,IAAAA;AACD;;AAEKpC,gBAAAA,K,GAAQ;AACZ2C,kBAAAA,UAAU,EADE,EAAA;AAEZC,kBAAAA,aAAa,EAFD,EAAA;AAGZC,kBAAAA,aAAa,EAHD,EAAA;AAIZC,kBAAAA,MAAM,EAJM,EAAA;AAKZxC,kBAAAA,KAAK,EALO,EAAA;AAMZC,kBAAAA,UAAU,EANE,EAAA;AAOZa,kBAAAA,QAAQ,EAPI,EAAA;AAQZ2B,kBAAAA,WAAW,EARC,EAAA;AASZ1B,kBAAAA,QAAQ,EATI,EAAA;AAUZC,kBAAAA,MAAM,EAVM,EAAA;AAWZC,kBAAAA,WAAW,EAAE;AAXD,iBAARvB;;uBAcY5B,KAAK,CAALA,SAAAA,CAAAA,MAAAA,C;;;AAAZ4E,gBAAAA,G,kBAAAA;yCACcxC,MAAM,CAANA,MAAAA,CAAcwC,GAAG,CAAjBxC,KAAAA,C;;;;;;;;AAATsB,gBAAAA,K,qBAAAA;;oBAEJA,KAAK,CAACmB,G;;;;;AACLC,gBAAAA,S,GAAYpB,KAAK,CAACH,IAAlBuB;;AACJ,oBAAIA,SAAS,CAATA,CAAS,CAATA,KAAJ,GAAA,EAA0B;AACxBA,kBAAAA,SAAS,GAAGA,SAAS,CAATA,MAAAA,CAAZA,CAAYA,CAAZA;AACD;;AACGrD,gBAAAA,M,SAAAA;;sBACAqD,SAAS,CAATA,KAAAA,CAAAA,aAAAA,KACF;AACAA,gBAAAA,SAAS,CAATA,KAAAA,CAAAA,iCAAAA,C;;;;;AACArD,gBAAAA,MAAM,GAAG,IAATA,WAAS,EAATA;gCACAA,M;;uBAAmBiC,KAAK,CAALA,KAAAA,CAAAA,YAAAA,C;;;;;8BAAZqB,K;;;;;;AAEP;AACAtD,gBAAAA,MAAM,GAAG,IAAA,WAAA,CAAgB;AACvBuD,kBAAAA,kBAAkB,EADK,IAAA;AAEvBC,kBAAAA,kBAAkB,EAAE;AAFG,iBAAhB,CAATxD;AAIIyD,gBAAAA,O,SAAAA,C,CACJ;;qBACIC,OAAO,CAACC,O;;;;;gCAEA9E,c;;uBAAqBoD,KAAK,CAALA,KAAAA,CAAAA,YAAAA,C;;;;AAA/BwB,gBAAAA,O,oCAAAA;;;;;;uBAGgBxB,KAAK,CAALA,KAAAA,CAAAA,QAAAA,C;;;AAAhBwB,gBAAAA,O,kBAAAA;;;AAEIG,gBAAAA,S,GAAY,KAAK,IAAjBA;;AACN,qBAASC,CAAT,GAAA,CAAA,EAAgBA,CAAC,GAAGJ,OAAO,CAA3B,MAAA,EAAoCI,CAAC,IAArC,SAAA,EAAoD;AAClD7D,kBAAAA,MAAM,CAANA,KAAAA,CAAayD,OAAO,CAAPA,SAAAA,CAAAA,CAAAA,EAAqBI,CAAC,GAAnC7D,SAAayD,CAAbzD;AACD;;;AAEHA,gBAAAA,MAAM,CAANA,GAAAA;gCACQqD,S;oDACD,a,0BAIA,iB,0BAUA,4B,0BAIA,sB,0BAKA,e,0BAKA,kB,0BAQA,mB;;;;;uBAnCsB,KAAA,SAAA,CAAA,MAAA,C;;;AAAzBlD,gBAAAA,KAAK,CAAC2D,UAAN3D,G,eAAAA;;;;;uBAIuB,KAAA,aAAA,CAAA,MAAA,C;;;AAAjBF,gBAAAA,Q,kBAAAA;AACNE,gBAAAA,KAAK,CAALA,MAAAA,GAAeF,QAAQ,CAAvBE,MAAAA;AACAA,gBAAAA,KAAK,CAALA,YAAAA,GAAqBF,QAAQ,CAA7BE,YAAAA;AACAA,gBAAAA,KAAK,CAALA,KAAAA,GAAcF,QAAQ,CAAtBE,KAAAA;AACAA,gBAAAA,KAAK,CAALA,UAAAA,GAAmBF,QAAQ,CAA3BE,UAAAA;AACAA,gBAAAA,KAAK,CAALA,cAAAA,GAAuBF,QAAQ,CAA/BE,cAAAA;;;;;uBAK2B,KAAA,SAAA,CAAA,MAAA,C;;;AAA3BA,gBAAAA,KAAK,CAAC4D,YAAN5D,G,eAAAA;;;;AAIAA,gBAAAA,KAAK,CAALA,aAAAA,GAAsB,IAAtBA,kBAAsB,EAAtBA;;uBACMA,KAAK,CAALA,aAAAA,CAAAA,WAAAA,CAAAA,MAAAA,C;;;;;;AAINA,gBAAAA,KAAK,CAALA,MAAAA,GAAe,IAAfA,WAAe,EAAfA;;uBACMA,KAAK,CAALA,MAAAA,CAAAA,WAAAA,CAAAA,MAAAA,C;;;;;;AAIA6D,gBAAAA,Q,GAAW,IAAA,QAAA,EAAXA;;uBACsBA,QAAQ,CAARA,WAAAA,CAAAA,MAAAA,C;;;AAAtBC,gBAAAA,a,kBAAAA;AACN9D,gBAAAA,KAAK,CAALA,OAAAA,GAAgB8D,aAAa,CAA7B9D,OAAAA;AACAA,gBAAAA,KAAK,CAALA,OAAAA,GAAgB8D,aAAa,CAA7B9D,OAAAA;;;;AAKM+D,gBAAAA,S,GAAY,IAAA,SAAA,EAAZA;;uBACuBA,SAAS,CAATA,WAAAA,CAAAA,MAAAA,C;;;AAAvBC,gBAAAA,c,kBAAAA;AACNxD,gBAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAAA,cAAAA;;;;AAKIyD,gBAAAA,K,GAAQf,SAAS,CAATA,KAAAA,CAAAA,kCAAAA,CAARe;;qBACAA,K;;;;;;uBACI,KAAA,sBAAA,CAAA,MAAA,EAAA,KAAA,EAA2CA,KAAK,CAAhD,CAAgD,CAAhD,EAAA,OAAA,EAAA,SAAA,C;;;;;;AAGRA,gBAAAA,KAAK,GAAGf,SAAS,CAATA,KAAAA,CAARe,8CAAQf,CAARe;;qBACIA,K;;;;;;uBACI,KAAA,0BAAA,CAAA,MAAA,EAAA,KAAA,EAA+CA,KAAK,CAApD,CAAoD,CAApD,C;;;;;;AAGRA,gBAAAA,KAAK,GAAGf,SAAS,CAATA,KAAAA,CAARe,iCAAQf,CAARe;;qBACIA,K;;;;;;uBACI,KAAA,kBAAA,CAAA,MAAA,EAAA,KAAA,EAAuCA,KAAK,CAA5C,CAA4C,CAA5C,C;;;;;;AAGRA,gBAAAA,KAAK,GAAGf,SAAS,CAATA,KAAAA,CAARe,+CAAQf,CAARe;;qBACIA,K;;;;;;uBACI,KAAA,kBAAA,CAAA,MAAA,EAAA,KAAA,EAAuCA,KAAK,CAA5C,CAA4C,CAA5C,C;;;;;;AAGRA,gBAAAA,KAAK,GAAGf,SAAS,CAATA,KAAAA,CAARe,oCAAQf,CAARe;;qBACIA,K;;;;;;uBACI,KAAA,oBAAA,CAAA,MAAA,EAAA,KAAA,EAAyCA,KAAK,CAA9C,CAA8C,CAA9C,C;;;;;;AAGRA,gBAAAA,KAAK,GAAGf,SAAS,CAATA,KAAAA,CAARe,yBAAQf,CAARe;;qBACIA,K;;;;;;uBACI,KAAA,oBAAA,CAAA,MAAA,EAAA,KAAA,EAAyCA,KAAK,CAA9C,CAA8C,CAA9C,C;;;;;;AAGRA,gBAAAA,KAAK,GAAGf,SAAS,CAATA,KAAAA,CAARe,8BAAQf,CAARe;;qBACIA,K;;;;;;uBACI,KAAA,kBAAA,CAAA,MAAA,EAAA,KAAA,EAAuCA,KAAK,CAA5C,CAA4C,CAA5C,C;;;;;;AAGRA,gBAAAA,KAAK,GAAGf,SAAS,CAATA,KAAAA,CAARe,kDAAQf,CAARe;;qBACIA,K;;;;;;uBACI,KAAA,wBAAA,CAAA,MAAA,EAAA,KAAA,EAA6CA,KAAK,CAAlD,CAAkD,CAAlD,C;;;;;;AAGRA,gBAAAA,KAAK,GAAGf,SAAS,CAATA,KAAAA,CAARe,qCAAQf,CAARe;;qBACIA,K;;;;;;uBACI,KAAA,uBAAA,CAAA,MAAA,EAAA,KAAA,EAA4CA,KAAK,CAAjD,CAAiD,CAAjD,C;;;;;;;;;;;AAQhB,qBAAA,SAAA,CAAA,KAAA,EAAA,OAAA,E,CAEA;;AACA,qBAAA,QAAA,CAAA,KAAA,GAAA,KAAA;mDACO,KAAKnE,Q;;;;;;;;;;;;;;;QAGd;AACA;;;;;kGAEekD,G,EAAKhD,K;;;;;;uBACZ,OAAO,CAAP,GAAA,CACJ,KAAK,CAAL,KAAA,CAAA,GAAA,EAAA,aAAA,YAAA;AAAA,sBAAA,IAAA,GAAA,iBAAA,EAAA,aAAA,oBAAA,IAAA,CAAgB,SAAA,SAAA,CAAA,MAAA,EAAA;AAAA,wBAAA,QAAA,EAAA,IAAA,EAAA,SAAA,EAAA,OAAA;AAAA,2BAAA,oBAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,6BAAA,CAAA,EAAA;AAAA,gCAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,+BAAA,CAAA;AAAA,gCAAA,EACVkC,MAAM,CAANA,IAAAA,KADU,OAAA,CAAA,EAAA;AAAA,8BAAA,UAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAENvC,4BAAAA,QAFM,GAAA,YAAA,MAAA,CAEiBuC,MAAM,CAFvB,IAAA,EAAA,GAAA,EAAA,MAAA,CAEgCA,MAAM,CAFtC,SAAA,CAENvC;;AAFM,gCAAA,CAGRuC,MAAM,CAHE,QAAA,EAAA;AAAA,8BAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,4BAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mCAISgC,eAAe,CAAChC,MAAM,CAJ/B,QAIwB,CAJxB;;AAAA,+BAAA,CAAA;AAIJQ,4BAAAA,IAJI,GAAA,UAAA,CAAA,IAIJA;AAJI,mCAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAKH,GAAG,CAAH,MAAA,CAAA,IAAA,EAAiB;AAACf,8BAAAA,IAAI,EAAEhC;AAAP,6BAAjB,CALG,CAAA;;AAAA,+BAAA,CAAA;AAAA,gCAAA,CAORuC,MAAM,CAPE,MAAA,EAAA;AAAA,8BAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,mCAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAQH,GAAG,CAAH,MAAA,CAAWA,MAAM,CAAjB,MAAA,EAA0B;AAACP,8BAAAA,IAAI,EAAEhC;AAAP,6BAA1B,CARG,CAAA;;AAAA,+BAAA,CAAA;AAAA,gCAAA,CAURuC,MAAM,CAVE,MAAA,EAAA;AAAA,8BAAA,UAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAWJiC,4BAAAA,SAXI,GAWQjC,MAAM,CAXd,MAWJiC;AACAb,4BAAAA,OAZI,GAYMa,SAAS,CAATA,SAAAA,CAAoBA,SAAS,CAATA,OAAAA,CAAAA,GAAAA,IAZ1B,CAYMA,CAAVb;AAZI,mCAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAaH,GAAG,CAAH,MAAA,CAAA,OAAA,EAAoB;AAAC3B,8BAAAA,IAAI,EAAL,QAAA;AAAiByC,8BAAAA,MAAM,EAAE;AAAzB,6BAApB,CAbG,CAAA;;AAAA,+BAAA,EAAA;AAAA,kCAgBR,IAAA,KAAA,CAhBQ,mBAgBR,CAhBQ;;AAAA,+BAAA,EAAA;AAAA,+BAAA,KAAA;AAAA,mCAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,qBAAA,EAAA,SAAA,CAAA;AAAhB,mBAAA,CAAA,CAAA;;AAAA,yBAAA,UAAA,IAAA,EAAA;AAAA,2BAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,mBAAA;AADI,iBACJ,EAAA,CADI,C;;;;;;;;;;;;;;;;;;gCAsBIpB,G,EAAKhD,K,EAAO;AACtB,UAAMG,YAAY,GAAG,IAArB,YAAqB,EAArB;AACA,UAAMkE,SAAS,GAAG,IAAlB,kBAAkB,EAAlB;AAEArE,MAAAA,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAyB,UAAA,SAAA,EAAa;AAAA,YAC7BS,OAD6B,GAClBe,SADkB,CAAA,OAAA;;AAEpC,YAAA,OAAA,EAAa;AACXrB,UAAAA,YAAY,CAAZA,OAAAA,CAAAA,OAAAA,EAAAA,EAAAA;AACA,cAAImE,GAAG,GAAGnE,YAAY,CAAZA,KAAAA,CAAV,OAAUA,CAAV;AACA6C,UAAAA,GAAG,CAAHA,MAAAA,CAAAA,GAAAA,EAAgB;AAACrB,YAAAA,IAAI,EAAA,eAAA,MAAA,CAAiBlB,OAAO,CAAxB,IAAA,EAAA,MAAA;AAAL,WAAhBuC;AAEAsB,UAAAA,GAAG,GAAGD,SAAS,CAATA,KAAAA,CAAgB5D,OAAO,CAA7B6D,IAAMD,CAANC;AACAtB,UAAAA,GAAG,CAAHA,MAAAA,CAAAA,GAAAA,EAAgB;AAACrB,YAAAA,IAAI,EAAA,qBAAA,MAAA,CAAuBlB,OAAO,CAA9B,IAAA,EAAA,WAAA;AAAL,WAAhBuC;AACD;AATHhD,OAAAA;AAWD;;;8BAESgD,G,EAAKhD,K,EAAO;AACpB,UAAMI,UAAU,GAAG,IAAnB,UAAmB,EAAnB;AAEAJ,MAAAA,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAyB,UAAA,SAAA,EAAa;AAAA,YAC7BsB,MAD6B,GACnBE,SADmB,CAAA,MAAA;AAEpCF,QAAAA,MAAM,CAANA,OAAAA,CAAe,UAAA,KAAA,EAAS;AACtBlB,UAAAA,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,EAAAA,EAAAA;AACA,cAAMmE,QAAQ,GAAGnE,UAAU,CAAVA,KAAAA,CAAjB,KAAiBA,CAAjB;AACA4C,UAAAA,GAAG,CAAHA,MAAAA,CAAAA,QAAAA,EAAqB;AAACrB,YAAAA,IAAI,EAAA,aAAA,MAAA,CAAeC,KAAK,CAApB,MAAA;AAAL,WAArBoB;AAHF1B,SAAAA;AAFFtB,OAAAA;AAQD;;;;yGAEqBgD,G,EAAKhD,K;;;;;;AACnBD,gBAAAA,K,GAAQ,IAAA,iBAAA,EAARA;AACAuE,gBAAAA,G,GAAMvE,KAAK,CAALA,KAAAA,CAAAA,KAAAA,CAANuE;AACNtB,gBAAAA,GAAG,CAAHA,MAAAA,CAAAA,GAAAA,EAAgB;AAACrB,kBAAAA,IAAI,EAAE;AAAP,iBAAhBqB;;;;;;;;;;;;;;;;;;;gGAGWA,G,EAAKhD,K;;;;;;AACVD,gBAAAA,K,GAAQ,IAAA,QAAA,EAARA;AACAuE,gBAAAA,G,GAAMvE,KAAK,CAALA,KAAAA,CAAAA,KAAAA,CAANuE;AACNtB,gBAAAA,GAAG,CAAHA,MAAAA,CAAAA,GAAAA,EAAgB;AAACrB,kBAAAA,IAAI,EAAE;AAAP,iBAAhBqB;;;;;;;;;;;;;;;;;;;iGAGYA,G,EAAKhD,K;;;;;;AACX+D,gBAAAA,S,GAAY,IAAA,SAAA,EAAZA;AACNf,gBAAAA,GAAG,CAAHA,MAAAA,CAAWe,SAAS,CAATA,KAAAA,CAAXf,KAAWe,CAAXf,EAAmC;AAACrB,kBAAAA,IAAI,EAAE;AAAP,iBAAnCqB;;;;;;;;;;;;;;;;;;;mGAGcA,G,EAAKhD,K;;;;;;AACb8C,gBAAAA,M,GAAS9C,KAAK,CAALA,MAAAA,IAAgB;AAACwE,kBAAAA,MAAM,EAAEjF;AAAT,iBAAzBuD;AACNtC,gBAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,IAAA,EAAQ;AAClC,sBAAM8D,GAAG,GAAGxB,MAAM,CAAlB,IAAkB,CAAlB;AACA,sBAAMpB,IAAI,GAAA,YAAA,MAAA,CAAA,IAAA,EAAV,MAAU,CAAV;AACAsB,kBAAAA,GAAG,CAAHA,MAAAA,CAAAA,GAAAA,EAAgB;AAACrB,oBAAAA,IAAI,EAAED;AAAP,mBAAhBsB;AAHFxC,iBAAAA;;;;;;;;;;;;;;;;;;;uGAOkBwC,G;;;;;;AACZjD,gBAAAA,K,GAAQ,IAAA,kBAAA,EAARA;AACAuE,gBAAAA,G,GAAM,KAAK,CAAL,KAAA,CAAY,CACtB;AAACG,kBAAAA,EAAE,EAAH,MAAA;AAAaC,kBAAAA,IAAI,EAAEhF,IAAI,CAAJA,OAAAA,CAAnB,cAAA;AAAgDiF,kBAAAA,MAAM,EAAE;AAAxD,iBADsB,EAEtB;AAACF,kBAAAA,EAAE,EAAH,MAAA;AAAaC,kBAAAA,IAAI,EAAEhF,IAAI,CAAJA,OAAAA,CAAnB,cAAA;AAAgDiF,kBAAAA,MAAM,EAAE;AAAxD,iBAFsB,EAGtB;AAACF,kBAAAA,EAAE,EAAH,MAAA;AAAaC,kBAAAA,IAAI,EAAEhF,IAAI,CAAJA,OAAAA,CAAnB,kBAAA;AAAoDiF,kBAAAA,MAAM,EAAE;AAA5D,iBAHsB,CAAZ,CAANL;AAKNtB,gBAAAA,GAAG,CAAHA,MAAAA,CAAAA,GAAAA,EAAgB;AAACrB,kBAAAA,IAAI,EAAE;AAAP,iBAAhBqB;;;;;;;;;;;;;;;;;;;yGAGoBA,G,EAAKhD,K;;;;;;AACrB4E,gBAAAA,K,GAAQ,CAARA;AACE/C,gBAAAA,a,GAAgB,CACpB;AAAC4C,kBAAAA,EAAE,EAAA,MAAA,MAAA,CAAQG,KAAX,EAAG,CAAH;AAAsBF,kBAAAA,IAAI,EAAEhF,IAAI,CAAJA,OAAAA,CAA5B,MAAA;AAAiDiF,kBAAAA,MAAM,EAAE;AAAzD,iBADoB,EAEpB;AAACF,kBAAAA,EAAE,EAAA,MAAA,MAAA,CAAQG,KAAX,EAAG,CAAH;AAAsBF,kBAAAA,IAAI,EAAEhF,IAAI,CAAJA,OAAAA,CAA5B,KAAA;AAAgDiF,kBAAAA,MAAM,EAAE;AAAxD,iBAFoB,CAAhB9C;;AAIN,oBAAI7B,KAAK,CAALA,aAAAA,CAAJ,KAAA,EAA+B;AAC7B6B,kBAAAA,aAAa,CAAbA,IAAAA,CAAmB;AACjB4C,oBAAAA,EAAE,EAAA,MAAA,MAAA,CAAQG,KADO,EACf,CADe;AAEjBF,oBAAAA,IAAI,EAAEhF,IAAI,CAAJA,OAAAA,CAFW,aAAA;AAGjBiF,oBAAAA,MAAM,EAAE;AAHS,mBAAnB9C;AAKD;;AACD7B,gBAAAA,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAyB,UAAA,SAAA,EAAa;AACpCwB,kBAAAA,SAAS,CAATA,GAAAA,GAAAA,MAAAA,MAAAA,CAAsBoD,KAAtBpD,EAAAA,CAAAA;AACAK,kBAAAA,aAAa,CAAbA,IAAAA,CAAmB;AACjB4C,oBAAAA,EAAE,EAAEjD,SAAS,CADI,GAAA;AAEjBkD,oBAAAA,IAAI,EAAEhF,IAAI,CAAJA,OAAAA,CAFW,SAAA;AAGjBiF,oBAAAA,MAAM,EAAA,mBAAA,MAAA,CAAqBnD,SAAS,CAA9B,EAAA,EAAA,MAAA;AAHW,mBAAnBK;AAFF7B,iBAAAA;AAQMD,gBAAAA,K,GAAQ,IAAA,kBAAA,EAARA;AACAuE,gBAAAA,G,GAAMvE,KAAK,CAALA,KAAAA,CAAAA,aAAAA,CAANuE;AACNtB,gBAAAA,GAAG,CAAHA,MAAAA,CAAAA,GAAAA,EAAgB;AAACrB,kBAAAA,IAAI,EAAE;AAAP,iBAAhBqB;;;;;;;;;;;;;;;;;;;0GAGqBA,G,EAAKhD,K;;;;;AAC1B,oBAAIA,KAAK,CAALA,aAAAA,IAAuBA,KAAK,CAALA,aAAAA,CAA3B,KAAA,EAAsD;AACpDgD,kBAAAA,GAAG,CAAHA,MAAAA,CAAWhD,KAAK,CAALA,aAAAA,CAAXgD,GAAAA,EAAoC;AAACrB,oBAAAA,IAAI,EAAE;AAAP,mBAApCqB;AACD;;;;;;;;;;;;;;;;;;;mGAGaA,G,EAAKhD,K;;;;;;AACZsE,gBAAAA,G,GAAOtE,KAAK,CAACgB,MAANhB,CAAPsE,GAAAA;;AACP,oBAAA,GAAA,EAAS;AACPtB,kBAAAA,GAAG,CAAHA,MAAAA,CAAAA,GAAAA,EAAgB;AAACrB,oBAAAA,IAAI,EAAE;AAAP,mBAAhBqB;AACD;;;;;;;;;;;;;;;;;;;qGAGeA,G,EAAKhD,K;;;;;;AACfD,gBAAAA,K,GAAQ,IAAA,aAAA,EAARA;AACNiD,gBAAAA,GAAG,CAAHA,MAAAA,CAAWjD,KAAK,CAALA,KAAAA,CAAXiD,KAAWjD,CAAXiD,EAA+B;AAACrB,kBAAAA,IAAI,EAAE;AAAP,iBAA/BqB;;;;;;;;;;;;;;;;;;;uGAGkBA,G,EAAKhD,K;;;;;;AACvB;AACME,gBAAAA,c,GAAiB,IAAA,cAAA,EAAjBA;AACA2E,gBAAAA,kB,GAAqB,IAAA,kBAAA,EAArBA;AACAC,gBAAAA,a,GAAgB,IAAA,aAAA,EAAhBA;AACAC,gBAAAA,a,GAAgB,IAAA,aAAA,EAAhBA,C,CAEN;;AACA/E,gBAAAA,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAyB,UAAA,SAAA,EAAa;AACpC,sBAAIgF,SAAS,GAAG,IAAhB,SAAgB,EAAhB;AACA9E,kBAAAA,cAAc,CAAdA,MAAAA,CAAAA,SAAAA,EAAAA,SAAAA;AACA8C,kBAAAA,GAAG,CAAHA,MAAAA,CAAWgC,SAAS,CAApBhC,GAAAA,EAA0B;AAACrB,oBAAAA,IAAI,EAAA,sBAAA,MAAA,CAAwBH,SAAS,CAAjC,EAAA,EAAA,MAAA;AAAL,mBAA1BwB;;AAEA,sBAAIxB,SAAS,CAATA,IAAAA,IAAkBA,SAAS,CAATA,IAAAA,CAAtB,MAAA,EAA6C;AAC3CwD,oBAAAA,SAAS,GAAG,IAAZA,SAAY,EAAZA;AACAH,oBAAAA,kBAAkB,CAAlBA,MAAAA,CAAAA,SAAAA,EAAqCrD,SAAS,CAA9CqD,IAAAA;AACA7B,oBAAAA,GAAG,CAAHA,MAAAA,CAAWgC,SAAS,CAApBhC,GAAAA,EAA0B;AAACrB,sBAAAA,IAAI,EAAA,4BAAA,MAAA,CAA8BH,SAAS,CAAvC,EAAA,EAAA,WAAA;AAAL,qBAA1BwB;AACD;;AAED,sBAAIxB,SAAS,CAATA,QAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAmC;AACjCwD,oBAAAA,SAAS,GAAG,IAAZA,SAAY,EAAZA;AACAF,oBAAAA,aAAa,CAAbA,MAAAA,CAAAA,SAAAA,EAAAA,SAAAA;AACA9B,oBAAAA,GAAG,CAAHA,MAAAA,CAAWgC,SAAS,CAApBhC,GAAAA,EAA0B;AAACrB,sBAAAA,IAAI,EAAA,cAAA,MAAA,CAAgBH,SAAS,CAAzB,EAAA,EAAA,MAAA;AAAL,qBAA1BwB;AAEAgC,oBAAAA,SAAS,GAAG,IAAZA,SAAY,EAAZA;AACAD,oBAAAA,aAAa,CAAbA,MAAAA,CAAAA,SAAAA,EAAAA,SAAAA;AACA/B,oBAAAA,GAAG,CAAHA,MAAAA,CAAWgC,SAAS,CAApBhC,GAAAA,EAA0B;AAACrB,sBAAAA,IAAI,EAAA,yBAAA,MAAA,CAA2BH,SAAS,CAApC,EAAA,EAAA,MAAA;AAAL,qBAA1BwB;AACD;AAnBHhD,iBAAAA;;;;;;;;;;;;;;;;;;8BAuBQgD,G,EAAK;AAAA,UAAA,KAAA,GAAA,IAAA;;AACb,aAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtCA,QAAAA,GAAG,CAAHA,EAAAA,CAAAA,QAAAA,EAAiB,YAAM;AACrBvD,UAAAA,OAAO,CAAPA,KAAO,CAAPA;AADFuD,SAAAA;AAGAA,QAAAA,GAAG,CAAHA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA;AACAA,QAAAA,GAAG,CAAHA,QAAAA;AALF,OAAO,CAAP;AAOD;;;iCAEYhD,K,EAAOJ,O,EAAS;AAC3B;AACAI,MAAAA,KAAK,CAALA,OAAAA,GAAgBA,KAAK,CAALA,OAAAA,IAAhBA,SAAAA;AACAA,MAAAA,KAAK,CAALA,cAAAA,GAAuBA,KAAK,CAALA,cAAAA,IAAvBA,SAAAA;AACAA,MAAAA,KAAK,CAALA,OAAAA,GAAgBA,KAAK,CAALA,OAAAA,IAAiB,IAAjCA,IAAiC,EAAjCA;AACAA,MAAAA,KAAK,CAALA,QAAAA,GAAiBA,KAAK,CAALA,QAAAA,IAAkB,IAAnCA,IAAmC,EAAnCA;AAEAA,MAAAA,KAAK,CAALA,gBAAAA,GACEJ,OAAO,CAAPA,gBAAAA,KAAAA,SAAAA,GAAyCA,OAAO,CAAhDA,gBAAAA,GADFI,IAAAA;AAEAA,MAAAA,KAAK,CAALA,SAAAA,GAAkBJ,OAAO,CAAPA,SAAAA,KAAAA,SAAAA,GAAkCA,OAAO,CAAzCA,SAAAA,GATS,IAS3BI,CAT2B,CAW3B;;AACAA,MAAAA,KAAK,CAALA,aAAAA,GAAsB,IAZK,kBAYL,EAAtBA,CAZ2B,CAc3B;;AACAA,MAAAA,KAAK,CAALA,MAAAA,GAAeA,KAAK,CAALA,SAAAA,GAAkB,IAAA,WAAA,CAAlBA,IAAkB,CAAlBA,GAA0C,IAAIrB,WAAW,CAf7C,IAe8B,EAAzDqB,CAf2B,CAiB3B;;AACA,UAAMC,aAAa,GAAG,IAAtB,aAAsB,EAAtB;AACA,UAAMC,cAAc,GAAG,IAAvB,cAAuB,EAAvB;AAEAD,MAAAA,aAAa,CAAbA,OAAAA,CAAAA,KAAAA;AAEA,UAAMgF,gBAAgB,GAAG;AACvB/D,QAAAA,aAAa,EAAElB,KAAK,CADG,aAAA;AAEvBgB,QAAAA,MAAM,EAAEhB,KAAK,CAFU,MAAA;AAGvBmB,QAAAA,QAAQ,EAAEnB,KAAK,CAALA,UAAAA,CAHa,QAAA;AAIvBkF,QAAAA,aAAa,EAJU,CAAA;AAKvB5E,QAAAA,KAAK,EAAEN,KAAK,CAACM;AALU,OAAzB;AAOA2E,MAAAA,gBAAgB,CAAhBA,QAAAA,GAA4BjF,KAAK,CAALA,QAAAA,GAA5BiF,EAAAA;AACAA,MAAAA,gBAAgB,CAAhBA,WAAAA,GAA+BjF,KAAK,CAALA,WAAAA,GAA/BiF,EAAAA;AACA,UAAIE,UAAU,GAAd,CAAA;AACAnF,MAAAA,KAAK,CAALA,MAAAA,GAAAA,EAAAA;AACAA,MAAAA,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAyB,UAAA,SAAA,EAAa;AACpC;AACAwB,QAAAA,SAAS,CAATA,MAAAA,CAAAA,OAAAA,CAAyB,UAAA,KAAA,EAAS;AAChC2D,UAAAA,UAAU;AACVvD,UAAAA,KAAK,CAALA,MAAAA,GAAAA,QAAAA,MAAAA,CAAAA,UAAAA,EAAAA,MAAAA,CAAAA;AACAA,UAAAA,KAAK,CAALA,EAAAA,GAAAA,UAAAA;AACA5B,UAAAA,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAAA,KAAAA;AAJFwB,SAAAA;AAOAtB,QAAAA,cAAc,CAAdA,OAAAA,CAAAA,SAAAA,EAAAA,gBAAAA;AA3CyB,OAkC3BF,EAlC2B,CA8C3B;AACD;;;;+FAEWH,M,EAAQD,O;;;;;;AAClBA,gBAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;AACOI,gBAAAA,K,GAAS,KAAKF,QAAL,CAATE,KAAAA;AACDgD,gBAAAA,G,GAAM,IAAI1E,SAAS,CAAb,SAAA,CAAwBsB,OAAO,CAA/B,GAAA,CAANoD;AACNA,gBAAAA,GAAG,CAAHA,IAAAA,CAAAA,MAAAA;AAEA,qBAAA,YAAA,CAAA,KAAA,EAAA,OAAA,E,CAEA;;;uBACM,KAAA,eAAA,CAAA,GAAA,EAAA,KAAA,C;;;;uBACA,KAAA,aAAA,CAAA,GAAA,EAAA,KAAA,C;;;;uBACA,KAAA,eAAA,CAAA,GAAA,EAAA,KAAA,C;;;;uBACA,KAAA,aAAA,CAAA,GAAA,EAAA,KAAA,C;;;;uBACA,KAAA,gBAAA,CAAA,GAAA,EAAA,KAAA,C;;;;uBACA,KAAA,WAAA,CAAA,GAAA,EAAA,KAAA,C;;;;uBACA,KAAA,SAAA,CAAA,GAAA,EAAA,KAAA,C;;;;uBACAoC,OAAO,CAAPA,GAAAA,CAAY,CAAC,KAAA,SAAA,CAAA,GAAA,EAAD,KAAC,CAAD,EAA6B,KAAA,SAAA,CAAA,GAAA,EAAzCA,KAAyC,CAA7B,CAAZA,C;;;;uBACA,KAAA,QAAA,CAAA,GAAA,EAAA,KAAA,C;;;;uBACAA,OAAO,CAAPA,GAAAA,CAAY,CAAC,KAAA,MAAA,CAAA,GAAA,EAAD,KAAC,CAAD,EAA0B,KAAA,OAAA,CAAA,GAAA,EAAtCA,KAAsC,CAA1B,CAAZA,C;;;;uBACA,KAAA,WAAA,CAAA,GAAA,EAAA,KAAA,C;;;mDACC,KAAA,SAAA,CAAA,GAAA,C;;;;;;;;;;;;;;;;;;8BAGCzF,Q,EAAUC,O,EAAS;AAAA,UAAA,MAAA,GAAA,IAAA;;AAC3B,UAAMC,MAAM,GAAG3B,EAAE,CAAFA,iBAAAA,CAAf,QAAeA,CAAf;AAEA,aAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC2B,QAAAA,MAAM,CAANA,EAAAA,CAAAA,QAAAA,EAAoB,YAAM;AACxBJ,UAAAA,OAAO;AADTI,SAAAA;AAGAA,QAAAA,MAAM,CAANA,EAAAA,CAAAA,OAAAA,EAAmB,UAAA,KAAA,EAAS;AAC1BL,UAAAA,MAAM,CAANA,KAAM,CAANA;AADFK,SAAAA;;AAIA,QAAA,MAAI,CAAJ,KAAA,CAAA,MAAA,EAAA,OAAA,EAAA,IAAA,CAAiC,YAAM;AACrCA,UAAAA,MAAM,CAANA,GAAAA;AADF,SAAA;AARF,OAAO,CAAP;AAYD;;;;qGAEiBD,O;;;;;;AACVC,gBAAAA,M,GAAS,IAAA,SAAA,EAATA;;uBACA,KAAA,KAAA,CAAA,MAAA,EAAA,OAAA,C;;;mDACCA,MAAM,CAANA,IAAAA,E;;;;;;;;;;;;;;;;;;;;;AAIXH,IAAI,CAAJA,OAAAA,GAAevB,OAAO,CAAtBuB,YAAsB,CAAtBA;AAEA2F,MAAM,CAANA,OAAAA,GAAAA,IAAAA","sourcesContent":["const fs = require('fs');\r\nconst JSZip = require('jszip');\r\nconst {PassThrough} = require('readable-stream');\r\nconst ZipStream = require('../utils/zip-stream');\r\nconst StreamBuf = require('../utils/stream-buf');\r\n\r\nconst utils = require('../utils/utils');\r\nconst XmlStream = require('../utils/xml-stream');\r\nconst {bufferToString} = require('../utils/browser-buffer-decode');\r\n\r\nconst StylesXform = require('./xform/style/styles-xform');\r\n\r\nconst CoreXform = require('./xform/core/core-xform');\r\nconst SharedStringsXform = require('./xform/strings/shared-strings-xform');\r\nconst RelationshipsXform = require('./xform/core/relationships-xform');\r\nconst ContentTypesXform = require('./xform/core/content-types-xform');\r\nconst AppXform = require('./xform/core/app-xform');\r\nconst WorkbookXform = require('./xform/book/workbook-xform');\r\nconst WorksheetXform = require('./xform/sheet/worksheet-xform');\r\nconst DrawingXform = require('./xform/drawing/drawing-xform');\r\nconst TableXform = require('./xform/table/table-xform');\r\nconst CommentsXform = require('./xform/comment/comments-xform');\r\nconst VmlNotesXform = require('./xform/comment/vml-notes-xform');\r\n\r\nconst theme1Xml = require('./xml/theme1.js');\r\n\r\nfunction fsReadFileAsync(filename, options) {\r\n  return new Promise((resolve, reject) => {\r\n    fs.readFile(filename, options, (error, data) => {\r\n      if (error) {\r\n        reject(error);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nclass XLSX {\r\n  constructor(workbook) {\r\n    this.workbook = workbook;\r\n  }\r\n\r\n  // ===============================================================================\r\n  // Workbook\r\n  // =========================================================================\r\n  // Read\r\n\r\n  async readFile(filename, options) {\r\n    if (!(await utils.fs.exists(filename))) {\r\n      throw new Error(`File not found: ${filename}`);\r\n    }\r\n    const stream = fs.createReadStream(filename);\r\n    try {\r\n      const workbook = await this.read(stream, options);\r\n      stream.close();\r\n      return workbook;\r\n    } catch (error) {\r\n      stream.close();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  parseRels(stream) {\r\n    const xform = new RelationshipsXform();\r\n    return xform.parseStream(stream);\r\n  }\r\n\r\n  parseWorkbook(stream) {\r\n    const xform = new WorkbookXform();\r\n    return xform.parseStream(stream);\r\n  }\r\n\r\n  parseSharedStrings(stream) {\r\n    const xform = new SharedStringsXform();\r\n    return xform.parseStream(stream);\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    const workbookXform = new WorkbookXform();\r\n    const worksheetXform = new WorksheetXform(options);\r\n    const drawingXform = new DrawingXform();\r\n    const tableXform = new TableXform();\r\n\r\n    workbookXform.reconcile(model);\r\n\r\n    // reconcile drawings with their rels\r\n    const drawingOptions = {\r\n      media: model.media,\r\n      mediaIndex: model.mediaIndex,\r\n    };\r\n    Object.keys(model.drawings).forEach(name => {\r\n      const drawing = model.drawings[name];\r\n      const drawingRel = model.drawingRels[name];\r\n      if (drawingRel) {\r\n        drawingOptions.rels = drawingRel.reduce((o, rel) => {\r\n          o[rel.Id] = rel;\r\n          return o;\r\n        }, {});\r\n        (drawing.anchors || []).forEach(anchor => {\r\n          const hyperlinks = anchor.picture && anchor.picture.hyperlinks;\r\n          if (hyperlinks && drawingOptions.rels[hyperlinks.rId]) {\r\n            hyperlinks.hyperlink = drawingOptions.rels[hyperlinks.rId].Target;\r\n            delete hyperlinks.rId;\r\n          }\r\n        });\r\n        drawingXform.reconcile(drawing, drawingOptions);\r\n      }\r\n    });\r\n\r\n    // reconcile tables with the default styles\r\n    const tableOptions = {\r\n      styles: model.styles,\r\n    };\r\n    Object.values(model.tables).forEach(table => {\r\n      tableXform.reconcile(table, tableOptions);\r\n    });\r\n\r\n    const sheetOptions = {\r\n      styles: model.styles,\r\n      sharedStrings: model.sharedStrings,\r\n      media: model.media,\r\n      mediaIndex: model.mediaIndex,\r\n      date1904: model.properties && model.properties.date1904,\r\n      drawings: model.drawings,\r\n      comments: model.comments,\r\n      tables: model.tables,\r\n      vmlDrawings: model.vmlDrawings,\r\n    };\r\n    model.worksheets.forEach(worksheet => {\r\n      worksheet.relationships = model.worksheetRels[worksheet.sheetNo];\r\n      worksheetXform.reconcile(worksheet, sheetOptions);\r\n    });\r\n\r\n    // delete unnecessary parts\r\n    delete model.worksheetHash;\r\n    delete model.worksheetRels;\r\n    delete model.globalRels;\r\n    delete model.sharedStrings;\r\n    delete model.workbookRels;\r\n    delete model.sheetDefs;\r\n    delete model.styles;\r\n    delete model.mediaIndex;\r\n    delete model.drawings;\r\n    delete model.drawingRels;\r\n    delete model.vmlDrawings;\r\n  }\r\n\r\n  async _processWorksheetEntry(stream, model, sheetNo, options, path) {\r\n    const xform = new WorksheetXform(options);\r\n    const worksheet = await xform.parseStream(stream);\r\n    worksheet.sheetNo = sheetNo;\r\n    model.worksheetHash[path] = worksheet;\r\n    model.worksheets.push(worksheet);\r\n  }\r\n\r\n  async _processCommentEntry(stream, model, name) {\r\n    const xform = new CommentsXform();\r\n    const comments = await xform.parseStream(stream);\r\n    model.comments[`../${name}.xml`] = comments;\r\n  }\r\n\r\n  async _processTableEntry(stream, model, name) {\r\n    const xform = new TableXform();\r\n    const table = await xform.parseStream(stream);\r\n    model.tables[`../tables/${name}.xml`] = table;\r\n  }\r\n\r\n  async _processWorksheetRelsEntry(stream, model, sheetNo) {\r\n    const xform = new RelationshipsXform();\r\n    const relationships = await xform.parseStream(stream);\r\n    model.worksheetRels[sheetNo] = relationships;\r\n  }\r\n\r\n  async _processMediaEntry(entry, model, filename) {\r\n    const lastDot = filename.lastIndexOf('.');\r\n    // if we can't determine extension, ignore it\r\n    if (lastDot >= 1) {\r\n      const extension = filename.substr(lastDot + 1);\r\n      const name = filename.substr(0, lastDot);\r\n      await new Promise((resolve, reject) => {\r\n        const streamBuf = new StreamBuf();\r\n        streamBuf.on('finish', () => {\r\n          model.mediaIndex[filename] = model.media.length;\r\n          model.mediaIndex[name] = model.media.length;\r\n          const medium = {\r\n            type: 'image',\r\n            name,\r\n            extension,\r\n            buffer: streamBuf.toBuffer(),\r\n          };\r\n          model.media.push(medium);\r\n          resolve();\r\n        });\r\n        entry.on('error', error => {\r\n          reject(error);\r\n        });\r\n        entry.pipe(streamBuf);\r\n      });\r\n    }\r\n  }\r\n\r\n  async _processDrawingEntry(entry, model, name) {\r\n    const xform = new DrawingXform();\r\n    const drawing = await xform.parseStream(entry);\r\n    model.drawings[name] = drawing;\r\n  }\r\n\r\n  async _processDrawingRelsEntry(entry, model, name) {\r\n    const xform = new RelationshipsXform();\r\n    const relationships = await xform.parseStream(entry);\r\n    model.drawingRels[name] = relationships;\r\n  }\r\n\r\n  async _processVmlDrawingEntry(entry, model, name) {\r\n    const xform = new VmlNotesXform();\r\n    const vmlDrawing = await xform.parseStream(entry);\r\n    model.vmlDrawings[`../drawings/${name}.vml`] = vmlDrawing;\r\n  }\r\n\r\n  async _processThemeEntry(entry, model, name) {\r\n    await new Promise((resolve, reject) => {\r\n      // TODO: stream entry into buffer and store the xml in the model.themes[]\r\n      const stream = new StreamBuf();\r\n      entry.on('error', reject);\r\n      stream.on('error', reject);\r\n      stream.on('finish', () => {\r\n        model.themes[name] = stream.read().toString();\r\n        resolve();\r\n      });\r\n      entry.pipe(stream);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @deprecated since version 4.0. You should use `#read` instead. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md\r\n   */\r\n  createInputStream() {\r\n    throw new Error(\r\n      '`XLSX#createInputStream` is deprecated. You should use `XLSX#read` instead. This method will be removed in version 5.0. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md'\r\n    );\r\n  }\r\n\r\n  async read(stream, options) {\r\n    // TODO: Remove once node v8 is deprecated\r\n    // Detect and upgrade old streams\r\n    if (!stream[Symbol.asyncIterator] && stream.pipe) {\r\n      stream = stream.pipe(new PassThrough());\r\n    }\r\n    const chunks = [];\r\n    for await (const chunk of stream) {\r\n      chunks.push(chunk);\r\n    }\r\n    return this.load(Buffer.concat(chunks), options);\r\n  }\r\n\r\n  async load(data, options) {\r\n    let buffer;\r\n    if (options && options.base64) {\r\n      buffer = Buffer.from(data.toString(), 'base64');\r\n    } else {\r\n      buffer = data;\r\n    }\r\n\r\n    const model = {\r\n      worksheets: [],\r\n      worksheetHash: {},\r\n      worksheetRels: [],\r\n      themes: {},\r\n      media: [],\r\n      mediaIndex: {},\r\n      drawings: {},\r\n      drawingRels: {},\r\n      comments: {},\r\n      tables: {},\r\n      vmlDrawings: {},\r\n    };\r\n\r\n    const zip = await JSZip.loadAsync(buffer);\r\n    for (const entry of Object.values(zip.files)) {\r\n      /* eslint-disable no-await-in-loop */\r\n      if (!entry.dir) {\r\n        let entryName = entry.name;\r\n        if (entryName[0] === '/') {\r\n          entryName = entryName.substr(1);\r\n        }\r\n        let stream;\r\n        if (entryName.match(/xl\\/media\\//) ||\r\n          // themes are not parsed as stream\r\n          entryName.match(/xl\\/theme\\/([a-zA-Z0-9]+)[.]xml/)) {\r\n          stream = new PassThrough();\r\n          stream.write(await entry.async('nodebuffer'));\r\n        } else {\r\n          // use object mode to avoid buffer-string convention\r\n          stream = new PassThrough({\r\n            writableObjectMode: true,\r\n            readableObjectMode: true,\r\n          });\r\n          let content;\r\n          // https://www.npmjs.com/package/process\r\n          if (process.browser) {\r\n            // running in browser, use TextDecoder if possible\r\n            content = bufferToString(await entry.async('nodebuffer'));\r\n          } else {\r\n            // running in node.js\r\n            content = await entry.async('string');\r\n          }\r\n          const chunkSize = 16 * 1024;\r\n          for (let i = 0; i < content.length; i += chunkSize) {\r\n            stream.write(content.substring(i, i + chunkSize));\r\n          }\r\n        }\r\n        stream.end();\r\n        switch (entryName) {\r\n          case '_rels/.rels':\r\n            model.globalRels = await this.parseRels(stream);\r\n            break;\r\n\r\n          case 'xl/workbook.xml': {\r\n            const workbook = await this.parseWorkbook(stream);\r\n            model.sheets = workbook.sheets;\r\n            model.definedNames = workbook.definedNames;\r\n            model.views = workbook.views;\r\n            model.properties = workbook.properties;\r\n            model.calcProperties = workbook.calcProperties;\r\n            break;\r\n          }\r\n\r\n          case 'xl/_rels/workbook.xml.rels':\r\n            model.workbookRels = await this.parseRels(stream);\r\n            break;\r\n\r\n          case 'xl/sharedStrings.xml':\r\n            model.sharedStrings = new SharedStringsXform();\r\n            await model.sharedStrings.parseStream(stream);\r\n            break;\r\n\r\n          case 'xl/styles.xml':\r\n            model.styles = new StylesXform();\r\n            await model.styles.parseStream(stream);\r\n            break;\r\n\r\n          case 'docProps/app.xml': {\r\n            const appXform = new AppXform();\r\n            const appProperties = await appXform.parseStream(stream);\r\n            model.company = appProperties.company;\r\n            model.manager = appProperties.manager;\r\n            break;\r\n          }\r\n\r\n          case 'docProps/core.xml': {\r\n            const coreXform = new CoreXform();\r\n            const coreProperties = await coreXform.parseStream(stream);\r\n            Object.assign(model, coreProperties);\r\n            break;\r\n          }\r\n\r\n          default: {\r\n            let match = entryName.match(/xl\\/worksheets\\/sheet(\\d+)[.]xml/);\r\n            if (match) {\r\n              await this._processWorksheetEntry(stream, model, match[1], options, entryName);\r\n              break;\r\n            }\r\n            match = entryName.match(/xl\\/worksheets\\/_rels\\/sheet(\\d+)[.]xml.rels/);\r\n            if (match) {\r\n              await this._processWorksheetRelsEntry(stream, model, match[1]);\r\n              break;\r\n            }\r\n            match = entryName.match(/xl\\/theme\\/([a-zA-Z0-9]+)[.]xml/);\r\n            if (match) {\r\n              await this._processThemeEntry(stream, model, match[1]);\r\n              break;\r\n            }\r\n            match = entryName.match(/xl\\/media\\/([a-zA-Z0-9]+[.][a-zA-Z0-9]{3,4})$/);\r\n            if (match) {\r\n              await this._processMediaEntry(stream, model, match[1]);\r\n              break;\r\n            }\r\n            match = entryName.match(/xl\\/drawings\\/([a-zA-Z0-9]+)[.]xml/);\r\n            if (match) {\r\n              await this._processDrawingEntry(stream, model, match[1]);\r\n              break;\r\n            }\r\n            match = entryName.match(/xl\\/(comments\\d+)[.]xml/);\r\n            if (match) {\r\n              await this._processCommentEntry(stream, model, match[1]);\r\n              break;\r\n            }\r\n            match = entryName.match(/xl\\/tables\\/(table\\d+)[.]xml/);\r\n            if (match) {\r\n              await this._processTableEntry(stream, model, match[1]);\r\n              break;\r\n            }\r\n            match = entryName.match(/xl\\/drawings\\/_rels\\/([a-zA-Z0-9]+)[.]xml[.]rels/);\r\n            if (match) {\r\n              await this._processDrawingRelsEntry(stream, model, match[1]);\r\n              break;\r\n            }\r\n            match = entryName.match(/xl\\/drawings\\/(vmlDrawing\\d+)[.]vml/);\r\n            if (match) {\r\n              await this._processVmlDrawingEntry(stream, model, match[1]);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.reconcile(model, options);\r\n\r\n    // apply model\r\n    this.workbook.model = model;\r\n    return this.workbook;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Write\r\n\r\n  async addMedia(zip, model) {\r\n    await Promise.all(\r\n      model.media.map(async medium => {\r\n        if (medium.type === 'image') {\r\n          const filename = `xl/media/${medium.name}.${medium.extension}`;\r\n          if (medium.filename) {\r\n            const data = await fsReadFileAsync(medium.filename);\r\n            return zip.append(data, {name: filename});\r\n          }\r\n          if (medium.buffer) {\r\n            return zip.append(medium.buffer, {name: filename});\r\n          }\r\n          if (medium.base64) {\r\n            const dataimg64 = medium.base64;\r\n            const content = dataimg64.substring(dataimg64.indexOf(',') + 1);\r\n            return zip.append(content, {name: filename, base64: true});\r\n          }\r\n        }\r\n        throw new Error('Unsupported media');\r\n      })\r\n    );\r\n  }\r\n\r\n  addDrawings(zip, model) {\r\n    const drawingXform = new DrawingXform();\r\n    const relsXform = new RelationshipsXform();\r\n\r\n    model.worksheets.forEach(worksheet => {\r\n      const {drawing} = worksheet;\r\n      if (drawing) {\r\n        drawingXform.prepare(drawing, {});\r\n        let xml = drawingXform.toXml(drawing);\r\n        zip.append(xml, {name: `xl/drawings/${drawing.name}.xml`});\r\n\r\n        xml = relsXform.toXml(drawing.rels);\r\n        zip.append(xml, {name: `xl/drawings/_rels/${drawing.name}.xml.rels`});\r\n      }\r\n    });\r\n  }\r\n\r\n  addTables(zip, model) {\r\n    const tableXform = new TableXform();\r\n\r\n    model.worksheets.forEach(worksheet => {\r\n      const {tables} = worksheet;\r\n      tables.forEach(table => {\r\n        tableXform.prepare(table, {});\r\n        const tableXml = tableXform.toXml(table);\r\n        zip.append(tableXml, {name: `xl/tables/${table.target}`});\r\n      });\r\n    });\r\n  }\r\n\r\n  async addContentTypes(zip, model) {\r\n    const xform = new ContentTypesXform();\r\n    const xml = xform.toXml(model);\r\n    zip.append(xml, {name: '[Content_Types].xml'});\r\n  }\r\n\r\n  async addApp(zip, model) {\r\n    const xform = new AppXform();\r\n    const xml = xform.toXml(model);\r\n    zip.append(xml, {name: 'docProps/app.xml'});\r\n  }\r\n\r\n  async addCore(zip, model) {\r\n    const coreXform = new CoreXform();\r\n    zip.append(coreXform.toXml(model), {name: 'docProps/core.xml'});\r\n  }\r\n\r\n  async addThemes(zip, model) {\r\n    const themes = model.themes || {theme1: theme1Xml};\r\n    Object.keys(themes).forEach(name => {\r\n      const xml = themes[name];\r\n      const path = `xl/theme/${name}.xml`;\r\n      zip.append(xml, {name: path});\r\n    });\r\n  }\r\n\r\n  async addOfficeRels(zip) {\r\n    const xform = new RelationshipsXform();\r\n    const xml = xform.toXml([\r\n      {Id: 'rId1', Type: XLSX.RelType.OfficeDocument, Target: 'xl/workbook.xml'},\r\n      {Id: 'rId2', Type: XLSX.RelType.CoreProperties, Target: 'docProps/core.xml'},\r\n      {Id: 'rId3', Type: XLSX.RelType.ExtenderProperties, Target: 'docProps/app.xml'},\r\n    ]);\r\n    zip.append(xml, {name: '_rels/.rels'});\r\n  }\r\n\r\n  async addWorkbookRels(zip, model) {\r\n    let count = 1;\r\n    const relationships = [\r\n      {Id: `rId${count++}`, Type: XLSX.RelType.Styles, Target: 'styles.xml'},\r\n      {Id: `rId${count++}`, Type: XLSX.RelType.Theme, Target: 'theme/theme1.xml'},\r\n    ];\r\n    if (model.sharedStrings.count) {\r\n      relationships.push({\r\n        Id: `rId${count++}`,\r\n        Type: XLSX.RelType.SharedStrings,\r\n        Target: 'sharedStrings.xml',\r\n      });\r\n    }\r\n    model.worksheets.forEach(worksheet => {\r\n      worksheet.rId = `rId${count++}`;\r\n      relationships.push({\r\n        Id: worksheet.rId,\r\n        Type: XLSX.RelType.Worksheet,\r\n        Target: `worksheets/sheet${worksheet.id}.xml`,\r\n      });\r\n    });\r\n    const xform = new RelationshipsXform();\r\n    const xml = xform.toXml(relationships);\r\n    zip.append(xml, {name: 'xl/_rels/workbook.xml.rels'});\r\n  }\r\n\r\n  async addSharedStrings(zip, model) {\r\n    if (model.sharedStrings && model.sharedStrings.count) {\r\n      zip.append(model.sharedStrings.xml, {name: 'xl/sharedStrings.xml'});\r\n    }\r\n  }\r\n\r\n  async addStyles(zip, model) {\r\n    const {xml} = model.styles;\r\n    if (xml) {\r\n      zip.append(xml, {name: 'xl/styles.xml'});\r\n    }\r\n  }\r\n\r\n  async addWorkbook(zip, model) {\r\n    const xform = new WorkbookXform();\r\n    zip.append(xform.toXml(model), {name: 'xl/workbook.xml'});\r\n  }\r\n\r\n  async addWorksheets(zip, model) {\r\n    // preparation phase\r\n    const worksheetXform = new WorksheetXform();\r\n    const relationshipsXform = new RelationshipsXform();\r\n    const commentsXform = new CommentsXform();\r\n    const vmlNotesXform = new VmlNotesXform();\r\n\r\n    // write sheets\r\n    model.worksheets.forEach(worksheet => {\r\n      let xmlStream = new XmlStream();\r\n      worksheetXform.render(xmlStream, worksheet);\r\n      zip.append(xmlStream.xml, {name: `xl/worksheets/sheet${worksheet.id}.xml`});\r\n\r\n      if (worksheet.rels && worksheet.rels.length) {\r\n        xmlStream = new XmlStream();\r\n        relationshipsXform.render(xmlStream, worksheet.rels);\r\n        zip.append(xmlStream.xml, {name: `xl/worksheets/_rels/sheet${worksheet.id}.xml.rels`});\r\n      }\r\n\r\n      if (worksheet.comments.length > 0) {\r\n        xmlStream = new XmlStream();\r\n        commentsXform.render(xmlStream, worksheet);\r\n        zip.append(xmlStream.xml, {name: `xl/comments${worksheet.id}.xml`});\r\n\r\n        xmlStream = new XmlStream();\r\n        vmlNotesXform.render(xmlStream, worksheet);\r\n        zip.append(xmlStream.xml, {name: `xl/drawings/vmlDrawing${worksheet.id}.vml`});\r\n      }\r\n    });\r\n  }\r\n\r\n  _finalize(zip) {\r\n    return new Promise((resolve, reject) => {\r\n      zip.on('finish', () => {\r\n        resolve(this);\r\n      });\r\n      zip.on('error', reject);\r\n      zip.finalize();\r\n    });\r\n  }\r\n\r\n  prepareModel(model, options) {\r\n    // ensure following properties have sane values\r\n    model.creator = model.creator || 'ExcelJS';\r\n    model.lastModifiedBy = model.lastModifiedBy || 'ExcelJS';\r\n    model.created = model.created || new Date();\r\n    model.modified = model.modified || new Date();\r\n\r\n    model.useSharedStrings =\r\n      options.useSharedStrings !== undefined ? options.useSharedStrings : true;\r\n    model.useStyles = options.useStyles !== undefined ? options.useStyles : true;\r\n\r\n    // Manage the shared strings\r\n    model.sharedStrings = new SharedStringsXform();\r\n\r\n    // add a style manager to handle cell formats, fonts, etc.\r\n    model.styles = model.useStyles ? new StylesXform(true) : new StylesXform.Mock();\r\n\r\n    // prepare all of the things before the render\r\n    const workbookXform = new WorkbookXform();\r\n    const worksheetXform = new WorksheetXform();\r\n\r\n    workbookXform.prepare(model);\r\n\r\n    const worksheetOptions = {\r\n      sharedStrings: model.sharedStrings,\r\n      styles: model.styles,\r\n      date1904: model.properties.date1904,\r\n      drawingsCount: 0,\r\n      media: model.media,\r\n    };\r\n    worksheetOptions.drawings = model.drawings = [];\r\n    worksheetOptions.commentRefs = model.commentRefs = [];\r\n    let tableCount = 0;\r\n    model.tables = [];\r\n    model.worksheets.forEach(worksheet => {\r\n      // assign unique filenames to tables\r\n      worksheet.tables.forEach(table => {\r\n        tableCount++;\r\n        table.target = `table${tableCount}.xml`;\r\n        table.id = tableCount;\r\n        model.tables.push(table);\r\n      });\r\n\r\n      worksheetXform.prepare(worksheet, worksheetOptions);\r\n    });\r\n\r\n    // TODO: workbook drawing list\r\n  }\r\n\r\n  async write(stream, options) {\r\n    options = options || {};\r\n    const {model} = this.workbook;\r\n    const zip = new ZipStream.ZipWriter(options.zip);\r\n    zip.pipe(stream);\r\n\r\n    this.prepareModel(model, options);\r\n\r\n    // render\r\n    await this.addContentTypes(zip, model);\r\n    await this.addOfficeRels(zip, model);\r\n    await this.addWorkbookRels(zip, model);\r\n    await this.addWorksheets(zip, model);\r\n    await this.addSharedStrings(zip, model); // always after worksheets\r\n    await this.addDrawings(zip, model);\r\n    await this.addTables(zip, model);\r\n    await Promise.all([this.addThemes(zip, model), this.addStyles(zip, model)]);\r\n    await this.addMedia(zip, model);\r\n    await Promise.all([this.addApp(zip, model), this.addCore(zip, model)]);\r\n    await this.addWorkbook(zip, model);\r\n    return this._finalize(zip);\r\n  }\r\n\r\n  writeFile(filename, options) {\r\n    const stream = fs.createWriteStream(filename);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      stream.on('finish', () => {\r\n        resolve();\r\n      });\r\n      stream.on('error', error => {\r\n        reject(error);\r\n      });\r\n\r\n      this.write(stream, options).then(() => {\r\n        stream.end();\r\n      });\r\n    });\r\n  }\r\n\r\n  async writeBuffer(options) {\r\n    const stream = new StreamBuf();\r\n    await this.write(stream, options);\r\n    return stream.read();\r\n  }\r\n}\r\n\r\nXLSX.RelType = require('./rel-type');\r\n\r\nmodule.exports = XLSX;\r\n"]},"metadata":{},"sourceType":"script"}