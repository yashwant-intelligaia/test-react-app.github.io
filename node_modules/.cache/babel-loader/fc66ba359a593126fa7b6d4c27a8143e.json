{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar HlickClickXform = require('./hlink-click-xform');\n\nvar ExtLstXform = require('./ext-lst-xform');\n\nvar CNvPrXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(CNvPrXform, _BaseXform);\n\n  var _super = _createSuper(CNvPrXform);\n\n  function CNvPrXform() {\n    var _this;\n\n    _classCallCheck(this, CNvPrXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'a:hlinkClick': new HlickClickXform(),\n      'a:extLst': new ExtLstXform()\n    };\n    return _this;\n  }\n\n  _createClass(CNvPrXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode(this.tag, {\n        id: model.index,\n        name: \"Picture \".concat(model.index)\n      });\n      this.map['a:hlinkClick'].render(xmlStream, model);\n      this.map['a:extLst'].render(xmlStream, model);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      if (this.parser) {\n        this.parser.parseOpen(node);\n        return true;\n      }\n\n      switch (node.name) {\n        case this.tag:\n          this.reset();\n          break;\n\n        default:\n          this.parser = this.map[node.name];\n\n          if (this.parser) {\n            this.parser.parseOpen(node);\n          }\n\n          break;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case this.tag:\n          this.model = this.map['a:hlinkClick'].model;\n          return false;\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'xdr:cNvPr';\n    }\n  }]);\n\n  return CNvPrXform;\n}(BaseXform);\n\nmodule.exports = CNvPrXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/c-nv-pr-xform.js"],"names":["BaseXform","require","HlickClickXform","ExtLstXform","CNvPrXform","xmlStream","model","id","name","node","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAA/B,qBAA+B,CAA/B;;AACA,IAAME,WAAW,GAAGF,OAAO,CAA3B,iBAA2B,CAA3B;;IAEMG,U;;;;;AACJ,WAAA,UAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AACZ,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,GAAA,GAAW;AACT,sBAAgB,IADP,eACO,EADP;AAET,kBAAY,IAAA,WAAA;AAFH,KAAX;AAHY,WAAA,KAAA;AAOb;;;;2BAMMC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA,EAA6B;AAC3BE,QAAAA,EAAE,EAAED,KAAK,CADkB,KAAA;AAE3BE,QAAAA,IAAI,EAAA,WAAA,MAAA,CAAaF,KAAK,CAAlB,KAAA;AAFuB,OAA7BD;AAIA,WAAA,GAAA,CAAA,cAAA,EAAA,MAAA,CAAA,SAAA,EAAA,KAAA;AACA,WAAA,GAAA,CAAA,UAAA,EAAA,MAAA,CAAA,SAAA,EAAA,KAAA;AACAA,MAAAA,SAAS,CAATA,SAAAA;AACD;;;8BAESI,I,EAAM;AACd,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACA,eAAA,IAAA;AACD;;AAED,cAAQA,IAAI,CAAZ,IAAA;AACE,aAAK,KAAL,GAAA;AACE,eAAA,KAAA;AACA;;AACF;AACE,eAAA,MAAA,GAAc,KAAA,GAAA,CAASA,IAAI,CAA3B,IAAc,CAAd;;AACA,cAAI,KAAJ,MAAA,EAAiB;AACf,iBAAA,MAAA,CAAA,SAAA,CAAA,IAAA;AACD;;AACD;AATJ;;AAWA,aAAA,IAAA;AACD;;;gCAEW,CAAE;;;+BAEHD,I,EAAM;AACf,UAAI,KAAJ,MAAA,EAAiB;AACf,YAAI,CAAC,KAAA,MAAA,CAAA,UAAA,CAAL,IAAK,CAAL,EAAmC;AACjC,eAAA,MAAA,GAAA,SAAA;AACD;;AACD,eAAA,IAAA;AACD;;AACD,cAAA,IAAA;AACE,aAAK,KAAL,GAAA;AACE,eAAA,KAAA,GAAa,KAAA,GAAA,CAAA,cAAA,EAAb,KAAA;AACA,iBAAA,KAAA;;AACF;AACE,iBAAA,IAAA;AALJ;AAOD;;;wBAlDS;AACR,aAAA,WAAA;AACD;;;;EAZsBR,S;;AA+DzBU,MAAM,CAANA,OAAAA,GAAAA,UAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\nconst HlickClickXform = require('./hlink-click-xform');\r\nconst ExtLstXform = require('./ext-lst-xform');\r\n\r\nclass CNvPrXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'a:hlinkClick': new HlickClickXform(),\r\n      'a:extLst': new ExtLstXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'xdr:cNvPr';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      id: model.index,\r\n      name: `Picture ${model.index}`,\r\n    });\r\n    this.map['a:hlinkClick'].render(xmlStream, model);\r\n    this.map['a:extLst'].render(xmlStream, model);\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.reset();\r\n        break;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n        }\r\n        break;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        this.model = this.map['a:hlinkClick'].model;\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = CNvPrXform;\r\n"]},"metadata":{},"sourceType":"script"}