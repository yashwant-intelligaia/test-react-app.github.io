{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* eslint-disable max-classes-per-file */\n\n\nvar CompositeXform = require('../composite-xform');\n\nvar ConditionalFormattingsExt = require('./cf-ext/conditional-formattings-ext-xform');\n\nvar ExtXform = /*#__PURE__*/function (_CompositeXform) {\n  _inherits(ExtXform, _CompositeXform);\n\n  var _super = _createSuper(ExtXform);\n\n  function ExtXform() {\n    var _this;\n\n    _classCallCheck(this, ExtXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'x14:conditionalFormattings': _this.conditionalFormattings = new ConditionalFormattingsExt()\n    };\n    return _this;\n  }\n\n  _createClass(ExtXform, [{\n    key: \"hasContent\",\n    value: function hasContent(model) {\n      return this.conditionalFormattings.hasContent(model.conditionalFormattings);\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      this.conditionalFormattings.prepare(model.conditionalFormattings, options);\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode('ext', {\n        uri: '{78C0D931-6437-407d-A8EE-F0AAD7539E65}',\n        'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main'\n      });\n      this.conditionalFormattings.render(xmlStream, model.conditionalFormattings);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"createNewModel\",\n    value: function createNewModel() {\n      return {};\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      this.model[name] = parser.model;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'ext';\n    }\n  }]);\n\n  return ExtXform;\n}(CompositeXform);\n\nvar ExtLstXform = /*#__PURE__*/function (_CompositeXform2) {\n  _inherits(ExtLstXform, _CompositeXform2);\n\n  var _super2 = _createSuper(ExtLstXform);\n\n  function ExtLstXform() {\n    var _this2;\n\n    _classCallCheck(this, ExtLstXform);\n\n    _this2 = _super2.call(this);\n    _this2.map = {\n      ext: _this2.ext = new ExtXform()\n    };\n    return _this2;\n  }\n\n  _createClass(ExtLstXform, [{\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      this.ext.prepare(model, options);\n    }\n  }, {\n    key: \"hasContent\",\n    value: function hasContent(model) {\n      return this.ext.hasContent(model);\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      if (!this.hasContent(model)) {\n        return;\n      }\n\n      xmlStream.openNode('extLst');\n      this.ext.render(xmlStream, model);\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"createNewModel\",\n    value: function createNewModel() {\n      return {};\n    }\n  }, {\n    key: \"onParserClose\",\n    value: function onParserClose(name, parser) {\n      Object.assign(this.model, parser.model);\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'extLst';\n    }\n  }]);\n\n  return ExtLstXform;\n}(CompositeXform);\n\nmodule.exports = ExtLstXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/ext-lst-xform.js"],"names":["CompositeXform","require","ConditionalFormattingsExt","ExtXform","model","options","xmlStream","uri","name","parser","ExtLstXform","ext","Object","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,IAAMA,cAAc,GAAGC,OAAO,CAA9B,oBAA8B,CAA9B;;AAEA,IAAMC,yBAAyB,GAAGD,OAAO,CAAzC,4CAAyC,CAAzC;;IAEME,Q;;;;;AACJ,WAAA,QAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AACZ,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA,IAAA,KAAA,CAAA,GAAA,GAAW;AACT,oCAA+B,KAAA,CAAA,sBAAA,GAA8B,IAAA,yBAAA;AADpD,KAAX;AAFY,WAAA,KAAA;AAKb;;;;+BAMUC,K,EAAO;AAChB,aAAO,KAAA,sBAAA,CAAA,UAAA,CAAuCA,KAAK,CAAnD,sBAAO,CAAP;AACD;;;4BAEOA,K,EAAOC,O,EAAS;AACtB,WAAA,sBAAA,CAAA,OAAA,CAAoCD,KAAK,CAAzC,sBAAA,EAAA,OAAA;AACD;;;2BAEME,S,EAAWF,K,EAAO;AACvBE,MAAAA,SAAS,CAATA,QAAAA,CAAAA,KAAAA,EAA0B;AACxBC,QAAAA,GAAG,EADqB,wCAAA;AAExB,qBAAa;AAFW,OAA1BD;AAKA,WAAA,sBAAA,CAAA,MAAA,CAAA,SAAA,EAA8CF,KAAK,CAAnD,sBAAA;AAEAE,MAAAA,SAAS,CAATA,SAAAA;AACD;;;qCAEgB;AACf,aAAA,EAAA;AACD;;;kCAEaE,I,EAAMC,M,EAAQ;AAC1B,WAAA,KAAA,CAAA,IAAA,IAAmBA,MAAM,CAAzB,KAAA;AACD;;;wBA7BS;AACR,aAAA,KAAA;AACD;;;;EAVoBT,c;;IAwCjBU,W;;;;;AACJ,WAAA,WAAA,GAAc;AAAA,QAAA,MAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;AACZ,IAAA,MAAA,GAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,MAAA,CAAA,GAAA,GAAW;AACTC,MAAAA,GAAG,EAAG,MAAA,CAAA,GAAA,GAAW,IAAA,QAAA;AADR,KAAX;AAHY,WAAA,MAAA;AAMb;;;;4BAMOP,K,EAAOC,O,EAAS;AACtB,WAAA,GAAA,CAAA,OAAA,CAAA,KAAA,EAAA,OAAA;AACD;;;+BAEUD,K,EAAO;AAChB,aAAO,KAAA,GAAA,CAAA,UAAA,CAAP,KAAO,CAAP;AACD;;;2BAEME,S,EAAWF,K,EAAO;AACvB,UAAI,CAAC,KAAA,UAAA,CAAL,KAAK,CAAL,EAA6B;AAC3B;AACD;;AAEDE,MAAAA,SAAS,CAATA,QAAAA,CAAAA,QAAAA;AACA,WAAA,GAAA,CAAA,MAAA,CAAA,SAAA,EAAA,KAAA;AACAA,MAAAA,SAAS,CAATA,SAAAA;AACD;;;qCAEgB;AACf,aAAA,EAAA;AACD;;;kCAEaE,I,EAAMC,M,EAAQ;AAC1BG,MAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,KAAAA,EAA0BH,MAAM,CAAhCG,KAAAA;AACD;;;wBA5BS;AACR,aAAA,QAAA;AACD;;;;EAXuBZ,c;;AAwC1Ba,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["/* eslint-disable max-classes-per-file */\r\nconst CompositeXform = require('../composite-xform');\r\n\r\nconst ConditionalFormattingsExt = require('./cf-ext/conditional-formattings-ext-xform');\r\n\r\nclass ExtXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n    this.map = {\r\n      'x14:conditionalFormattings': (this.conditionalFormattings = new ConditionalFormattingsExt()),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'ext';\r\n  }\r\n\r\n  hasContent(model) {\r\n    return this.conditionalFormattings.hasContent(model.conditionalFormattings);\r\n  }\r\n\r\n  prepare(model, options) {\r\n    this.conditionalFormattings.prepare(model.conditionalFormattings, options);\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('ext', {\r\n      uri: '{78C0D931-6437-407d-A8EE-F0AAD7539E65}',\r\n      'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main',\r\n    });\r\n\r\n    this.conditionalFormattings.render(xmlStream, model.conditionalFormattings);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel() {\r\n    return {};\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    this.model[name] = parser.model;\r\n  }\r\n}\r\n\r\nclass ExtLstXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      ext: (this.ext = new ExtXform()),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'extLst';\r\n  }\r\n\r\n  prepare(model, options) {\r\n    this.ext.prepare(model, options);\r\n  }\r\n\r\n  hasContent(model) {\r\n    return this.ext.hasContent(model);\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (!this.hasContent(model)) {\r\n      return;\r\n    }\r\n\r\n    xmlStream.openNode('extLst');\r\n    this.ext.render(xmlStream, model);\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel() {\r\n    return {};\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    Object.assign(this.model, parser.model);\r\n  }\r\n}\r\n\r\nmodule.exports = ExtLstXform;\r\n"]},"metadata":{},"sourceType":"script"}