{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar _ = require('../../../utils/under-dash');\n\nvar BaseXform = require('../base-xform');\n\nfunction booleanToXml(model, value) {\n  return model ? value : undefined;\n}\n\nfunction xmlToBoolean(value, equals) {\n  return value === equals ? true : undefined;\n}\n\nvar SheetProtectionXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(SheetProtectionXform, _BaseXform);\n\n  var _super = _createSuper(SheetProtectionXform);\n\n  function SheetProtectionXform() {\n    _classCallCheck(this, SheetProtectionXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SheetProtectionXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      if (model) {\n        var attributes = {\n          sheet: booleanToXml(model.sheet, '1'),\n          selectLockedCells: model.selectLockedCells === false ? '1' : undefined,\n          selectUnlockedCells: model.selectUnlockedCells === false ? '1' : undefined,\n          formatCells: booleanToXml(model.formatCells, '0'),\n          formatColumns: booleanToXml(model.formatColumns, '0'),\n          formatRows: booleanToXml(model.formatRows, '0'),\n          insertColumns: booleanToXml(model.insertColumns, '0'),\n          insertRows: booleanToXml(model.insertRows, '0'),\n          insertHyperlinks: booleanToXml(model.insertHyperlinks, '0'),\n          deleteColumns: booleanToXml(model.deleteColumns, '0'),\n          deleteRows: booleanToXml(model.deleteRows, '0'),\n          sort: booleanToXml(model.sort, '0'),\n          autoFilter: booleanToXml(model.autoFilter, '0'),\n          pivotTables: booleanToXml(model.pivotTables, '0')\n        };\n\n        if (model.sheet) {\n          attributes.algorithmName = model.algorithmName;\n          attributes.hashValue = model.hashValue;\n          attributes.saltValue = model.saltValue;\n          attributes.spinCount = model.spinCount;\n          attributes.objects = booleanToXml(model.objects === false, '1');\n          attributes.scenarios = booleanToXml(model.scenarios === false, '1');\n        }\n\n        if (_.some(attributes, function (value) {\n          return value !== undefined;\n        })) {\n          xmlStream.leafNode(this.tag, attributes);\n        }\n      }\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      switch (node.name) {\n        case this.tag:\n          this.model = {\n            sheet: xmlToBoolean(node.attributes.sheet, '1'),\n            objects: node.attributes.objects === '1' ? false : undefined,\n            scenarios: node.attributes.scenarios === '1' ? false : undefined,\n            selectLockedCells: node.attributes.selectLockedCells === '1' ? false : undefined,\n            selectUnlockedCells: node.attributes.selectUnlockedCells === '1' ? false : undefined,\n            formatCells: xmlToBoolean(node.attributes.formatCells, '0'),\n            formatColumns: xmlToBoolean(node.attributes.formatColumns, '0'),\n            formatRows: xmlToBoolean(node.attributes.formatRows, '0'),\n            insertColumns: xmlToBoolean(node.attributes.insertColumns, '0'),\n            insertRows: xmlToBoolean(node.attributes.insertRows, '0'),\n            insertHyperlinks: xmlToBoolean(node.attributes.insertHyperlinks, '0'),\n            deleteColumns: xmlToBoolean(node.attributes.deleteColumns, '0'),\n            deleteRows: xmlToBoolean(node.attributes.deleteRows, '0'),\n            sort: xmlToBoolean(node.attributes.sort, '0'),\n            autoFilter: xmlToBoolean(node.attributes.autoFilter, '0'),\n            pivotTables: xmlToBoolean(node.attributes.pivotTables, '0')\n          };\n\n          if (node.attributes.algorithmName) {\n            this.model.algorithmName = node.attributes.algorithmName;\n            this.model.hashValue = node.attributes.hashValue;\n            this.model.saltValue = node.attributes.saltValue;\n            this.model.spinCount = parseInt(node.attributes.spinCount, 10);\n          }\n\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose() {\n      return false;\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'sheetProtection';\n    }\n  }]);\n\n  return SheetProtectionXform;\n}(BaseXform);\n\nmodule.exports = SheetProtectionXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/sheet-protection-xform.js"],"names":["_","require","BaseXform","model","value","SheetProtectionXform","xmlStream","attributes","sheet","booleanToXml","selectLockedCells","selectUnlockedCells","formatCells","formatColumns","formatRows","insertColumns","insertRows","insertHyperlinks","deleteColumns","deleteRows","sort","autoFilter","pivotTables","node","xmlToBoolean","objects","scenarios","parseInt","module"],"mappings":"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","sourcesContent":["const _ = require('../../../utils/under-dash');\r\nconst BaseXform = require('../base-xform');\r\n\r\nfunction booleanToXml(model, value) {\r\n  return model ? value : undefined;\r\n}\r\n\r\nfunction xmlToBoolean(value, equals) {\r\n  return value === equals ? true : undefined;\r\n}\r\n\r\nclass SheetProtectionXform extends BaseXform {\r\n  get tag() {\r\n    return 'sheetProtection';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (model) {\r\n      const attributes = {\r\n        sheet: booleanToXml(model.sheet, '1'),\r\n        selectLockedCells: model.selectLockedCells === false ? '1' : undefined,\r\n        selectUnlockedCells: model.selectUnlockedCells === false ? '1' : undefined,\r\n        formatCells: booleanToXml(model.formatCells, '0'),\r\n        formatColumns: booleanToXml(model.formatColumns, '0'),\r\n        formatRows: booleanToXml(model.formatRows, '0'),\r\n        insertColumns: booleanToXml(model.insertColumns, '0'),\r\n        insertRows: booleanToXml(model.insertRows, '0'),\r\n        insertHyperlinks: booleanToXml(model.insertHyperlinks, '0'),\r\n        deleteColumns: booleanToXml(model.deleteColumns, '0'),\r\n        deleteRows: booleanToXml(model.deleteRows, '0'),\r\n        sort: booleanToXml(model.sort, '0'),\r\n        autoFilter: booleanToXml(model.autoFilter, '0'),\r\n        pivotTables: booleanToXml(model.pivotTables, '0'),\r\n      };\r\n      if (model.sheet) {\r\n        attributes.algorithmName = model.algorithmName;\r\n        attributes.hashValue = model.hashValue;\r\n        attributes.saltValue = model.saltValue;\r\n        attributes.spinCount = model.spinCount;\r\n        attributes.objects = booleanToXml(model.objects === false, '1');\r\n        attributes.scenarios = booleanToXml(model.scenarios === false, '1');\r\n      }\r\n      if (_.some(attributes, value => value !== undefined)) {\r\n        xmlStream.leafNode(this.tag, attributes);\r\n      }\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          sheet: xmlToBoolean(node.attributes.sheet, '1'),\r\n          objects: node.attributes.objects === '1' ? false : undefined,\r\n          scenarios: node.attributes.scenarios === '1' ? false : undefined,\r\n          selectLockedCells: node.attributes.selectLockedCells === '1' ? false : undefined,\r\n          selectUnlockedCells: node.attributes.selectUnlockedCells === '1' ? false : undefined,\r\n          formatCells: xmlToBoolean(node.attributes.formatCells, '0'),\r\n          formatColumns: xmlToBoolean(node.attributes.formatColumns, '0'),\r\n          formatRows: xmlToBoolean(node.attributes.formatRows, '0'),\r\n          insertColumns: xmlToBoolean(node.attributes.insertColumns, '0'),\r\n          insertRows: xmlToBoolean(node.attributes.insertRows, '0'),\r\n          insertHyperlinks: xmlToBoolean(node.attributes.insertHyperlinks, '0'),\r\n          deleteColumns: xmlToBoolean(node.attributes.deleteColumns, '0'),\r\n          deleteRows: xmlToBoolean(node.attributes.deleteRows, '0'),\r\n          sort: xmlToBoolean(node.attributes.sort, '0'),\r\n          autoFilter: xmlToBoolean(node.attributes.autoFilter, '0'),\r\n          pivotTables: xmlToBoolean(node.attributes.pivotTables, '0'),\r\n        };\r\n        if (node.attributes.algorithmName) {\r\n          this.model.algorithmName = node.attributes.algorithmName;\r\n          this.model.hashValue = node.attributes.hashValue;\r\n          this.model.saltValue = node.attributes.saltValue;\r\n          this.model.spinCount = parseInt(node.attributes.spinCount, 10);\r\n        }\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = SheetProtectionXform;\r\n"]},"metadata":{},"sourceType":"script"}