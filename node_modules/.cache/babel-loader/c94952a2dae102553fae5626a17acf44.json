{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _ = require('../../../utils/under-dash');\n\nvar utils = require('../../../utils/utils');\n\nvar colCache = require('../../../utils/col-cache');\n\nvar BaseXform = require('../base-xform');\n\nvar Range = require('../../../doc/range');\n\nfunction assign(definedName, attributes, name, defaultValue) {\n  var value = attributes[name];\n\n  if (value !== undefined) {\n    definedName[name] = value;\n  } else if (defaultValue !== undefined) {\n    definedName[name] = defaultValue;\n  }\n}\n\nfunction parseBool(value) {\n  switch (value) {\n    case '1':\n    case 'true':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction assignBool(definedName, attributes, name, defaultValue) {\n  var value = attributes[name];\n\n  if (value !== undefined) {\n    definedName[name] = parseBool(value);\n  } else if (defaultValue !== undefined) {\n    definedName[name] = defaultValue;\n  }\n}\n\nfunction optimiseDataValidations(model) {\n  // Squeeze alike data validations together into rectangular ranges\n  // to reduce file size and speed up Excel load time\n  var dvList = _.map(model, function (dataValidation, address) {\n    return {\n      address: address,\n      dataValidation: dataValidation,\n      marked: false\n    };\n  }).sort(function (a, b) {\n    return _.strcmp(a.address, b.address);\n  });\n\n  var dvMap = _.keyBy(dvList, 'address');\n\n  var matchCol = function matchCol(addr, height, col) {\n    for (var i = 0; i < height; i++) {\n      var otherAddress = colCache.encodeAddress(addr.row + i, col);\n\n      if (!model[otherAddress] || !_.isEqual(model[addr.address], model[otherAddress])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return dvList.map(function (dv) {\n    if (!dv.marked) {\n      var addr = colCache.decodeEx(dv.address);\n\n      if (addr.dimensions) {\n        dvMap[addr.dimensions].marked = true;\n        return _objectSpread(_objectSpread({}, dv.dataValidation), {}, {\n          sqref: dv.address\n        });\n      } // iterate downwards - finding matching cells\n\n\n      var height = 1;\n      var otherAddress = colCache.encodeAddress(addr.row + height, addr.col);\n\n      while (model[otherAddress] && _.isEqual(dv.dataValidation, model[otherAddress])) {\n        height++;\n        otherAddress = colCache.encodeAddress(addr.row + height, addr.col);\n      } // iterate rightwards...\n\n\n      var width = 1;\n\n      while (matchCol(addr, height, addr.col + width)) {\n        width++;\n      } // mark all included addresses\n\n\n      for (var i = 0; i < height; i++) {\n        for (var j = 0; j < width; j++) {\n          otherAddress = colCache.encodeAddress(addr.row + i, addr.col + j);\n          dvMap[otherAddress].marked = true;\n        }\n      }\n\n      if (height > 1 || width > 1) {\n        var bottom = addr.row + (height - 1);\n        var right = addr.col + (width - 1);\n        return _objectSpread(_objectSpread({}, dv.dataValidation), {}, {\n          sqref: \"\".concat(dv.address, \":\").concat(colCache.encodeAddress(bottom, right))\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, dv.dataValidation), {}, {\n        sqref: dv.address\n      });\n    }\n\n    return null;\n  }).filter(Boolean);\n}\n\nvar DataValidationsXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(DataValidationsXform, _BaseXform);\n\n  var _super = _createSuper(DataValidationsXform);\n\n  function DataValidationsXform() {\n    _classCallCheck(this, DataValidationsXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DataValidationsXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      var optimizedModel = optimiseDataValidations(model);\n\n      if (optimizedModel.length) {\n        xmlStream.openNode('dataValidations', {\n          count: optimizedModel.length\n        });\n        optimizedModel.forEach(function (value) {\n          xmlStream.openNode('dataValidation');\n\n          if (value.type !== 'any') {\n            xmlStream.addAttribute('type', value.type);\n\n            if (value.operator && value.type !== 'list' && value.operator !== 'between') {\n              xmlStream.addAttribute('operator', value.operator);\n            }\n\n            if (value.allowBlank) {\n              xmlStream.addAttribute('allowBlank', '1');\n            }\n          }\n\n          if (value.showInputMessage) {\n            xmlStream.addAttribute('showInputMessage', '1');\n          }\n\n          if (value.promptTitle) {\n            xmlStream.addAttribute('promptTitle', value.promptTitle);\n          }\n\n          if (value.prompt) {\n            xmlStream.addAttribute('prompt', value.prompt);\n          }\n\n          if (value.showErrorMessage) {\n            xmlStream.addAttribute('showErrorMessage', '1');\n          }\n\n          if (value.errorStyle) {\n            xmlStream.addAttribute('errorStyle', value.errorStyle);\n          }\n\n          if (value.errorTitle) {\n            xmlStream.addAttribute('errorTitle', value.errorTitle);\n          }\n\n          if (value.error) {\n            xmlStream.addAttribute('error', value.error);\n          }\n\n          xmlStream.addAttribute('sqref', value.sqref);\n          (value.formulae || []).forEach(function (formula, index) {\n            xmlStream.openNode(\"formula\".concat(index + 1));\n\n            if (value.type === 'date') {\n              xmlStream.writeText(utils.dateToExcel(new Date(formula)));\n            } else {\n              xmlStream.writeText(formula);\n            }\n\n            xmlStream.closeNode();\n          });\n          xmlStream.closeNode();\n        });\n        xmlStream.closeNode();\n      }\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      switch (node.name) {\n        case 'dataValidations':\n          this.model = {};\n          return true;\n\n        case 'dataValidation':\n          {\n            this._address = node.attributes.sqref;\n            var dataValidation = {\n              type: node.attributes.type || 'any',\n              formulae: []\n            };\n\n            if (node.attributes.type) {\n              assignBool(dataValidation, node.attributes, 'allowBlank');\n            }\n\n            assignBool(dataValidation, node.attributes, 'showInputMessage');\n            assignBool(dataValidation, node.attributes, 'showErrorMessage');\n\n            switch (dataValidation.type) {\n              case 'any':\n              case 'list':\n              case 'custom':\n                break;\n\n              default:\n                assign(dataValidation, node.attributes, 'operator', 'between');\n                break;\n            }\n\n            assign(dataValidation, node.attributes, 'promptTitle');\n            assign(dataValidation, node.attributes, 'prompt');\n            assign(dataValidation, node.attributes, 'errorStyle');\n            assign(dataValidation, node.attributes, 'errorTitle');\n            assign(dataValidation, node.attributes, 'error');\n            this._dataValidation = dataValidation;\n            return true;\n          }\n\n        case 'formula1':\n        case 'formula2':\n          this._formula = [];\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(text) {\n      if (this._formula) {\n        this._formula.push(text);\n      }\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      var _this = this;\n\n      switch (name) {\n        case 'dataValidations':\n          return false;\n\n        case 'dataValidation':\n          {\n            if (!this._dataValidation.formulae || !this._dataValidation.formulae.length) {\n              delete this._dataValidation.formulae;\n              delete this._dataValidation.operator;\n            } // The four known cases: 1. E4:L9 N4:U9  2.E4 L9  3. N4:U9  4. E4\n\n\n            var list = this._address.split(/\\s+/g) || [];\n            list.forEach(function (addr) {\n              if (addr.includes(':')) {\n                var range = new Range(addr);\n                range.forEachAddress(function (address) {\n                  _this.model[address] = _this._dataValidation;\n                });\n              } else {\n                _this.model[addr] = _this._dataValidation;\n              }\n            });\n            return true;\n          }\n\n        case 'formula1':\n        case 'formula2':\n          {\n            var formula = this._formula.join('');\n\n            switch (this._dataValidation.type) {\n              case 'whole':\n              case 'textLength':\n                formula = parseInt(formula, 10);\n                break;\n\n              case 'decimal':\n                formula = parseFloat(formula);\n                break;\n\n              case 'date':\n                formula = utils.excelToDate(parseFloat(formula));\n                break;\n\n              default:\n                break;\n            }\n\n            this._dataValidation.formulae.push(formula);\n\n            this._formula = undefined;\n            return true;\n          }\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'dataValidations';\n    }\n  }]);\n\n  return DataValidationsXform;\n}(BaseXform);\n\nmodule.exports = DataValidationsXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/data-validations-xform.js"],"names":["_","require","utils","colCache","BaseXform","Range","value","attributes","definedName","defaultValue","parseBool","dvList","address","dataValidation","marked","a","b","dvMap","matchCol","i","otherAddress","addr","model","dv","sqref","height","width","j","bottom","right","DataValidationsXform","xmlStream","optimizedModel","optimiseDataValidations","count","length","index","node","type","formulae","assignBool","assign","text","name","list","range","formula","parseInt","parseFloat","module"],"mappings":"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","sourcesContent":["const _ = require('../../../utils/under-dash');\r\nconst utils = require('../../../utils/utils');\r\nconst colCache = require('../../../utils/col-cache');\r\nconst BaseXform = require('../base-xform');\r\nconst Range = require('../../../doc/range');\r\n\r\nfunction assign(definedName, attributes, name, defaultValue) {\r\n  const value = attributes[name];\r\n  if (value !== undefined) {\r\n    definedName[name] = value;\r\n  } else if (defaultValue !== undefined) {\r\n    definedName[name] = defaultValue;\r\n  }\r\n}\r\nfunction parseBool(value) {\r\n  switch (value) {\r\n    case '1':\r\n    case 'true':\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\nfunction assignBool(definedName, attributes, name, defaultValue) {\r\n  const value = attributes[name];\r\n  if (value !== undefined) {\r\n    definedName[name] = parseBool(value);\r\n  } else if (defaultValue !== undefined) {\r\n    definedName[name] = defaultValue;\r\n  }\r\n}\r\n\r\nfunction optimiseDataValidations(model) {\r\n  // Squeeze alike data validations together into rectangular ranges\r\n  // to reduce file size and speed up Excel load time\r\n  const dvList = _.map(model, (dataValidation, address) => ({\r\n    address,\r\n    dataValidation,\r\n    marked: false,\r\n  })).sort((a, b) => _.strcmp(a.address, b.address));\r\n  const dvMap = _.keyBy(dvList, 'address');\r\n  const matchCol = (addr, height, col) => {\r\n    for (let i = 0; i < height; i++) {\r\n      const otherAddress = colCache.encodeAddress(addr.row + i, col);\r\n      if (!model[otherAddress] || !_.isEqual(model[addr.address], model[otherAddress])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  return dvList\r\n    .map(dv => {\r\n      if (!dv.marked) {\r\n        const addr = colCache.decodeEx(dv.address);\r\n        if (addr.dimensions) {\r\n          dvMap[addr.dimensions].marked = true;\r\n          return {\r\n            ...dv.dataValidation,\r\n            sqref: dv.address,\r\n          };\r\n        }\r\n\r\n        // iterate downwards - finding matching cells\r\n        let height = 1;\r\n        let otherAddress = colCache.encodeAddress(addr.row + height, addr.col);\r\n        while (model[otherAddress] && _.isEqual(dv.dataValidation, model[otherAddress])) {\r\n          height++;\r\n          otherAddress = colCache.encodeAddress(addr.row + height, addr.col);\r\n        }\r\n\r\n        // iterate rightwards...\r\n\r\n        let width = 1;\r\n        while (matchCol(addr, height, addr.col + width)) {\r\n          width++;\r\n        }\r\n\r\n        // mark all included addresses\r\n        for (let i = 0; i < height; i++) {\r\n          for (let j = 0; j < width; j++) {\r\n            otherAddress = colCache.encodeAddress(addr.row + i, addr.col + j);\r\n            dvMap[otherAddress].marked = true;\r\n          }\r\n        }\r\n\r\n        if (height > 1 || width > 1) {\r\n          const bottom = addr.row + (height - 1);\r\n          const right = addr.col + (width - 1);\r\n          return {\r\n            ...dv.dataValidation,\r\n            sqref: `${dv.address}:${colCache.encodeAddress(bottom, right)}`,\r\n          };\r\n        }\r\n        return {\r\n          ...dv.dataValidation,\r\n          sqref: dv.address,\r\n        };\r\n      }\r\n      return null;\r\n    })\r\n    .filter(Boolean);\r\n}\r\n\r\nclass DataValidationsXform extends BaseXform {\r\n  get tag() {\r\n    return 'dataValidations';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    const optimizedModel = optimiseDataValidations(model);\r\n    if (optimizedModel.length) {\r\n      xmlStream.openNode('dataValidations', {count: optimizedModel.length});\r\n\r\n      optimizedModel.forEach(value => {\r\n        xmlStream.openNode('dataValidation');\r\n\r\n        if (value.type !== 'any') {\r\n          xmlStream.addAttribute('type', value.type);\r\n\r\n          if (value.operator && value.type !== 'list' && value.operator !== 'between') {\r\n            xmlStream.addAttribute('operator', value.operator);\r\n          }\r\n          if (value.allowBlank) {\r\n            xmlStream.addAttribute('allowBlank', '1');\r\n          }\r\n        }\r\n        if (value.showInputMessage) {\r\n          xmlStream.addAttribute('showInputMessage', '1');\r\n        }\r\n        if (value.promptTitle) {\r\n          xmlStream.addAttribute('promptTitle', value.promptTitle);\r\n        }\r\n        if (value.prompt) {\r\n          xmlStream.addAttribute('prompt', value.prompt);\r\n        }\r\n        if (value.showErrorMessage) {\r\n          xmlStream.addAttribute('showErrorMessage', '1');\r\n        }\r\n        if (value.errorStyle) {\r\n          xmlStream.addAttribute('errorStyle', value.errorStyle);\r\n        }\r\n        if (value.errorTitle) {\r\n          xmlStream.addAttribute('errorTitle', value.errorTitle);\r\n        }\r\n        if (value.error) {\r\n          xmlStream.addAttribute('error', value.error);\r\n        }\r\n        xmlStream.addAttribute('sqref', value.sqref);\r\n        (value.formulae || []).forEach((formula, index) => {\r\n          xmlStream.openNode(`formula${index + 1}`);\r\n          if (value.type === 'date') {\r\n            xmlStream.writeText(utils.dateToExcel(new Date(formula)));\r\n          } else {\r\n            xmlStream.writeText(formula);\r\n          }\r\n          xmlStream.closeNode();\r\n        });\r\n        xmlStream.closeNode();\r\n      });\r\n      xmlStream.closeNode();\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case 'dataValidations':\r\n        this.model = {};\r\n        return true;\r\n\r\n      case 'dataValidation': {\r\n        this._address = node.attributes.sqref;\r\n        const dataValidation = {type: node.attributes.type || 'any', formulae: []};\r\n\r\n        if (node.attributes.type) {\r\n          assignBool(dataValidation, node.attributes, 'allowBlank');\r\n        }\r\n        assignBool(dataValidation, node.attributes, 'showInputMessage');\r\n        assignBool(dataValidation, node.attributes, 'showErrorMessage');\r\n\r\n        switch (dataValidation.type) {\r\n          case 'any':\r\n          case 'list':\r\n          case 'custom':\r\n            break;\r\n          default:\r\n            assign(dataValidation, node.attributes, 'operator', 'between');\r\n            break;\r\n        }\r\n        assign(dataValidation, node.attributes, 'promptTitle');\r\n        assign(dataValidation, node.attributes, 'prompt');\r\n        assign(dataValidation, node.attributes, 'errorStyle');\r\n        assign(dataValidation, node.attributes, 'errorTitle');\r\n        assign(dataValidation, node.attributes, 'error');\r\n\r\n        this._dataValidation = dataValidation;\r\n        return true;\r\n      }\r\n\r\n      case 'formula1':\r\n      case 'formula2':\r\n        this._formula = [];\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this._formula) {\r\n      this._formula.push(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case 'dataValidations':\r\n        return false;\r\n      case 'dataValidation': {\r\n        if (!this._dataValidation.formulae || !this._dataValidation.formulae.length) {\r\n          delete this._dataValidation.formulae;\r\n          delete this._dataValidation.operator;\r\n        }\r\n        // The four known cases: 1. E4:L9 N4:U9  2.E4 L9  3. N4:U9  4. E4\r\n        const list = this._address.split(/\\s+/g) || [];\r\n        list.forEach(addr => {\r\n          if (addr.includes(':')) {\r\n            const range = new Range(addr);\r\n            range.forEachAddress(address => {\r\n              this.model[address] = this._dataValidation;\r\n            });\r\n          } else {\r\n            this.model[addr] = this._dataValidation;\r\n          }\r\n        });\r\n        return true;\r\n      }\r\n      case 'formula1':\r\n      case 'formula2': {\r\n        let formula = this._formula.join('');\r\n        switch (this._dataValidation.type) {\r\n          case 'whole':\r\n          case 'textLength':\r\n            formula = parseInt(formula, 10);\r\n            break;\r\n          case 'decimal':\r\n            formula = parseFloat(formula);\r\n            break;\r\n          case 'date':\r\n            formula = utils.excelToDate(parseFloat(formula));\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        this._dataValidation.formulae.push(formula);\r\n        this._formula = undefined;\r\n        return true;\r\n      }\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = DataValidationsXform;\r\n"]},"metadata":{},"sourceType":"script"}