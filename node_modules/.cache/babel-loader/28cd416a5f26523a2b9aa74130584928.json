{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseCellAnchorXform = require('./base-cell-anchor-xform');\n\nvar StaticXform = require('../static-xform');\n\nvar CellPositionXform = require('./cell-position-xform');\n\nvar ExtXform = require('./ext-xform');\n\nvar PicXform = require('./pic-xform');\n\nvar OneCellAnchorXform = /*#__PURE__*/function (_BaseCellAnchorXform) {\n  _inherits(OneCellAnchorXform, _BaseCellAnchorXform);\n\n  var _super = _createSuper(OneCellAnchorXform);\n\n  function OneCellAnchorXform() {\n    var _this;\n\n    _classCallCheck(this, OneCellAnchorXform);\n\n    _this = _super.call(this);\n    _this.map = {\n      'xdr:from': new CellPositionXform({\n        tag: 'xdr:from'\n      }),\n      'xdr:ext': new ExtXform({\n        tag: 'xdr:ext'\n      }),\n      'xdr:pic': new PicXform(),\n      'xdr:clientData': new StaticXform({\n        tag: 'xdr:clientData'\n      })\n    };\n    return _this;\n  }\n\n  _createClass(OneCellAnchorXform, [{\n    key: \"prepare\",\n    value: function prepare(model, options) {\n      this.map['xdr:pic'].prepare(model.picture, options);\n    }\n  }, {\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode(this.tag, {\n        editAs: model.range.editAs || 'oneCell'\n      });\n      this.map['xdr:from'].render(xmlStream, model.range.tl);\n      this.map['xdr:ext'].render(xmlStream, model.range.ext);\n      this.map['xdr:pic'].render(xmlStream, model.picture);\n      this.map['xdr:clientData'].render(xmlStream, {});\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      if (this.parser) {\n        if (!this.parser.parseClose(name)) {\n          this.parser = undefined;\n        }\n\n        return true;\n      }\n\n      switch (name) {\n        case this.tag:\n          this.model.range.tl = this.map['xdr:from'].model;\n          this.model.range.ext = this.map['xdr:ext'].model;\n          this.model.picture = this.map['xdr:pic'].model;\n          return false;\n\n        default:\n          // could be some unrecognised tags\n          return true;\n      }\n    }\n  }, {\n    key: \"reconcile\",\n    value: function reconcile(model, options) {\n      model.medium = this.reconcilePicture(model.picture, options);\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return 'xdr:oneCellAnchor';\n    }\n  }]);\n\n  return OneCellAnchorXform;\n}(BaseCellAnchorXform);\n\nmodule.exports = OneCellAnchorXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/one-cell-anchor-xform.js"],"names":["BaseCellAnchorXform","require","StaticXform","CellPositionXform","ExtXform","PicXform","OneCellAnchorXform","tag","model","options","xmlStream","editAs","name","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,mBAAmB,GAAGC,OAAO,CAAnC,0BAAmC,CAAnC;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAA3B,iBAA2B,CAA3B;;AAEA,IAAME,iBAAiB,GAAGF,OAAO,CAAjC,uBAAiC,CAAjC;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAxB,aAAwB,CAAxB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAxB,aAAwB,CAAxB;;IAEMK,kB;;;;;AACJ,WAAA,kBAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;;AACZ,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,IAAA,KAAA,CAAA,GAAA,GAAW;AACT,kBAAY,IAAA,iBAAA,CAAsB;AAACC,QAAAA,GAAG,EAAE;AAAN,OAAtB,CADH;AAET,iBAAW,IAAA,QAAA,CAAa;AAACA,QAAAA,GAAG,EAAE;AAAN,OAAb,CAFF;AAGT,iBAAW,IAHF,QAGE,EAHF;AAIT,wBAAkB,IAAA,WAAA,CAAgB;AAACA,QAAAA,GAAG,EAAE;AAAN,OAAhB;AAJT,KAAX;AAHY,WAAA,KAAA;AASb;;;;4BAMOC,K,EAAOC,O,EAAS;AACtB,WAAA,GAAA,CAAA,SAAA,EAAA,OAAA,CAA4BD,KAAK,CAAjC,OAAA,EAAA,OAAA;AACD;;;2BAEME,S,EAAWF,K,EAAO;AACvBE,MAAAA,SAAS,CAATA,QAAAA,CAAmB,KAAnBA,GAAAA,EAA6B;AAACC,QAAAA,MAAM,EAAEH,KAAK,CAALA,KAAAA,CAAAA,MAAAA,IAAsB;AAA/B,OAA7BE;AAEA,WAAA,GAAA,CAAA,UAAA,EAAA,MAAA,CAAA,SAAA,EAAuCF,KAAK,CAALA,KAAAA,CAAvC,EAAA;AACA,WAAA,GAAA,CAAA,SAAA,EAAA,MAAA,CAAA,SAAA,EAAsCA,KAAK,CAALA,KAAAA,CAAtC,GAAA;AACA,WAAA,GAAA,CAAA,SAAA,EAAA,MAAA,CAAA,SAAA,EAAsCA,KAAK,CAA3C,OAAA;AACA,WAAA,GAAA,CAAA,gBAAA,EAAA,MAAA,CAAA,SAAA,EAAA,EAAA;AAEAE,MAAAA,SAAS,CAATA,SAAAA;AACD;;;+BAEUE,I,EAAM;AACf,UAAI,KAAJ,MAAA,EAAiB;AACf,YAAI,CAAC,KAAA,MAAA,CAAA,UAAA,CAAL,IAAK,CAAL,EAAmC;AACjC,eAAA,MAAA,GAAA,SAAA;AACD;;AACD,eAAA,IAAA;AACD;;AACD,cAAA,IAAA;AACE,aAAK,KAAL,GAAA;AACE,eAAA,KAAA,CAAA,KAAA,CAAA,EAAA,GAAsB,KAAA,GAAA,CAAA,UAAA,EAAtB,KAAA;AACA,eAAA,KAAA,CAAA,KAAA,CAAA,GAAA,GAAuB,KAAA,GAAA,CAAA,SAAA,EAAvB,KAAA;AACA,eAAA,KAAA,CAAA,OAAA,GAAqB,KAAA,GAAA,CAAA,SAAA,EAArB,KAAA;AACA,iBAAA,KAAA;;AACF;AACE;AACA,iBAAA,IAAA;AARJ;AAUD;;;8BAESJ,K,EAAOC,O,EAAS;AACxBD,MAAAA,KAAK,CAALA,MAAAA,GAAe,KAAA,gBAAA,CAAsBA,KAAK,CAA3B,OAAA,EAAfA,OAAe,CAAfA;AACD;;;wBAxCS;AACR,aAAA,mBAAA;AACD;;;;EAd8BR,mB;;AAuDjCa,MAAM,CAANA,OAAAA,GAAAA,kBAAAA","sourcesContent":["const BaseCellAnchorXform = require('./base-cell-anchor-xform');\r\nconst StaticXform = require('../static-xform');\r\n\r\nconst CellPositionXform = require('./cell-position-xform');\r\nconst ExtXform = require('./ext-xform');\r\nconst PicXform = require('./pic-xform');\r\n\r\nclass OneCellAnchorXform extends BaseCellAnchorXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'xdr:from': new CellPositionXform({tag: 'xdr:from'}),\r\n      'xdr:ext': new ExtXform({tag: 'xdr:ext'}),\r\n      'xdr:pic': new PicXform(),\r\n      'xdr:clientData': new StaticXform({tag: 'xdr:clientData'}),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'xdr:oneCellAnchor';\r\n  }\r\n\r\n  prepare(model, options) {\r\n    this.map['xdr:pic'].prepare(model.picture, options);\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {editAs: model.range.editAs || 'oneCell'});\r\n\r\n    this.map['xdr:from'].render(xmlStream, model.range.tl);\r\n    this.map['xdr:ext'].render(xmlStream, model.range.ext);\r\n    this.map['xdr:pic'].render(xmlStream, model.picture);\r\n    this.map['xdr:clientData'].render(xmlStream, {});\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        this.model.range.tl = this.map['xdr:from'].model;\r\n        this.model.range.ext = this.map['xdr:ext'].model;\r\n        this.model.picture = this.map['xdr:pic'].model;\r\n        return false;\r\n      default:\r\n        // could be some unrecognised tags\r\n        return true;\r\n    }\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    model.medium = this.reconcilePicture(model.picture, options);\r\n  }\r\n}\r\n\r\nmodule.exports = OneCellAnchorXform;\r\n"]},"metadata":{},"sourceType":"script"}