{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BaseXform = require('../base-xform');\n\nvar AppTitlesOfPartsXform = /*#__PURE__*/function (_BaseXform) {\n  _inherits(AppTitlesOfPartsXform, _BaseXform);\n\n  var _super = _createSuper(AppTitlesOfPartsXform);\n\n  function AppTitlesOfPartsXform() {\n    _classCallCheck(this, AppTitlesOfPartsXform);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AppTitlesOfPartsXform, [{\n    key: \"render\",\n    value: function render(xmlStream, model) {\n      xmlStream.openNode('TitlesOfParts');\n      xmlStream.openNode('vt:vector', {\n        size: model.length,\n        baseType: 'lpstr'\n      });\n      model.forEach(function (sheet) {\n        xmlStream.leafNode('vt:lpstr', undefined, sheet.name);\n      });\n      xmlStream.closeNode();\n      xmlStream.closeNode();\n    }\n  }, {\n    key: \"parseOpen\",\n    value: function parseOpen(node) {\n      // no parsing\n      return node.name === 'TitlesOfParts';\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText() {}\n  }, {\n    key: \"parseClose\",\n    value: function parseClose(name) {\n      return name !== 'TitlesOfParts';\n    }\n  }]);\n\n  return AppTitlesOfPartsXform;\n}(BaseXform);\n\nmodule.exports = AppTitlesOfPartsXform;","map":{"version":3,"sources":["../../../../../lib/xlsx/xform/core/app-titles-of-parts-xform.js"],"names":["BaseXform","require","AppTitlesOfPartsXform","xmlStream","model","size","baseType","sheet","node","name","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAzB,eAAyB,CAAzB;;IAEMC,qB;;;;;;;;;;;;;2BACGC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAATA,QAAAA,CAAAA,eAAAA;AACAA,MAAAA,SAAS,CAATA,QAAAA,CAAAA,WAAAA,EAAgC;AAACE,QAAAA,IAAI,EAAED,KAAK,CAAZ,MAAA;AAAqBE,QAAAA,QAAQ,EAAE;AAA/B,OAAhCH;AAEAC,MAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,KAAA,EAAS;AACrBD,QAAAA,SAAS,CAATA,QAAAA,CAAAA,UAAAA,EAAAA,SAAAA,EAA0CI,KAAK,CAA/CJ,IAAAA;AADFC,OAAAA;AAIAD,MAAAA,SAAS,CAATA,SAAAA;AACAA,MAAAA,SAAS,CAATA,SAAAA;AACD;;;8BAESK,I,EAAM;AACd;AACA,aAAOA,IAAI,CAAJA,IAAAA,KAAP,eAAA;AACD;;;gCAEW,CAAE;;;+BAEHC,I,EAAM;AACf,aAAOA,IAAI,KAAX,eAAA;AACD;;;;EAtBiCT,S;;AAyBpCU,MAAM,CAANA,OAAAA,GAAAA,qBAAAA","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nclass AppTitlesOfPartsXform extends BaseXform {\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('TitlesOfParts');\r\n    xmlStream.openNode('vt:vector', {size: model.length, baseType: 'lpstr'});\r\n\r\n    model.forEach(sheet => {\r\n      xmlStream.leafNode('vt:lpstr', undefined, sheet.name);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    // no parsing\r\n    return node.name === 'TitlesOfParts';\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    return name !== 'TitlesOfParts';\r\n  }\r\n}\r\n\r\nmodule.exports = AppTitlesOfPartsXform;\r\n"]},"metadata":{},"sourceType":"script"}