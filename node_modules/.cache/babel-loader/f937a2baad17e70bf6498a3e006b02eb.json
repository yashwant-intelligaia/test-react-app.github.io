{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/* eslint-disable max-classes-per-file */\n\n\nvar colCache = require('../utils/col-cache');\n\nvar _ = require('../utils/under-dash');\n\nvar Enums = require('./enums');\n\nvar _require = require('../utils/shared-formula'),\n    slideFormula = _require.slideFormula;\n\nvar Note = require('./note'); // Cell requirements\n//  Operate inside a worksheet\n//  Store and retrieve a value with a range of types: text, number, date, hyperlink, reference, formula, etc.\n//  Manage/use and manipulate cell format either as local to cell or inherited from column or row.\n\n\nvar Cell = /*#__PURE__*/function () {\n  function Cell(row, column, address) {\n    _classCallCheck(this, Cell);\n\n    if (!row || !column) {\n      throw new Error('A Cell needs a Row');\n    }\n\n    this._row = row;\n    this._column = column;\n    colCache.validateAddress(address);\n    this._address = address; // TODO: lazy evaluation of this._value\n\n    this._value = Value.create(Cell.Types.Null, this);\n    this.style = this._mergeStyle(row.style, column.style, {});\n    this._mergeCount = 0;\n  }\n\n  _createClass(Cell, [{\n    key: \"destroy\",\n    // help GC by removing cyclic (and other) references\n    value: function destroy() {\n      delete this.style;\n      delete this._value;\n      delete this._row;\n      delete this._column;\n      delete this._address;\n    } // =========================================================================\n    // Styles stuff\n\n  }, {\n    key: \"_mergeStyle\",\n    value: function _mergeStyle(rowStyle, colStyle, style) {\n      var numFmt = rowStyle && rowStyle.numFmt || colStyle && colStyle.numFmt;\n      if (numFmt) style.numFmt = numFmt;\n      var font = rowStyle && rowStyle.font || colStyle && colStyle.font;\n      if (font) style.font = font;\n      var alignment = rowStyle && rowStyle.alignment || colStyle && colStyle.alignment;\n      if (alignment) style.alignment = alignment;\n      var border = rowStyle && rowStyle.border || colStyle && colStyle.border;\n      if (border) style.border = border;\n      var fill = rowStyle && rowStyle.fill || colStyle && colStyle.fill;\n      if (fill) style.fill = fill;\n      var protection = rowStyle && rowStyle.protection || colStyle && colStyle.protection;\n      if (protection) style.protection = protection;\n      return style;\n    } // =========================================================================\n    // return the address for this cell\n\n  }, {\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return this._value.toCsvString();\n    } // =========================================================================\n    // Merge stuff\n\n  }, {\n    key: \"addMergeRef\",\n    value: function addMergeRef() {\n      this._mergeCount++;\n    }\n  }, {\n    key: \"releaseMergeRef\",\n    value: function releaseMergeRef() {\n      this._mergeCount--;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(master, ignoreStyle) {\n      this._value.release();\n\n      this._value = Value.create(Cell.Types.Merge, this, master);\n\n      if (!ignoreStyle) {\n        this.style = master.style;\n      }\n    }\n  }, {\n    key: \"unmerge\",\n    value: function unmerge() {\n      if (this.type === Cell.Types.Merge) {\n        this._value.release();\n\n        this._value = Value.create(Cell.Types.Null, this);\n        this.style = this._mergeStyle(this._row.style, this._column.style, {});\n      }\n    }\n  }, {\n    key: \"isMergedTo\",\n    value: function isMergedTo(master) {\n      if (this._value.type !== Cell.Types.Merge) return false;\n      return this._value.isMergedTo(master);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.text;\n    }\n  }, {\n    key: \"_upgradeToHyperlink\",\n    value: function _upgradeToHyperlink(hyperlink) {\n      // if this cell is a string, turn it into a Hyperlink\n      if (this.type === Cell.Types.String) {\n        this._value = Value.create(Cell.Types.Hyperlink, this, {\n          text: this._value.value,\n          hyperlink: hyperlink\n        });\n      }\n    } // =========================================================================\n    // Formula stuff\n\n  }, {\n    key: \"addName\",\n    value: function addName(name) {\n      this.workbook.definedNames.addEx(this.fullAddress, name);\n    }\n  }, {\n    key: \"removeName\",\n    value: function removeName(name) {\n      this.workbook.definedNames.removeEx(this.fullAddress, name);\n    }\n  }, {\n    key: \"removeAllNames\",\n    value: function removeAllNames() {\n      this.workbook.definedNames.removeAllNames(this.fullAddress);\n    } // =========================================================================\n    // Data Validation stuff\n\n  }, {\n    key: \"worksheet\",\n    get: function get() {\n      return this._row.worksheet;\n    }\n  }, {\n    key: \"workbook\",\n    get: function get() {\n      return this._row.worksheet.workbook;\n    }\n  }, {\n    key: \"numFmt\",\n    get: function get() {\n      return this.style.numFmt;\n    },\n    set: function set(value) {\n      this.style.numFmt = value;\n    }\n  }, {\n    key: \"font\",\n    get: function get() {\n      return this.style.font;\n    },\n    set: function set(value) {\n      this.style.font = value;\n    }\n  }, {\n    key: \"alignment\",\n    get: function get() {\n      return this.style.alignment;\n    },\n    set: function set(value) {\n      this.style.alignment = value;\n    }\n  }, {\n    key: \"border\",\n    get: function get() {\n      return this.style.border;\n    },\n    set: function set(value) {\n      this.style.border = value;\n    }\n  }, {\n    key: \"fill\",\n    get: function get() {\n      return this.style.fill;\n    },\n    set: function set(value) {\n      this.style.fill = value;\n    }\n  }, {\n    key: \"protection\",\n    get: function get() {\n      return this.style.protection;\n    },\n    set: function set(value) {\n      this.style.protection = value;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this._address;\n    }\n  }, {\n    key: \"row\",\n    get: function get() {\n      return this._row.number;\n    }\n  }, {\n    key: \"col\",\n    get: function get() {\n      return this._column.number;\n    }\n  }, {\n    key: \"$col$row\",\n    get: function get() {\n      return \"$\".concat(this._column.letter, \"$\").concat(this.row);\n    } // =========================================================================\n    // Value stuff\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._value.type;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return this._value.effectiveType;\n    }\n  }, {\n    key: \"isMerged\",\n    get: function get() {\n      return this._mergeCount > 0 || this.type === Cell.Types.Merge;\n    }\n  }, {\n    key: \"master\",\n    get: function get() {\n      if (this.type === Cell.Types.Merge) {\n        return this._value.master;\n      }\n\n      return this; // an unmerged cell is its own master\n    }\n  }, {\n    key: \"isHyperlink\",\n    get: function get() {\n      return this._value.type === Cell.Types.Hyperlink;\n    }\n  }, {\n    key: \"hyperlink\",\n    get: function get() {\n      return this._value.hyperlink;\n    } // return the value\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value.value;\n    } // set the value - can be number, string or raw\n    ,\n    set: function set(v) {\n      // special case - merge cells set their master's value\n      if (this.type === Cell.Types.Merge) {\n        this._value.master.value = v;\n        return;\n      }\n\n      this._value.release(); // assign value\n\n\n      this._value = Value.create(Value.getType(v), this, v);\n    }\n  }, {\n    key: \"note\",\n    get: function get() {\n      return this._comment && this._comment.note;\n    },\n    set: function set(note) {\n      this._comment = new Note(note);\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this._value.toString();\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      return _.escapeHtml(this.text);\n    }\n  }, {\n    key: \"formula\",\n    get: function get() {\n      return this._value.formula;\n    }\n  }, {\n    key: \"result\",\n    get: function get() {\n      return this._value.result;\n    }\n  }, {\n    key: \"formulaType\",\n    get: function get() {\n      return this._value.formulaType;\n    } // =========================================================================\n    // Name stuff\n\n  }, {\n    key: \"fullAddress\",\n    get: function get() {\n      var worksheet = this._row.worksheet;\n      return {\n        sheetName: worksheet.name,\n        address: this.address,\n        row: this.row,\n        col: this.col\n      };\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.names[0];\n    },\n    set: function set(value) {\n      this.names = [value];\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.workbook.definedNames.getNamesEx(this.fullAddress);\n    },\n    set: function set(value) {\n      var _this = this;\n\n      var definedNames = this.workbook.definedNames;\n      definedNames.removeAllNames(this.fullAddress);\n      value.forEach(function (name) {\n        definedNames.addEx(_this.fullAddress, name);\n      });\n    }\n  }, {\n    key: \"_dataValidations\",\n    get: function get() {\n      return this.worksheet.dataValidations;\n    }\n  }, {\n    key: \"dataValidation\",\n    get: function get() {\n      return this._dataValidations.find(this.address);\n    },\n    set: function set(value) {\n      this._dataValidations.add(this.address, value);\n    } // =========================================================================\n    // Model stuff\n\n  }, {\n    key: \"model\",\n    get: function get() {\n      var model = this._value.model;\n      model.style = this.style;\n\n      if (this._comment) {\n        model.comment = this._comment.model;\n      }\n\n      return model;\n    },\n    set: function set(value) {\n      this._value.release();\n\n      this._value = Value.create(value.type, this);\n      this._value.model = value;\n\n      if (value.comment) {\n        switch (value.comment.type) {\n          case 'note':\n            this._comment = Note.fromModel(value.comment);\n            break;\n        }\n      }\n\n      if (value.style) {\n        this.style = value.style;\n      } else {\n        this.style = {};\n      }\n    }\n  }]);\n\n  return Cell;\n}();\n\nCell.Types = Enums.ValueType; // =============================================================================\n// Internal Value Types\n\nvar NullValue = /*#__PURE__*/function () {\n  function NullValue(cell) {\n    _classCallCheck(this, NullValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Null\n    };\n  }\n\n  _createClass(NullValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return '';\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return null;\n    },\n    set: function set(value) {// nothing to do\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.Null;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.Null;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return NullValue;\n}();\n\nvar NumberValue = /*#__PURE__*/function () {\n  function NumberValue(cell, value) {\n    _classCallCheck(this, NumberValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Number,\n      value: value\n    };\n  }\n\n  _createClass(NumberValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return this.model.value.toString();\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.value.toString();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.model.value;\n    },\n    set: function set(value) {\n      this.model.value = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.Number;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.Number;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return NumberValue;\n}();\n\nvar StringValue = /*#__PURE__*/function () {\n  function StringValue(cell, value) {\n    _classCallCheck(this, StringValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value: value\n    };\n  }\n\n  _createClass(StringValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return \"\\\"\".concat(this.model.value.replace(/\"/g, '\"\"'), \"\\\"\");\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.value;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.model.value;\n    },\n    set: function set(value) {\n      this.model.value = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.String;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.String;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return StringValue;\n}();\n\nvar RichTextValue = /*#__PURE__*/function () {\n  function RichTextValue(cell, value) {\n    _classCallCheck(this, RichTextValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value: value\n    };\n  }\n\n  _createClass(RichTextValue, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.model.value.richText.map(function (t) {\n        return t.text;\n      }).join('');\n    }\n  }, {\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return \"\\\"\".concat(this.text.replace(/\"/g, '\"\"'), \"\\\"\");\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.model.value;\n    },\n    set: function set(value) {\n      this.model.value = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.RichText;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.RichText;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return RichTextValue;\n}();\n\nvar DateValue = /*#__PURE__*/function () {\n  function DateValue(cell, value) {\n    _classCallCheck(this, DateValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Date,\n      value: value\n    };\n  }\n\n  _createClass(DateValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return this.model.value.toISOString();\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.value.toString();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.model.value;\n    },\n    set: function set(value) {\n      this.model.value = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.Date;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.Date;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return DateValue;\n}();\n\nvar HyperlinkValue = /*#__PURE__*/function () {\n  function HyperlinkValue(cell, value) {\n    _classCallCheck(this, HyperlinkValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Hyperlink,\n      text: value ? value.text : undefined,\n      hyperlink: value ? value.hyperlink : undefined\n    };\n\n    if (value && value.tooltip) {\n      this.model.tooltip = value.tooltip;\n    }\n  }\n\n  _createClass(HyperlinkValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return this.model.hyperlink;\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.text;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      var v = {\n        text: this.model.text,\n        hyperlink: this.model.hyperlink\n      };\n\n      if (this.model.tooltip) {\n        v.tooltip = this.model.tooltip;\n      }\n\n      return v;\n    },\n    set: function set(value) {\n      this.model = {\n        text: value.text,\n        hyperlink: value.hyperlink\n      };\n\n      if (value.tooltip) {\n        this.model.tooltip = value.tooltip;\n      }\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this.model.text;\n    },\n    set: function set(value) {\n      this.model.text = value;\n    }\n    /*\r\n    get tooltip() {\r\n      return this.model.tooltip;\r\n    }\r\n      set tooltip(value) {\r\n      this.model.tooltip = value;\r\n    } */\n\n  }, {\n    key: \"hyperlink\",\n    get: function get() {\n      return this.model.hyperlink;\n    },\n    set: function set(value) {\n      this.model.hyperlink = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.Hyperlink;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.Hyperlink;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return HyperlinkValue;\n}();\n\nvar MergeValue = /*#__PURE__*/function () {\n  function MergeValue(cell, master) {\n    _classCallCheck(this, MergeValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Merge,\n      master: master ? master.address : undefined\n    };\n    this._master = master;\n\n    if (master) {\n      master.addMergeRef();\n    }\n  }\n\n  _createClass(MergeValue, [{\n    key: \"isMergedTo\",\n    value: function isMergedTo(master) {\n      return master === this._master;\n    }\n  }, {\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return '';\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      this._master.releaseMergeRef();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.value.toString();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._master.value;\n    },\n    set: function set(value) {\n      if (value instanceof Cell) {\n        if (this._master) {\n          this._master.releaseMergeRef();\n        }\n\n        value.addMergeRef();\n        this._master = value;\n      } else {\n        this._master.value = value;\n      }\n    }\n  }, {\n    key: \"master\",\n    get: function get() {\n      return this._master;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.Merge;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return this._master.effectiveType;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return MergeValue;\n}();\n\nvar FormulaValue = /*#__PURE__*/function () {\n  function FormulaValue(cell, value) {\n    _classCallCheck(this, FormulaValue);\n\n    this.cell = cell;\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Formula,\n      shareType: value ? value.shareType : undefined,\n      ref: value ? value.ref : undefined,\n      formula: value ? value.formula : undefined,\n      sharedFormula: value ? value.sharedFormula : undefined,\n      result: value ? value.result : undefined\n    };\n  }\n\n  _createClass(FormulaValue, [{\n    key: \"_copyModel\",\n    value: function _copyModel(model) {\n      var copy = {};\n\n      var cp = function cp(name) {\n        var value = model[name];\n\n        if (value) {\n          copy[name] = value;\n        }\n      };\n\n      cp('formula');\n      cp('result');\n      cp('ref');\n      cp('shareType');\n      cp('sharedFormula');\n      return copy;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      switch (Value.getType(value)) {\n        case Cell.Types.Null:\n        case Cell.Types.String:\n        case Cell.Types.Number:\n        case Cell.Types.Date:\n          break;\n\n        case Cell.Types.Hyperlink:\n        case Cell.Types.Formula:\n        default:\n          throw new Error('Cannot process that type of result value');\n      }\n    }\n  }, {\n    key: \"_getTranslatedFormula\",\n    value: function _getTranslatedFormula() {\n      if (!this._translatedFormula && this.model.sharedFormula) {\n        var worksheet = this.cell.worksheet;\n        var master = worksheet.findCell(this.model.sharedFormula);\n        this._translatedFormula = master && slideFormula(master.formula, master.address, this.model.address);\n      }\n\n      return this._translatedFormula;\n    }\n  }, {\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return \"\".concat(this.model.result || '');\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.result ? this.model.result.toString() : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._copyModel(this.model);\n    },\n    set: function set(value) {\n      this.model = this._copyModel(value);\n    }\n  }, {\n    key: \"dependencies\",\n    get: function get() {\n      // find all the ranges and cells mentioned in the formula\n      var ranges = this.formula.match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g);\n      var cells = this.formula.replace(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g, '').match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}/g);\n      return {\n        ranges: ranges,\n        cells: cells\n      };\n    }\n  }, {\n    key: \"formula\",\n    get: function get() {\n      return this.model.formula || this._getTranslatedFormula();\n    },\n    set: function set(value) {\n      this.model.formula = value;\n    }\n  }, {\n    key: \"formulaType\",\n    get: function get() {\n      if (this.model.formula) {\n        return Enums.FormulaType.Master;\n      }\n\n      if (this.model.sharedFormula) {\n        return Enums.FormulaType.Shared;\n      }\n\n      return Enums.FormulaType.None;\n    }\n  }, {\n    key: \"result\",\n    get: function get() {\n      return this.model.result;\n    },\n    set: function set(value) {\n      this.model.result = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.Formula;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      var v = this.model.result;\n\n      if (v === null || v === undefined) {\n        return Enums.ValueType.Null;\n      }\n\n      if (v instanceof String || typeof v === 'string') {\n        return Enums.ValueType.String;\n      }\n\n      if (typeof v === 'number') {\n        return Enums.ValueType.Number;\n      }\n\n      if (v instanceof Date) {\n        return Enums.ValueType.Date;\n      }\n\n      if (v.text && v.hyperlink) {\n        return Enums.ValueType.Hyperlink;\n      }\n\n      if (v.formula) {\n        return Enums.ValueType.Formula;\n      }\n\n      return Enums.ValueType.Null;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return FormulaValue;\n}();\n\nvar SharedStringValue = /*#__PURE__*/function () {\n  function SharedStringValue(cell, value) {\n    _classCallCheck(this, SharedStringValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.SharedString,\n      value: value\n    };\n  }\n\n  _createClass(SharedStringValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return this.model.value.toString();\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.value.toString();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.model.value;\n    },\n    set: function set(value) {\n      this.model.value = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.SharedString;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.SharedString;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return SharedStringValue;\n}();\n\nvar BooleanValue = /*#__PURE__*/function () {\n  function BooleanValue(cell, value) {\n    _classCallCheck(this, BooleanValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Boolean,\n      value: value\n    };\n  }\n\n  _createClass(BooleanValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return this.model.value ? 1 : 0;\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.value.toString();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.model.value;\n    },\n    set: function set(value) {\n      this.model.value = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.Boolean;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.Boolean;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return BooleanValue;\n}();\n\nvar ErrorValue = /*#__PURE__*/function () {\n  function ErrorValue(cell, value) {\n    _classCallCheck(this, ErrorValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Error,\n      value: value\n    };\n  }\n\n  _createClass(ErrorValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return this.toString();\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.value.error.toString();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.model.value;\n    },\n    set: function set(value) {\n      this.model.value = value;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.Error;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.Error;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return ErrorValue;\n}();\n\nvar JSONValue = /*#__PURE__*/function () {\n  function JSONValue(cell, value) {\n    _classCallCheck(this, JSONValue);\n\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value: JSON.stringify(value),\n      rawValue: value\n    };\n  }\n\n  _createClass(JSONValue, [{\n    key: \"toCsvString\",\n    value: function toCsvString() {\n      return this.model.value;\n    }\n  }, {\n    key: \"release\",\n    value: function release() {}\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.model.value;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.model.rawValue;\n    },\n    set: function set(value) {\n      this.model.rawValue = value;\n      this.model.value = JSON.stringify(value);\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return Cell.Types.String;\n    }\n  }, {\n    key: \"effectiveType\",\n    get: function get() {\n      return Cell.Types.String;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.model.address;\n    },\n    set: function set(value) {\n      this.model.address = value;\n    }\n  }]);\n\n  return JSONValue;\n}(); // Value is a place to hold common static Value type functions\n\n\nvar Value = {\n  getType: function getType(value) {\n    if (value === null || value === undefined) {\n      return Cell.Types.Null;\n    }\n\n    if (value instanceof String || typeof value === 'string') {\n      return Cell.Types.String;\n    }\n\n    if (typeof value === 'number') {\n      return Cell.Types.Number;\n    }\n\n    if (typeof value === 'boolean') {\n      return Cell.Types.Boolean;\n    }\n\n    if (value instanceof Date) {\n      return Cell.Types.Date;\n    }\n\n    if (value.text && value.hyperlink) {\n      return Cell.Types.Hyperlink;\n    }\n\n    if (value.formula || value.sharedFormula) {\n      return Cell.Types.Formula;\n    }\n\n    if (value.richText) {\n      return Cell.Types.RichText;\n    }\n\n    if (value.sharedString) {\n      return Cell.Types.SharedString;\n    }\n\n    if (value.error) {\n      return Cell.Types.Error;\n    }\n\n    return Cell.Types.JSON;\n  },\n  // map valueType to constructor\n  types: [{\n    t: Cell.Types.Null,\n    f: NullValue\n  }, {\n    t: Cell.Types.Number,\n    f: NumberValue\n  }, {\n    t: Cell.Types.String,\n    f: StringValue\n  }, {\n    t: Cell.Types.Date,\n    f: DateValue\n  }, {\n    t: Cell.Types.Hyperlink,\n    f: HyperlinkValue\n  }, {\n    t: Cell.Types.Formula,\n    f: FormulaValue\n  }, {\n    t: Cell.Types.Merge,\n    f: MergeValue\n  }, {\n    t: Cell.Types.JSON,\n    f: JSONValue\n  }, {\n    t: Cell.Types.SharedString,\n    f: SharedStringValue\n  }, {\n    t: Cell.Types.RichText,\n    f: RichTextValue\n  }, {\n    t: Cell.Types.Boolean,\n    f: BooleanValue\n  }, {\n    t: Cell.Types.Error,\n    f: ErrorValue\n  }].reduce(function (p, t) {\n    p[t.t] = t.f;\n    return p;\n  }, []),\n  create: function create(type, cell, value) {\n    var T = this.types[type];\n\n    if (!T) {\n      throw new Error(\"Could not create Value of type \".concat(type));\n    }\n\n    return new T(cell, value);\n  }\n};\nmodule.exports = Cell;","map":{"version":3,"sources":["../../../lib/doc/cell.js"],"names":["colCache","require","_","Enums","slideFormula","Note","Cell","Value","row","column","value","rowStyle","colStyle","style","numFmt","font","alignment","border","fill","protection","master","ignoreStyle","v","note","hyperlink","text","worksheet","sheetName","address","col","definedNames","name","model","NullValue","cell","type","Null","NumberValue","StringValue","RichTextValue","t","DateValue","HyperlinkValue","undefined","MergeValue","FormulaValue","shareType","ref","formula","sharedFormula","result","copy","cp","ranges","cells","SharedStringValue","BooleanValue","ErrorValue","JSONValue","JSON","rawValue","getType","types","f","p","create","T","module"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\r\nconst colCache = require('../utils/col-cache');\r\nconst _ = require('../utils/under-dash');\r\nconst Enums = require('./enums');\r\nconst {slideFormula} = require('../utils/shared-formula');\r\nconst Note = require('./note');\r\n// Cell requirements\r\n//  Operate inside a worksheet\r\n//  Store and retrieve a value with a range of types: text, number, date, hyperlink, reference, formula, etc.\r\n//  Manage/use and manipulate cell format either as local to cell or inherited from column or row.\r\n\r\nclass Cell {\r\n  constructor(row, column, address) {\r\n    if (!row || !column) {\r\n      throw new Error('A Cell needs a Row');\r\n    }\r\n\r\n    this._row = row;\r\n    this._column = column;\r\n\r\n    colCache.validateAddress(address);\r\n    this._address = address;\r\n\r\n    // TODO: lazy evaluation of this._value\r\n    this._value = Value.create(Cell.Types.Null, this);\r\n\r\n    this.style = this._mergeStyle(row.style, column.style, {});\r\n\r\n    this._mergeCount = 0;\r\n  }\r\n\r\n  get worksheet() {\r\n    return this._row.worksheet;\r\n  }\r\n\r\n  get workbook() {\r\n    return this._row.worksheet.workbook;\r\n  }\r\n\r\n  // help GC by removing cyclic (and other) references\r\n  destroy() {\r\n    delete this.style;\r\n    delete this._value;\r\n    delete this._row;\r\n    delete this._column;\r\n    delete this._address;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Styles stuff\r\n  get numFmt() {\r\n    return this.style.numFmt;\r\n  }\r\n\r\n  set numFmt(value) {\r\n    this.style.numFmt = value;\r\n  }\r\n\r\n  get font() {\r\n    return this.style.font;\r\n  }\r\n\r\n  set font(value) {\r\n    this.style.font = value;\r\n  }\r\n\r\n  get alignment() {\r\n    return this.style.alignment;\r\n  }\r\n\r\n  set alignment(value) {\r\n    this.style.alignment = value;\r\n  }\r\n\r\n  get border() {\r\n    return this.style.border;\r\n  }\r\n\r\n  set border(value) {\r\n    this.style.border = value;\r\n  }\r\n\r\n  get fill() {\r\n    return this.style.fill;\r\n  }\r\n\r\n  set fill(value) {\r\n    this.style.fill = value;\r\n  }\r\n\r\n  get protection() {\r\n    return this.style.protection;\r\n  }\r\n\r\n  set protection(value) {\r\n    this.style.protection = value;\r\n  }\r\n\r\n  _mergeStyle(rowStyle, colStyle, style) {\r\n    const numFmt = (rowStyle && rowStyle.numFmt) || (colStyle && colStyle.numFmt);\r\n    if (numFmt) style.numFmt = numFmt;\r\n\r\n    const font = (rowStyle && rowStyle.font) || (colStyle && colStyle.font);\r\n    if (font) style.font = font;\r\n\r\n    const alignment = (rowStyle && rowStyle.alignment) || (colStyle && colStyle.alignment);\r\n    if (alignment) style.alignment = alignment;\r\n\r\n    const border = (rowStyle && rowStyle.border) || (colStyle && colStyle.border);\r\n    if (border) style.border = border;\r\n\r\n    const fill = (rowStyle && rowStyle.fill) || (colStyle && colStyle.fill);\r\n    if (fill) style.fill = fill;\r\n\r\n    const protection = (rowStyle && rowStyle.protection) || (colStyle && colStyle.protection);\r\n    if (protection) style.protection = protection;\r\n\r\n    return style;\r\n  }\r\n\r\n  // =========================================================================\r\n  // return the address for this cell\r\n  get address() {\r\n    return this._address;\r\n  }\r\n\r\n  get row() {\r\n    return this._row.number;\r\n  }\r\n\r\n  get col() {\r\n    return this._column.number;\r\n  }\r\n\r\n  get $col$row() {\r\n    return `$${this._column.letter}$${this.row}`;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Value stuff\r\n\r\n  get type() {\r\n    return this._value.type;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return this._value.effectiveType;\r\n  }\r\n\r\n  toCsvString() {\r\n    return this._value.toCsvString();\r\n  }\r\n\r\n  // =========================================================================\r\n  // Merge stuff\r\n\r\n  addMergeRef() {\r\n    this._mergeCount++;\r\n  }\r\n\r\n  releaseMergeRef() {\r\n    this._mergeCount--;\r\n  }\r\n\r\n  get isMerged() {\r\n    return this._mergeCount > 0 || this.type === Cell.Types.Merge;\r\n  }\r\n\r\n  merge(master, ignoreStyle) {\r\n    this._value.release();\r\n    this._value = Value.create(Cell.Types.Merge, this, master);\r\n    if (!ignoreStyle) {\r\n      this.style = master.style;\r\n    }\r\n  }\r\n\r\n  unmerge() {\r\n    if (this.type === Cell.Types.Merge) {\r\n      this._value.release();\r\n      this._value = Value.create(Cell.Types.Null, this);\r\n      this.style = this._mergeStyle(this._row.style, this._column.style, {});\r\n    }\r\n  }\r\n\r\n  isMergedTo(master) {\r\n    if (this._value.type !== Cell.Types.Merge) return false;\r\n    return this._value.isMergedTo(master);\r\n  }\r\n\r\n  get master() {\r\n    if (this.type === Cell.Types.Merge) {\r\n      return this._value.master;\r\n    }\r\n    return this; // an unmerged cell is its own master\r\n  }\r\n\r\n  get isHyperlink() {\r\n    return this._value.type === Cell.Types.Hyperlink;\r\n  }\r\n\r\n  get hyperlink() {\r\n    return this._value.hyperlink;\r\n  }\r\n\r\n  // return the value\r\n  get value() {\r\n    return this._value.value;\r\n  }\r\n\r\n  // set the value - can be number, string or raw\r\n  set value(v) {\r\n    // special case - merge cells set their master's value\r\n    if (this.type === Cell.Types.Merge) {\r\n      this._value.master.value = v;\r\n      return;\r\n    }\r\n\r\n    this._value.release();\r\n\r\n    // assign value\r\n    this._value = Value.create(Value.getType(v), this, v);\r\n  }\r\n\r\n  get note() {\r\n    return this._comment && this._comment.note;\r\n  }\r\n\r\n  set note(note) {\r\n    this._comment = new Note(note);\r\n  }\r\n\r\n  get text() {\r\n    return this._value.toString();\r\n  }\r\n\r\n  get html() {\r\n    return _.escapeHtml(this.text);\r\n  }\r\n\r\n  toString() {\r\n    return this.text;\r\n  }\r\n\r\n  _upgradeToHyperlink(hyperlink) {\r\n    // if this cell is a string, turn it into a Hyperlink\r\n    if (this.type === Cell.Types.String) {\r\n      this._value = Value.create(Cell.Types.Hyperlink, this, {\r\n        text: this._value.value,\r\n        hyperlink,\r\n      });\r\n    }\r\n  }\r\n\r\n  // =========================================================================\r\n  // Formula stuff\r\n  get formula() {\r\n    return this._value.formula;\r\n  }\r\n\r\n  get result() {\r\n    return this._value.result;\r\n  }\r\n\r\n  get formulaType() {\r\n    return this._value.formulaType;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Name stuff\r\n  get fullAddress() {\r\n    const {worksheet} = this._row;\r\n    return {\r\n      sheetName: worksheet.name,\r\n      address: this.address,\r\n      row: this.row,\r\n      col: this.col,\r\n    };\r\n  }\r\n\r\n  get name() {\r\n    return this.names[0];\r\n  }\r\n\r\n  set name(value) {\r\n    this.names = [value];\r\n  }\r\n\r\n  get names() {\r\n    return this.workbook.definedNames.getNamesEx(this.fullAddress);\r\n  }\r\n\r\n  set names(value) {\r\n    const {definedNames} = this.workbook;\r\n    definedNames.removeAllNames(this.fullAddress);\r\n    value.forEach(name => {\r\n      definedNames.addEx(this.fullAddress, name);\r\n    });\r\n  }\r\n\r\n  addName(name) {\r\n    this.workbook.definedNames.addEx(this.fullAddress, name);\r\n  }\r\n\r\n  removeName(name) {\r\n    this.workbook.definedNames.removeEx(this.fullAddress, name);\r\n  }\r\n\r\n  removeAllNames() {\r\n    this.workbook.definedNames.removeAllNames(this.fullAddress);\r\n  }\r\n\r\n  // =========================================================================\r\n  // Data Validation stuff\r\n  get _dataValidations() {\r\n    return this.worksheet.dataValidations;\r\n  }\r\n\r\n  get dataValidation() {\r\n    return this._dataValidations.find(this.address);\r\n  }\r\n\r\n  set dataValidation(value) {\r\n    this._dataValidations.add(this.address, value);\r\n  }\r\n\r\n  // =========================================================================\r\n  // Model stuff\r\n\r\n  get model() {\r\n    const {model} = this._value;\r\n    model.style = this.style;\r\n    if (this._comment) {\r\n      model.comment = this._comment.model;\r\n    }\r\n    return model;\r\n  }\r\n\r\n  set model(value) {\r\n    this._value.release();\r\n    this._value = Value.create(value.type, this);\r\n    this._value.model = value;\r\n\r\n    if (value.comment) {\r\n      switch (value.comment.type) {\r\n        case 'note':\r\n          this._comment = Note.fromModel(value.comment);\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (value.style) {\r\n      this.style = value.style;\r\n    } else {\r\n      this.style = {};\r\n    }\r\n  }\r\n}\r\nCell.Types = Enums.ValueType;\r\n\r\n// =============================================================================\r\n// Internal Value Types\r\n\r\nclass NullValue {\r\n  constructor(cell) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.Null,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return null;\r\n  }\r\n\r\n  set value(value) {\r\n    // nothing to do\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.Null;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.Null;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return '';\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return '';\r\n  }\r\n}\r\n\r\nclass NumberValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.Number,\r\n      value,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.model.value;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model.value = value;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.Number;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.Number;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return this.model.value.toString();\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.value.toString();\r\n  }\r\n}\r\n\r\nclass StringValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.String,\r\n      value,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.model.value;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model.value = value;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.String;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.String;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return `\"${this.model.value.replace(/\"/g, '\"\"')}\"`;\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.value;\r\n  }\r\n}\r\n\r\nclass RichTextValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.String,\r\n      value,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.model.value;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model.value = value;\r\n  }\r\n\r\n  toString() {\r\n    return this.model.value.richText.map(t => t.text).join('');\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.RichText;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.RichText;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return `\"${this.text.replace(/\"/g, '\"\"')}\"`;\r\n  }\r\n\r\n  release() {}\r\n}\r\n\r\nclass DateValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.Date,\r\n      value,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.model.value;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model.value = value;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.Date;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.Date;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return this.model.value.toISOString();\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.value.toString();\r\n  }\r\n}\r\n\r\nclass HyperlinkValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.Hyperlink,\r\n      text: value ? value.text : undefined,\r\n      hyperlink: value ? value.hyperlink : undefined,\r\n    };\r\n    if (value && value.tooltip) {\r\n      this.model.tooltip = value.tooltip;\r\n    }\r\n  }\r\n\r\n  get value() {\r\n    const v = {\r\n      text: this.model.text,\r\n      hyperlink: this.model.hyperlink,\r\n    };\r\n    if (this.model.tooltip) {\r\n      v.tooltip = this.model.tooltip;\r\n    }\r\n    return v;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model = {\r\n      text: value.text,\r\n      hyperlink: value.hyperlink,\r\n    };\r\n    if (value.tooltip) {\r\n      this.model.tooltip = value.tooltip;\r\n    }\r\n  }\r\n\r\n  get text() {\r\n    return this.model.text;\r\n  }\r\n\r\n  set text(value) {\r\n    this.model.text = value;\r\n  }\r\n\r\n  /*\r\n  get tooltip() {\r\n    return this.model.tooltip;\r\n  }\r\n\r\n  set tooltip(value) {\r\n    this.model.tooltip = value;\r\n  } */\r\n\r\n  get hyperlink() {\r\n    return this.model.hyperlink;\r\n  }\r\n\r\n  set hyperlink(value) {\r\n    this.model.hyperlink = value;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.Hyperlink;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.Hyperlink;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return this.model.hyperlink;\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.text;\r\n  }\r\n}\r\n\r\nclass MergeValue {\r\n  constructor(cell, master) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.Merge,\r\n      master: master ? master.address : undefined,\r\n    };\r\n    this._master = master;\r\n    if (master) {\r\n      master.addMergeRef();\r\n    }\r\n  }\r\n\r\n  get value() {\r\n    return this._master.value;\r\n  }\r\n\r\n  set value(value) {\r\n    if (value instanceof Cell) {\r\n      if (this._master) {\r\n        this._master.releaseMergeRef();\r\n      }\r\n      value.addMergeRef();\r\n      this._master = value;\r\n    } else {\r\n      this._master.value = value;\r\n    }\r\n  }\r\n\r\n  isMergedTo(master) {\r\n    return master === this._master;\r\n  }\r\n\r\n  get master() {\r\n    return this._master;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.Merge;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return this._master.effectiveType;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return '';\r\n  }\r\n\r\n  release() {\r\n    this._master.releaseMergeRef();\r\n  }\r\n\r\n  toString() {\r\n    return this.value.toString();\r\n  }\r\n}\r\n\r\nclass FormulaValue {\r\n  constructor(cell, value) {\r\n    this.cell = cell;\r\n\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.Formula,\r\n      shareType: value ? value.shareType : undefined,\r\n      ref: value ? value.ref : undefined,\r\n      formula: value ? value.formula : undefined,\r\n      sharedFormula: value ? value.sharedFormula : undefined,\r\n      result: value ? value.result : undefined,\r\n    };\r\n  }\r\n\r\n  _copyModel(model) {\r\n    const copy = {};\r\n    const cp = name => {\r\n      const value = model[name];\r\n      if (value) {\r\n        copy[name] = value;\r\n      }\r\n    };\r\n    cp('formula');\r\n    cp('result');\r\n    cp('ref');\r\n    cp('shareType');\r\n    cp('sharedFormula');\r\n    return copy;\r\n  }\r\n\r\n  get value() {\r\n    return this._copyModel(this.model);\r\n  }\r\n\r\n  set value(value) {\r\n    this.model = this._copyModel(value);\r\n  }\r\n\r\n  validate(value) {\r\n    switch (Value.getType(value)) {\r\n      case Cell.Types.Null:\r\n      case Cell.Types.String:\r\n      case Cell.Types.Number:\r\n      case Cell.Types.Date:\r\n        break;\r\n      case Cell.Types.Hyperlink:\r\n      case Cell.Types.Formula:\r\n      default:\r\n        throw new Error('Cannot process that type of result value');\r\n    }\r\n  }\r\n\r\n  get dependencies() {\r\n    // find all the ranges and cells mentioned in the formula\r\n    const ranges = this.formula.match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g);\r\n    const cells = this.formula\r\n      .replace(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g, '')\r\n      .match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}/g);\r\n    return {\r\n      ranges,\r\n      cells,\r\n    };\r\n  }\r\n\r\n  get formula() {\r\n    return this.model.formula || this._getTranslatedFormula();\r\n  }\r\n\r\n  set formula(value) {\r\n    this.model.formula = value;\r\n  }\r\n\r\n  get formulaType() {\r\n    if (this.model.formula) {\r\n      return Enums.FormulaType.Master;\r\n    }\r\n    if (this.model.sharedFormula) {\r\n      return Enums.FormulaType.Shared;\r\n    }\r\n    return Enums.FormulaType.None;\r\n  }\r\n\r\n  get result() {\r\n    return this.model.result;\r\n  }\r\n\r\n  set result(value) {\r\n    this.model.result = value;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.Formula;\r\n  }\r\n\r\n  get effectiveType() {\r\n    const v = this.model.result;\r\n    if (v === null || v === undefined) {\r\n      return Enums.ValueType.Null;\r\n    }\r\n    if (v instanceof String || typeof v === 'string') {\r\n      return Enums.ValueType.String;\r\n    }\r\n    if (typeof v === 'number') {\r\n      return Enums.ValueType.Number;\r\n    }\r\n    if (v instanceof Date) {\r\n      return Enums.ValueType.Date;\r\n    }\r\n    if (v.text && v.hyperlink) {\r\n      return Enums.ValueType.Hyperlink;\r\n    }\r\n    if (v.formula) {\r\n      return Enums.ValueType.Formula;\r\n    }\r\n\r\n    return Enums.ValueType.Null;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  _getTranslatedFormula() {\r\n    if (!this._translatedFormula && this.model.sharedFormula) {\r\n      const {worksheet} = this.cell;\r\n      const master = worksheet.findCell(this.model.sharedFormula);\r\n      this._translatedFormula =\r\n        master && slideFormula(master.formula, master.address, this.model.address);\r\n    }\r\n    return this._translatedFormula;\r\n  }\r\n\r\n  toCsvString() {\r\n    return `${this.model.result || ''}`;\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.result ? this.model.result.toString() : '';\r\n  }\r\n}\r\n\r\nclass SharedStringValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.SharedString,\r\n      value,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.model.value;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model.value = value;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.SharedString;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.SharedString;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return this.model.value.toString();\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.value.toString();\r\n  }\r\n}\r\n\r\nclass BooleanValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.Boolean,\r\n      value,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.model.value;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model.value = value;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.Boolean;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.Boolean;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return this.model.value ? 1 : 0;\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.value.toString();\r\n  }\r\n}\r\n\r\nclass ErrorValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.Error,\r\n      value,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.model.value;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model.value = value;\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.Error;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.Error;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return this.toString();\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.value.error.toString();\r\n  }\r\n}\r\n\r\nclass JSONValue {\r\n  constructor(cell, value) {\r\n    this.model = {\r\n      address: cell.address,\r\n      type: Cell.Types.String,\r\n      value: JSON.stringify(value),\r\n      rawValue: value,\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.model.rawValue;\r\n  }\r\n\r\n  set value(value) {\r\n    this.model.rawValue = value;\r\n    this.model.value = JSON.stringify(value);\r\n  }\r\n\r\n  get type() {\r\n    return Cell.Types.String;\r\n  }\r\n\r\n  get effectiveType() {\r\n    return Cell.Types.String;\r\n  }\r\n\r\n  get address() {\r\n    return this.model.address;\r\n  }\r\n\r\n  set address(value) {\r\n    this.model.address = value;\r\n  }\r\n\r\n  toCsvString() {\r\n    return this.model.value;\r\n  }\r\n\r\n  release() {}\r\n\r\n  toString() {\r\n    return this.model.value;\r\n  }\r\n}\r\n\r\n// Value is a place to hold common static Value type functions\r\nconst Value = {\r\n  getType(value) {\r\n    if (value === null || value === undefined) {\r\n      return Cell.Types.Null;\r\n    }\r\n    if (value instanceof String || typeof value === 'string') {\r\n      return Cell.Types.String;\r\n    }\r\n    if (typeof value === 'number') {\r\n      return Cell.Types.Number;\r\n    }\r\n    if (typeof value === 'boolean') {\r\n      return Cell.Types.Boolean;\r\n    }\r\n    if (value instanceof Date) {\r\n      return Cell.Types.Date;\r\n    }\r\n    if (value.text && value.hyperlink) {\r\n      return Cell.Types.Hyperlink;\r\n    }\r\n    if (value.formula || value.sharedFormula) {\r\n      return Cell.Types.Formula;\r\n    }\r\n    if (value.richText) {\r\n      return Cell.Types.RichText;\r\n    }\r\n    if (value.sharedString) {\r\n      return Cell.Types.SharedString;\r\n    }\r\n    if (value.error) {\r\n      return Cell.Types.Error;\r\n    }\r\n    return Cell.Types.JSON;\r\n  },\r\n\r\n  // map valueType to constructor\r\n  types: [\r\n    {t: Cell.Types.Null, f: NullValue},\r\n    {t: Cell.Types.Number, f: NumberValue},\r\n    {t: Cell.Types.String, f: StringValue},\r\n    {t: Cell.Types.Date, f: DateValue},\r\n    {t: Cell.Types.Hyperlink, f: HyperlinkValue},\r\n    {t: Cell.Types.Formula, f: FormulaValue},\r\n    {t: Cell.Types.Merge, f: MergeValue},\r\n    {t: Cell.Types.JSON, f: JSONValue},\r\n    {t: Cell.Types.SharedString, f: SharedStringValue},\r\n    {t: Cell.Types.RichText, f: RichTextValue},\r\n    {t: Cell.Types.Boolean, f: BooleanValue},\r\n    {t: Cell.Types.Error, f: ErrorValue},\r\n  ].reduce((p, t) => {\r\n    p[t.t] = t.f;\r\n    return p;\r\n  }, []),\r\n\r\n  create(type, cell, value) {\r\n    const T = this.types[type];\r\n    if (!T) {\r\n      throw new Error(`Could not create Value of type ${type}`);\r\n    }\r\n    return new T(cell, value);\r\n  },\r\n};\r\n\r\nmodule.exports = Cell;\r\n"]},"metadata":{},"sourceType":"script"}